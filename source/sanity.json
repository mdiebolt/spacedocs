[
  {
    "Array#":{
      "method_list":[
        "average",
        "compact",
        "copy",
        "clear",
        "flatten",
        "invoke",
        "rand",
        "remove",
        "include",
        "each",
        "map",
        "eachPair",
        "eachWithObject",
        "eachSlice",
        "pipeline",
        "shuffle",
        "first",
        "last",
        "extremes",
        "wrap",
        "partition",
        "select",
        "without",
        "reject",
        "inject",
        "sum",
        "product",
        "zip",
        "pop",
        "push",
        "reverse",
        "shift",
        "sort",
        "splice",
        "unshift",
        "concat",
        "join",
        "slice",
        "toString",
        "indexOf",
        "lastIndexOf",
        "filter",
        "forEach",
        "every",
        "some",
        "reduce",
        "reduceRight"
      ],
      "methods":{
        "Array#average":{
          "summary":"<p>Calculate the average value of an array. Returns undefined if some elements<br />are not numbers.</p>",
          "code_sample":"<pre><code>[1, 3, 5, 7].average()\n# =&gt; 4\n</code></pre>",
          "source":"var _base,\n  __slice = Array.prototype.slice;\n\nArray.prototype.average = function() {\n  return this.sum() / this.length;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The average (arithmetic mean) of the list of numbers."
          },
          "see":null
        },
        "Array#compact":{
          "summary":"<p>Returns a copy of the array without null and undefined values.</p>",
          "code_sample":"<pre><code>[null, undefined, 3, 3, undefined, 5].compact()\n# =&gt; [3, 3, 5]\n</code></pre>",
          "source":"Array.prototype.compact = function() {\n  return this.select(function(element) {\n    return element != null;\n  });\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"A new array that contains only the non-null values."
          },
          "see":null
        },
        "Array#copy":{
          "summary":"<p>Creates and returns a copy of the array. The copy contains<br />the same objects.</p>",
          "code_sample":"<pre><code>a = [\"a\", \"b\", \"c\"]\nb = a.copy()\n\n# their elements are equal\na[0] == b[0] &amp;&amp; a[1] == b[1] &amp;&amp; a[2] == b[2]\n# =&gt; true\n\n# but they aren't the same object in memory\na === b\n# =&gt; false\n</code></pre>",
          "source":"Array.prototype.copy = function() {\n  return this.concat();\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"A new array that is a copy of the array"
          },
          "see":null
        },
        "Array#clear":{
          "summary":"<p>Empties the array of its contents. It is modified in place.</p>",
          "code_sample":"<pre><code>fullArray = [1, 2, 3]\nfullArray.clear()\nfullArray\n# => []</code></pre>",
          "source":"Array.prototype.clear = function() {\n  this.length = 0;\n  return this;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"this, now emptied."
          },
          "see":null
        },
        "Array#flatten":{
          "summary":"<p>Flatten out an array of arrays into a single array of elements.</p>",
          "code_sample":"<pre><code>[[1, 2], [3, 4], 5].flatten()\n# =&gt; [1, 2, 3, 4, 5]\n\n# won't flatten twice nested arrays. call\n# flatten twice if that is what you want\n[[1, 2], [3, [4, 5]], 6].flatten()\n# =&gt; [1, 2, 3, [4, 5], 6]\n</code></pre>",
          "source":"Array.prototype.flatten = function() {\n  return this.inject([], function(a, b) {\n    return a.concat(b);\n  });\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"A new array with all the sub-arrays flattened to the top."
          },
          "see":null
        },
        "Array#invoke":{
          "summary":"<p>Invoke the named method on each element in the array<br />and return a new array containing the results of the invocation.</p>",
          "code_sample":"<pre><code>[1.1, 2.2, 3.3, 4.4].invoke(\"floor\")\n# =&gt; [1, 2, 3, 4]\n\n['hello', 'world', 'cool!'].invoke('substring', 0, 3)\n# =&gt; ['hel', 'wor', 'coo']\n</code></pre>",
          "source":"Array.prototype.invoke = function() {\n  var args, method;\n  method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  return this.map(function(element) {\n    return element[method].apply(element, args);\n  });\n};",
          "parameters":{
            "method":{
              "type":"String",
              "description":"The name of the method to invoke.",
              "optional":false
            },
            "Optional":{
              "type":"[arg...]",
              "description":"arguments to pass to the method being invoked.",
              "optional":false
            }
          },
          "returns":{
            "type":"Array",
            "description":"A new array containing the results of invoking the named method on each element."
          },
          "see":null
        },
        "Array#rand":{
          "summary":"<p>Randomly select an element from the array.</p>",
          "code_sample":"<pre><code>[1, 2, 3].rand()\n# =&gt; 2\n</code></pre>",
          "source":"Array.prototype.rand = function() {\n  return this[rand(this.length)];\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"A random element from an array"
          },
          "see":null
        },
        "Array#remove":{
          "summary":"<p>Remove the first occurrence of the given object from the array if it is<br />present. The array is modified in place.</p>",
          "code_sample":"<pre><code>a = [1, 1, \"a\", \"b\"]\na.remove(1)\n# =&gt; 1\n\na\n# =&gt; [1, \"a\", \"b\"]\n</code></pre>",
          "source":"Array.prototype.remove = function(object) {\n  var index;\n  index = this.indexOf(object);\n  if (index >= 0) {\n    return this.splice(index, 1)[0];\n  } else {\n    return;\n  }\n};",
          "parameters":{
            "object":{
              "type":"Object",
              "description":"The object to remove from the array if present.",
              "optional":false
            }
          },
          "returns":{
            "type":"Object",
            "description":"The removed object if present otherwise undefined."
          },
          "see":null
        },
        "Array#include":{
          "summary":"<p>Returns true if the element is present in the array.</p>",
          "code_sample":"<pre><code>[\"a\", \"b\", \"c\"].include(\"c\")\n# =&gt; true\n\n[40, \"a\"].include(700)\n# =&gt; false\n</code></pre>",
          "source":"Array.prototype.include = function(element) {\n  return this.indexOf(element) !== -1;\n};",
          "parameters":{
            "element":{
              "type":"Object",
              "description":"The element to check if present.",
              "optional":false
            }
          },
          "returns":{
            "type":"Boolean",
            "description":"true if the element is in the array, false otherwise."
          },
          "see":null
        },
        "Array#each":{
          "summary":"<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument, the index of<br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>",
          "code_sample":"<pre><code>word = \"\"\nindices = []\n[\"r\", \"a\", \"d\"].each (letter, index) -&gt;\n  word += letter\n  indices.push(index)\n\n# =&gt; [\"r\", \"a\", \"d\"]\n\nword\n# =&gt; \"rad\"\n\nindices\n# =&gt; [0, 1, 2]\n</code></pre>",
          "source":"Array.prototype.each = function(iterator, context) {\n  var element, i, _len;\n  if (this.forEach) {\n    this.forEach(iterator, context);\n  } else {\n    for (i = 0, _len = this.length; i < _len; i++) {\n      element = this[i];\n      iterator.call(context, element, i, this);\n    }\n  }\n  return this;\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"Function to be called once for each element in the array.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"this to enable method chaining."
          },
          "see":null
        },
        "Array#map":{
          "summary":"<p>Creates a new array with the results of calling a provided function on every<br />element in this array.</p>",
          "code_sample":"<p><code><em>array</em>.map(<em>callback</em>[, <em>thisObject</em>])</code></p>",
          "source":null,
          "parameters":{
            "Function":{
              "type":"callbackthisObject",
              "description":"that produces an element of the new Array",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#eachPair":{
          "summary":"<p>Call the given iterator once for each pair of objects in the array.</p>",
          "code_sample":"<pre><code>[1, 2, 3, 4].eachPair (a, b) -&gt;\n  # 1, 2\n  # 1, 3\n  # 1, 4\n  # 2, 3\n  # 2, 4\n  # 3, 4\n</code></pre>",
          "source":"Array.prototype.eachPair = function(iterator, context) {\n  var a, b, i, j, length, _results;\n  length = this.length;\n  i = 0;\n  _results = [];\n  while (i < length) {\n    a = this[i];\n    j = i + 1;\n    i += 1;\n    _results.push((function() {\n      var _results2;\n      _results2 = [];\n      while (j < length) {\n        b = this[j];\n        j += 1;\n        _results2.push(iterator.call(context, a, b));\n      }\n      return _results2;\n    }).call(this));\n  }\n  return _results;\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"Function to be called once for each pair of elements in the array.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":null,
          "see":null
        },
        "Array#eachWithObject":{
          "summary":"<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument and the given object<br />as the second argument. Additional arguments are passed similar to<br /><code>each</code>.</p>",
          "code_sample":"",
          "source":"Array.prototype.eachWithObject = function(object, iterator, context) {\n  this.each(function(element, i, self) {\n    return iterator.call(context, element, object, i, self);\n  });\n  return object;\n};",
          "parameters":{
            "object":{
              "type":"Object",
              "description":"The object to pass to the iterator on each visit.",
              "optional":false
            },
            "iterator":{
              "type":"Function",
              "description":"Function to be called once for each element in the array.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"this"
          },
          "see":"Array#each"
        },
        "Array#eachSlice":{
          "summary":"<p>Call the given iterator once for each group of elements in the array,<br />passing in the elements in groups of n. Additional argumens are<br />passed as in each.</p>",
          "code_sample":"<pre><code>results = []\n[1, 2, 3, 4].eachSlice 2, (slice) -&gt;\n  results.push(slice)\n# =&gt; [1, 2, 3, 4]\n\nresults\n# =&gt; [[1, 2], [3, 4]]\n</code></pre>",
          "source":"Array.prototype.eachSlice = function(n, iterator, context) {\n  var i, len;\n  if (n > 0) {\n    len = (this.length / n).floor();\n    i = -1;\n    while (++i < len) {\n      iterator.call(context, this.slice(i * n, (i + 1) * n), i * n, this);\n    }\n  }\n  return this;\n};",
          "parameters":{
            "n":{
              "type":"Number",
              "description":"The number of elements in each group.",
              "optional":false
            },
            "iterator":{
              "type":"Function",
              "description":"Function to be called once for each group of elements in the array.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"this"
          },
          "see":"Array#each"
        },
        "Array#pipeline":{
          "summary":"<p>Pipe the input through each function in the array in turn. For example, if you have a<br />list of objects you can perform a series of selection, sorting, and other processing<br />methods and then receive the processed list. This array must contain functions that<br />accept a single input and return the processed input. The output of the first function<br />is fed to the input of the second and so on until the final processed output is returned.</p>",
          "code_sample":"",
          "source":"Array.prototype.pipeline = function(input) {\n  var fn, _i, _len;\n  for (_i = 0, _len = this.length; _i < _len; _i++) {\n    fn = this[_i];\n    input = fn(input);\n  }\n  return input;\n};",
          "parameters":{
            "input":{
              "type":"Object",
              "description":"The initial input to pass to the first function in the pipeline.",
              "optional":false
            }
          },
          "returns":{
            "type":"Object",
            "description":"The result of processing the input by each function in the array."
          },
          "see":null
        },
        "Array#shuffle":{
          "summary":"<p>Returns a new array with the elements all shuffled up.</p>",
          "code_sample":"<pre><code>a = [1, 2, 3]\n\na.shuffle()\n# =&gt; [2, 3, 1]\n\na # =&gt; [1, 2, 3]\n</code></pre>",
          "source":"Array.prototype.shuffle = function() {\n  var shuffledArray;\n  shuffledArray = [];\n  this.each(function(element) {\n    return shuffledArray.splice(rand(shuffledArray.length + 1), 0, element);\n  });\n  return shuffledArray;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"A new array that is randomly shuffled."
          },
          "see":null
        },
        "Array#first":{
          "summary":"<p>Returns the first element of the array, undefined if the array is empty.</p>",
          "code_sample":"<pre><code>[\"first\", \"second\", \"third\"].first()\n# =&gt; \"first\"\n</code></pre>",
          "source":"Array.prototype.first = function() {\n  return this[0];\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"The first element, or undefined if the array is empty."
          },
          "see":null
        },
        "Array#last":{
          "summary":"<p>Returns the last element of the array, undefined if the array is empty.</p>",
          "code_sample":"<pre><code>[\"first\", \"second\", \"third\"].last()\n# =&gt; \"third\"\n</code></pre>",
          "source":"Array.prototype.last = function() {\n  return this[this.length - 1];\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"The last element, or undefined if the array is empty."
          },
          "see":null
        },
        "Array#extremes":{
          "summary":"<p>Returns an object containing the extremes of this array.</p>",
          "code_sample":"<pre><code>[-1, 3, 0].extremes()\n# =&gt; {min: -1, max: 3}\n</code></pre>",
          "source":"Array.prototype.extremes = function(fn) {\n  var max, maxResult, min, minResult;\n  fn || (fn = function(n) {\n    return n;\n  });\n  min = max = void 0;\n  minResult = maxResult = void 0;\n  this.each(function(object) {\n    var result;\n    result = fn(object);\n    if (min != null) {\n      if (result < minResult) {\n        min = object;\n        minResult = result;\n      }\n    } else {\n      min = object;\n      minResult = result;\n    }\n    if (max != null) {\n      if (result > maxResult) {\n        max = object;\n        return maxResult = result;\n      }\n    } else {\n      max = object;\n      return maxResult = result;\n    }\n  });\n  return {\n    min: min,\n    max: max\n  };\n};",
          "parameters":{
            "fn":{
              "type":"Function",
              "description":"An optional funtion used to evaluate each element to calculate its value for determining extremes.",
              "optional":true
            }
          },
          "returns":{
            "type":"Object",
            "description":"{min: minElement, max: maxElement}"
          },
          "see":null
        },
        "Array#wrap":{
          "summary":"<p>Pretend the array is a circle and grab a new array containing length elements.<br />If length is not given return the element at start, again assuming the array<br />is a circle.</p>",
          "code_sample":"<pre><code>[1, 2, 3].wrap(-1)\n# =&gt; 3\n\n[1, 2, 3].wrap(6)\n# =&gt; 1\n\n[\"l\", \"o\", \"o\", \"p\"].wrap(0, 16)\n# =&gt; [\"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\"]\n</code></pre>",
          "source":"Array.prototype.wrap = function(start, length) {\n  var end, i, result;\n  if (length != null) {\n    end = start + length;\n    i = start;\n    result = [];\n    while (i++ < end) {\n      result.push(this[i.mod(this.length)]);\n    }\n    return result;\n  } else {\n    return this[start.mod(this.length)];\n  }\n};",
          "parameters":{
            "start":{
              "type":"Number",
              "description":"The index to start wrapping at, or the index of the sole element to return if no length is given.",
              "optional":false
            },
            "length":{
              "type":"Number",
              "description":"Optional length determines how long result array should be.",
              "optional":true
            }
          },
          "returns":{
            "type":"Object",
            "description":"or {Array} The element at start mod array.length, or an array of length elements, starting from start and wrapping."
          },
          "see":null
        },
        "Array#partition":{
          "summary":"<p>Partitions the elements into two groups: those for which the iterator returns<br />true, and those for which it returns false.</p>",
          "code_sample":"<pre><code>[evens, odds] = [1, 2, 3, 4].partition (n) -&gt;\n  n.even()\n\nevens\n# =&gt; [2, 4]\n\nodds\n# =&gt; [1, 3]\n</code></pre>",
          "source":"Array.prototype.partition = function(iterator, context) {\n  var falseCollection, trueCollection;\n  trueCollection = [];\n  falseCollection = [];\n  this.each(function(element) {\n    if (iterator.call(context, element)) {\n      return trueCollection.push(element);\n    } else {\n      return falseCollection.push(element);\n    }\n  });\n  return [trueCollection, falseCollection];\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"An array in the form of [trueCollection, falseCollection]"
          },
          "see":null
        },
        "Array#select":{
          "summary":"<p>Return the group of elements for which the return value of the iterator is true.</p>",
          "code_sample":"",
          "source":"Array.prototype.select = function(iterator, context) {\n  return this.partition(iterator, context)[0];\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"The iterator receives each element in turn as the first agument.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"An array containing the elements for which the iterator returned true."
          },
          "see":null
        },
        "Array#without":{
          "summary":"<p>Return the group of elements that are not in the passed in set.</p>",
          "code_sample":"<pre><code>[1, 2, 3, 4].without ([2, 3])\n# =&gt; [1, 4]\n</code></pre>",
          "source":"Array.prototype.without = function(values) {\n  return this.reject(function(element) {\n    return values.include(element);\n  });\n};",
          "parameters":{
            "values":{
              "type":"Array",
              "description":"List of elements to exclude.",
              "optional":false
            }
          },
          "returns":{
            "type":"Array",
            "description":"An array containing the elements that are not passed in."
          },
          "see":null
        },
        "Array#reject":{
          "summary":"<p>Return the group of elements for which the return value of the iterator is false.</p>",
          "code_sample":"",
          "source":"Array.prototype.reject = function(iterator, context) {\n  return this.partition(iterator, context)[1];\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"The iterator receives each element in turn as the first agument.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"Optional context parameter to be used as `this` when calling the iterator function.",
              "optional":true
            }
          },
          "returns":{
            "type":"Array",
            "description":"An array containing the elements for which the iterator returned false."
          },
          "see":null
        },
        "Array#inject":{
          "summary":"<p>Combines all elements of the array by applying a binary operation.<br />for each element in the arra the iterator is passed an accumulator<br />value (memo) and the element.</p>",
          "code_sample":"",
          "source":"Array.prototype.inject = function(initial, iterator) {\n  this.each(function(element) {\n    return initial = iterator(initial, element);\n  });\n  return initial;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"The result of a"
          },
          "see":null
        },
        "Array#sum":{
          "summary":"<p>Add all the elements in the array.</p>",
          "code_sample":"<pre><code>[1, 2, 3, 4].sum()\n# =&gt; 10\n</code></pre>",
          "source":"Array.prototype.sum = function() {\n  return this.inject(0, function(sum, n) {\n    return sum + n;\n  });\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The sum of the elements in the array."
          },
          "see":null
        },
        "Array#product":{
          "summary":"<p>Multiply all the elements in the array.</p>",
          "code_sample":"<pre><code>[1, 2, 3, 4].product()\n# =&gt; 24\n</code></pre>",
          "source":"Array.prototype.product = function() {\n  return this.inject(1, function(product, n) {\n    return product * n;\n  });\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The product of the elements in the array."
          },
          "see":null
        },
        "Array#zip":{
          "summary":"<p>Merges together the values of each of the arrays with the values at the corresponding position.</p>",
          "code_sample":"<pre><code>['a', 'b', 'c'].zip([1, 2, 3])\n# =&gt; [['a', 1], ['b', 2], ['c', 3]]\n</code></pre>",
          "source":"Array.prototype.zip = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.map(function(element, index) {\n    var output;\n    output = args.map(function(arr) {\n      return arr[index];\n    });\n    output.unshift(element);\n    return output;\n  });\n};\n;",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"Array groupings whose values are arranged by their positions in the original input arrays."
          },
          "see":null
        },
        "Array#pop":{
          "summary":"<p>Removes the last element from an array and returns that element.</p>",
          "code_sample":"<p><code><br /><i>array</i>.pop()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Array#push":{
          "summary":"<p>Mutates an array by appending the given elements and returning the new length of<br />the array.</p>",
          "code_sample":"<p><code><em>array</em>.push(<em>element1</em>, ..., <em>elementN</em>)</code></p>",
          "source":null,
          "parameters":{
            "...,":{
              "type":"element1, ",
              "description":"elementN The elements to add to the end of the array.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#reverse":{
          "summary":"<p>Reverses an array in place.  The first array element becomes the last and the<br />last becomes the first.</p>",
          "code_sample":"<p><code>array.reverse()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Array#shift":{
          "summary":"<p>Removes the first element from an array and returns that element. This method<br />changes the length of the array.</p>",
          "code_sample":"<p><code><em>array</em>.shift()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Array#sort":{
          "summary":"<p>Sorts the elements of an array in place.</p>",
          "code_sample":"<p><code><em>array</em>.sort([<em>compareFunction</em>])</code></p>",
          "source":null,
          "parameters":{
            "Specifies":{
              "type":"compareFunction",
              "description":"a function that defines the sort order. If",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#splice":{
          "summary":"<p>Changes the content of an array, adding new elements while removing old<br />elements.</p>",
          "code_sample":"<p><code><em>array</em>.splice(<em>index</em>, <em>howMany</em>[, <em>element1</em>[, ...[, <em>elementN</em>]]])</code></p>",
          "source":null,
          "parameters":{
            "Index":{
              "type":"index",
              "description":"at which to start changing the array. If negative, will",
              "optional":false
            },
            "An":{
              "type":"howMany",
              "description":"integer indicating the number of old array elements to",
              "optional":false
            },
            "...,":{
              "type":"element1, ",
              "description":"elementN The elements to add to the array. If you don't",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#unshift":{
          "summary":"<p>Adds one or more elements to the beginning of an array and returns the new<br />length of the array.</p>",
          "code_sample":"<p><code><em>arrayName</em>.unshift(<em>element1</em>, ..., <em>elementN</em>) </code></p>",
          "source":null,
          "parameters":{
            "...,":{
              "type":"element1, ",
              "description":"elementN The elements to add to the front of the array.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#concat":{
          "summary":"<p>Returns a new array comprised of this array joined with other array(s) and/or<br />value(s).</p>",
          "code_sample":"<p><code><em>array</em>.concat(<em>value1</em>, <em>value2</em>, ..., <em>valueN</em>)</code></p>",
          "source":null,
          "parameters":{
            "Arrays":{
              "type":"valueN",
              "description":"and/or values to concatenate to the resulting array.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#join":{
          "summary":"<p>Joins all elements of an array into a string.</p>",
          "code_sample":"<p><code><em>array</em>.join(<em>separator</em>)</code></p>",
          "source":null,
          "parameters":{
            "Specifies":{
              "type":"separator",
              "description":"a string to separate each element of the array. The",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#slice":{
          "summary":"<p>Returns a one-level deep copy of a portion of an array.</p>",
          "code_sample":"<p><code><em>array</em>.slice(<em>begin</em>[, <em>end</em>])</code></p>",
          "source":null,
          "parameters":{
            "Zero-based":{
              "type":"end",
              "description":"index at which to end extraction. slice extracts up to",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#toString":{
          "summary":"<p>Returns a string representing the specified array and its elements.</p>",
          "code_sample":"<p><code><em>array</em>.toString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Array#indexOf":{
          "summary":"<p>Returns the first index at which a given element can be found in the array, or<br />-1 if it is not present.</p>",
          "code_sample":"<p><code><em>array</em>.indexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>",
          "source":null,
          "parameters":{
            "fromIndex":{
              "type":"searchElement",
              "description":"Element to locate in the array.The index at",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#lastIndexOf":{
          "summary":"<p>Returns the last index at which a given element can be found in the array, or -1<br />if it is not present. The array is searched backwards, starting at fromIndex.</p>",
          "code_sample":"<p><code><em>array</em>.lastIndexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>",
          "source":null,
          "parameters":{
            "fromIndex":{
              "type":"searchElement",
              "description":"Element to locate in the array.The index at",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#filter":{
          "summary":"<p>Creates a new array with all elements that pass the test implemented by the<br />provided function.</p>",
          "code_sample":"<p><code><em>array</em>.filter(<em>callback</em>[, <em>thisObject</em>])</code></p>",
          "source":null,
          "parameters":{
            "thisObject":{
              "type":"callback",
              "description":"Function to test each element of the array.Object to",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#forEach":{
          "summary":"<p>Executes a provided function once per array element.</p>",
          "code_sample":"<p><code><em>array</em>.forEach(<em>callback</em>[, <em>thisObject</em>])</code></p>",
          "source":null,
          "parameters":{
            "thisObject":{
              "type":"callback",
              "description":"Function to execute for each element.Object to use",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#every":{
          "summary":"<p>Tests whether all elements in the array pass the test implemented by the<br />provided function.</p>",
          "code_sample":"<p><code><em>array</em>.every(<em>callback</em>[, <em>thisObject</em>])</code></p>",
          "source":null,
          "parameters":{
            "Function":{
              "type":"callbackthisObject",
              "description":"to test for each element.Object to use as",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#some":{
          "summary":"<p>Tests whether some element in the array passes the test implemented by the<br />provided function.</p>",
          "code_sample":"<p><code><em>array</em>.some(<em>callback</em>[, <em>thisObject</em>])</code></p>",
          "source":null,
          "parameters":{
            "thisObject":{
              "type":"callback",
              "description":"Function to test for each element.Object to use as",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#reduce":{
          "summary":"<p>Apply a function against an accumulator and each value of the array (from<br />left-to-right) as to reduce it to a single value.</p>",
          "code_sample":"<p><code><em>array</em>.reduce(<em>callback</em>[, <em>initialValue</em>])</code></p>",
          "source":null,
          "parameters":{
            "Function":{
              "type":"callbackinitialValue",
              "description":"to execute on each value in the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Array#reduceRight":{
          "summary":"<p>Apply a function simultaneously against two values of the array (from<br />right-to-left) as to reduce it to a single value.</p>",
          "code_sample":"<p><code><em>array</em>.reduceRight(<em>callback</em>[, <em>initialValue</em>])</code></p>",
          "source":null,
          "parameters":{
            "initialValue":{
              "type":"callback",
              "description":"Function to execute on each value in the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Bindable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Bindable#":{
      "method_list":[
        "bind",
        "unbind",
        "trigger"
      ],
      "methods":{
        "Bindable#bind":{
          "summary":"<p>Adds a function as an event listener.</p>",
          "code_sample":"<p># this will call coolEventHandler after<br />   # yourObject.trigger \"someCustomEvent\" is called.<br />   yourObject.bind \"someCustomEvent\", coolEventHandler</p>\n\n<p>#or<br />   yourObject.bind \"anotherCustomEvent\", -><br />     doSomething()</p>",
          "source":"bind: function(event, callback) {\n      eventCallbacks[event] = eventCallbacks[event] || [];\n      return eventCallbacks[event].push(callback);\n    },",
          "parameters":{
            "event":{
              "type":"String",
              "description":"The event to listen to.",
              "optional":false
            },
            "callback":{
              "type":"Function",
              "description":"The function to be called when the specified event",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Bindable#unbind":{
          "summary":"<p>Removes a specific event listener, or all event listeners if<br />no specific listener is given.</p>",
          "code_sample":"<p>Another paragraph.</p>\n\n<p>#  removes the handler coolEventHandler from the event<br />   # \"someCustomEvent\" while leaving the other events intact.<br />   yourObject.unbind \"someCustomEvent\", coolEventHandler</p>\n\n<p># removes all handlers attached to \"anotherCustomEvent\"<br />   yourObject.unbind \"anotherCustomEvent\"</p>",
          "source":"unbind: function(event, callback) {\n      eventCallbacks[event] = eventCallbacks[event] || [];\n      if (callback) {\n        return eventCallbacks[event].remove(callback);\n      } else {\n        return eventCallbacks[event] = [];\n      }\n    },",
          "parameters":{
            "event":{
              "type":"String",
              "description":"The event to remove the listener from.",
              "optional":false
            },
            "callback":{
              "type":"Function",
              "description":"The listener to remove.",
              "optional":true
            }
          },
          "returns":null,
          "see":null
        },
        "Bindable#trigger":{
          "summary":"<p>Calls all listeners attached to the specified event.</p>",
          "code_sample":"<p># calls each event handler bound to \"someCustomEvent\"<br />   yourObject.trigger \"someCustomEvent\"</p>",
          "source":"trigger: function() {\n      var callbacks, event, parameters, self;\n      event = arguments[0], parameters = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      callbacks = eventCallbacks[event];\n      if (callbacks && callbacks.length) {\n        self = this;\n        return callbacks.each(function(callback) {\n          return callback.apply(self, parameters);\n        });\n      }\n    }\n  };\n};\n\n(typeof exports !== \"undefined\" && exports !== null ? exports : this)[\"Bindable\"] = Bindable;\n;\nvar CommandStack;\n\nCommandStack = function() {\n  var index, stack;\n  stack = [];\n  index = 0;\n  return {\n    execute: function(command) {\n      stack[index] = command;\n      command.execute();\n      return stack.length = index += 1;\n    },\n    undo: function() {\n      var command;\n      if (this.canUndo()) {\n        index -= 1;\n        command = stack[index];\n        command.undo();\n        return command;\n      }\n    },\n    redo: function() {\n      var command;\n      if (this.canRedo()) {\n        command = stack[index];\n        command.execute();\n        index += 1;\n        return command;\n      }\n    },\n    canUndo: function() {\n      return index > 0;\n    },\n    canRedo: function() {\n      return stack[index] != null;\n    }\n  };\n};\n;",
          "parameters":{
            "event":{
              "type":"String",
              "description":"The event to trigger.",
              "optional":false
            },
            "parameters":{
              "type":"Array",
              "description":"Additional parameters to pass to the event listener.",
              "optional":true
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Boolean#":{
      "method_list":[
        "toString",
        "valueOf"
      ],
      "methods":{
        "Boolean#toString":{
          "summary":"<p>Returns a string representing the specified Boolean object.</p>",
          "code_sample":"<p><code>bool.toString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Boolean#valueOf":{
          "summary":"<p>Returns the primitive value of a Boolean object.</p>",
          "code_sample":"<p><code>bool.valueOf()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Bounded":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Clampable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Collision":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Controllable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Cooldown":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Core":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Date#":{
      "method_list":[
        "constructor",
        "getDate",
        "getDay",
        "getFullYear",
        "getHours",
        "getMilliseconds",
        "getMinutes",
        "getMonth",
        "getSeconds",
        "getTime",
        "getTimezoneOffset",
        "getUTCDate",
        "getUTCDay",
        "getUTCFullYear",
        "getUTCHours",
        "getUTCMilliseconds",
        "getUTCMinutes",
        "getUTCMonth",
        "getUTCSeconds",
        "setDate",
        "setFullYear",
        "setHours",
        "setMilliseconds",
        "setMinutes",
        "setMonth",
        "setSeconds",
        "setTime",
        "setUTCDate",
        "setUTCFullYear",
        "setUTCHours",
        "setUTCMilliseconds",
        "setUTCMinutes",
        "setUTCMonth",
        "setUTCSeconds",
        "toDateString",
        "toJSON",
        "toLocaleDateString",
        "toLocaleString",
        "toLocaleTimeString",
        "toString",
        "toTimeString",
        "toUTCString"
      ],
      "methods":{
        "Date#constructor":{
          "summary":"<p>Returns a reference to the Date function that created the instance's prototype.<br />Note that the value of this property is a reference to the function itself, not<br />a string containing the function's name.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getDate":{
          "summary":"<p>Returns the day of the month for the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getDate()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getDay":{
          "summary":"<p>Returns the day of the week for the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getDay()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getFullYear":{
          "summary":"<p>Returns the year of the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getFullYear()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getHours":{
          "summary":"<p>Returns the hour for the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getHours()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getMilliseconds":{
          "summary":"<p>Returns the milliseconds in the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getMilliseconds()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getMinutes":{
          "summary":"<p>Returns the minutes in the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getMinutes()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getMonth":{
          "summary":"<p>Returns the month in the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getMonth()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getSeconds":{
          "summary":"<p>Returns the seconds in the specified date according to local time.</p>",
          "code_sample":"<p><code><br />getSeconds()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getTime":{
          "summary":"<p>Returns the numeric value corresponding to the time for the specified date<br />according to universal time.</p>",
          "code_sample":"<p><code> getTime() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getTimezoneOffset":{
          "summary":"<p>Returns the time-zone offset from UTC, in minutes, for the current locale.</p>",
          "code_sample":"<p><code> getTimezoneOffset() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCDate":{
          "summary":"<p>Returns the day (date) of the month in the specified date according to universal<br />time.</p>",
          "code_sample":"<p><code><br />getUTCDate()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCDay":{
          "summary":"<p>Returns the day of the week in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCDay()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCFullYear":{
          "summary":"<p>Returns the year in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCFullYear()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCHours":{
          "summary":"<p>Returns the hours in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCHours<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCMilliseconds":{
          "summary":"<p>Returns the milliseconds in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCMilliseconds()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCMinutes":{
          "summary":"<p>Returns the minutes in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCMinutes()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCMonth":{
          "summary":"<p>Returns the month of the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCMonth()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#getUTCSeconds":{
          "summary":"<p>Returns the seconds in the specified date according to universal time.</p>",
          "code_sample":"<p><code><br />getUTCSeconds()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#setDate":{
          "summary":"<p>Sets the day of the month for a specified date according to local time.</p>",
          "code_sample":"<p><code> setDate(<em>dayValue</em>) </code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer from 1 to 31, representing the day of the month.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setFullYear":{
          "summary":"<p>Sets the full year for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer between 1 and 31 representing the day of the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setHours":{
          "summary":"<p>Sets the hours for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59, representing the seconds. If",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds. If",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setMilliseconds":{
          "summary":"<p>Sets the milliseconds for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setMilliseconds(<i>millisecondsValue</i>)<br /></code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"millisecondsValue",
              "description":"number between 0 and 999, representing the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setMinutes":{
          "summary":"<p>Sets the minutes for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59, representing the seconds. If",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds. If",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setMonth":{
          "summary":"<p>Set the month for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer from 1 to 31, representing the day of the month.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setSeconds":{
          "summary":"<p>Sets the seconds for a specified date according to local time.</p>",
          "code_sample":"<p><code><br />setSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59.",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setTime":{
          "summary":"<p>Sets the Date object to the time represented by a number of milliseconds since<br />January 1, 1970, 00:00:00 UTC.</p>",
          "code_sample":"<p><code><br />setTime(<i>timeValue</i>)<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"timeValue",
              "description":"integer representing the number of milliseconds since 1",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCDate":{
          "summary":"<p>Sets the day of the month for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCDate(<i>dayValue</i>)<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer from 1 to 31, representing the day of the month.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCFullYear":{
          "summary":"<p>Sets the full year for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer between 1 and 31 representing the day of the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCHours":{
          "summary":"<p>Sets the hour for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59, representing the seconds. If",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds. If",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCMilliseconds":{
          "summary":"<p>Sets the milliseconds for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCMilliseconds(<i>millisecondsValue</i>)<br /></code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"millisecondsValue",
              "description":"number between 0 and 999, representing the",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCMinutes":{
          "summary":"<p>Sets the minutes for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59, representing the seconds. If",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds. If",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCMonth":{
          "summary":"<p>Sets the month for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"dayValue",
              "description":"integer from 1 to 31, representing the day of the month.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#setUTCSeconds":{
          "summary":"<p>Sets the seconds for a specified date according to universal time.</p>",
          "code_sample":"<p><code><br />setUTCSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"secondsValue",
              "description":"integer between 0 and 59.",
              "optional":false
            },
            "A":{
              "type":"msValue",
              "description":"number between 0 and 999, representing the milliseconds.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Date#toDateString":{
          "summary":"<p>Returns the date portion of a Date object in human readable form in American<br />English.</p>",
          "code_sample":"<p><code><em>date</em>.toDateString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toJSON":{
          "summary":"<p>Returns a JSON representation of the Date object.</p>",
          "code_sample":"<p><code><em>date</em>.prototype.toJSON()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toLocaleDateString":{
          "summary":"<p>Converts a date to a string, returning the \"date\" portion using the operating<br />system's locale's conventions.</p>",
          "code_sample":"<p><code><br />toLocaleDateString()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toLocaleString":{
          "summary":"<p>Converts a date to a string, using the operating system's locale's conventions.</p>",
          "code_sample":"<p><code><br />toLocaleString()<br /></code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toLocaleTimeString":{
          "summary":"<p>Converts a date to a string, returning the \"time\" portion using the current<br />locale's conventions.</p>",
          "code_sample":"<p><code> toLocaleTimeString() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toString":{
          "summary":"<p>Returns a string representing the specified Date object.</p>",
          "code_sample":"<p><code> toString() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toTimeString":{
          "summary":"<p>Returns the time portion of a Date object in human readable form in American<br />English.</p>",
          "code_sample":"<p><code><em>date</em>.toTimeString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Date#toUTCString":{
          "summary":"<p>Converts a date to a string, using the universal time convention.</p>",
          "code_sample":"<p><code> toUTCString() </code></p>",
          "source":";",
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Debuggable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Drawable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Drawable#":{
      "method_list":[
        "draw",
        "beforeTransform",
        "afterTransform"
      ],
      "methods":{
        "Drawable#draw":{
          "summary":"<p>Triggered every time the object should be drawn. A canvas is passed as<br />the first argument.</p>",
          "code_sample":"<pre><code>player = Core\n  x: 0\n  y: 10\n  width: 5\n  height: 5\n\nplayer.bind \"draw\", (canvas) -&gt;\n  # Text will be drawn positioned relatively to the object.\n  canvas.drawText\n    text: \"Hey, drawing stuff is pretty easy.\"\n    color: \"white\"\n    x: 5\n    y: 5\n</code></pre>",
          "source":null,
          "parameters":{
            "canvas":{
              "type":"PowerCanvas",
              "description":"A reference to the canvas to draw on.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Drawable#beforeTransform":{
          "summary":"<p>Triggered before the object should be drawn. A canvas is passed as<br />the first argument. This does not apply the current transform.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{
            "canvas":{
              "type":"PowerCanvas",
              "description":"A reference to the canvas to draw on.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Drawable#afterTransform":{
          "summary":"<p>Triggered after the object should be drawn. A canvas is passed as<br />the first argument. This applies the current transform.</p>",
          "code_sample":"",
          "source":"var Drawable;\n\nDrawable = function(I, self) {\n  var setSizeCallback, _ref;\n  I || (I = {});\n  Object.reverseMerge(I, {\n    alpha: 1,\n    color: \"#196\",\n    hflip: false,\n    vflip: false,\n    spriteName: null,\n    zIndex: 0\n  });\n  setSizeCallback = function(sprite) {\n    I.width = sprite.width;\n    return I.height = sprite.height;\n  };\n  if ((_ref = I.sprite) != null ? typeof _ref.isString === \"function\" ? _ref.isString() : void 0 : void 0) {\n    if (I.sprite.indexOf(\"data:\") === 0) {\n      I.sprite = Sprite.fromURL(I.sprite, setSizeCallback);\n    } else {\n      I.sprite = Sprite.loadByName(I.sprite, setSizeCallback);\n    }\n  } else if (I.spriteName) {\n    I.sprite = Sprite.loadByName(I.spriteName, setSizeCallback);\n  }\n  self.bind('draw', function(canvas) {\n    var previousAlpha, sprite;\n    if ((I.alpha != null) && I.alpha !== 1) {\n      previousAlpha = canvas.context().globalAlpha;\n      canvas.context().globalAlpha = I.alpha;\n    }\n    if (sprite = I.sprite) {\n      if (sprite.draw != null) {\n        sprite.draw(canvas, -sprite.width / 2, -sprite.height / 2);\n      } else {\n        if (typeof warn === \"function\") warn(\"Sprite has no draw method!\");\n      }\n    } else {\n      if (I.radius != null) {\n        canvas.drawCircle({\n          x: 0,\n          y: 0,\n          radius: I.radius,\n          color: I.color\n        });\n      } else {\n        canvas.drawRect({\n          x: -I.width / 2,\n          y: -I.height / 2,\n          width: I.width,\n          height: I.height,\n          color: I.color\n        });\n      }\n    }\n    if ((I.alpha != null) && I.alpha !== 1) {\n      return canvas.context().globalAlpha = previousAlpha;\n    }\n  });\n  return {",
          "parameters":{
            "canvas":{
              "type":"PowerCanvas",
              "description":"A reference to the canvas to draw on.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Durable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Fadeable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Flickerable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Follow":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Framerate":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Function#":{
      "method_list":[
        "debounce",
        "apply",
        "bind",
        "call",
        "toString"
      ],
      "methods":{
        "Function#debounce":{
          "summary":"<p>Calling a debounced function will postpone its execution until after<br />wait milliseconds have elapsed since the last time the function was<br />invoked. Useful for implementing behavior that should only happen after<br />the input has stopped arriving. For example: rendering a preview of a<br />Markdown comment, recalculating a layout after the window has stopped<br />being resized...</p>",
          "code_sample":"<pre><code>lazyLayout = calculateLayout.debounce(300)\n$(window).resize(lazyLayout)\n</code></pre>",
          "source":"Function.prototype.debounce = function(wait) {\n  var func, timeout;\n  timeout = null;\n  func = this;\n  return function() {\n    var args, context, later;\n    context = this;\n    args = arguments;\n    later = function() {\n      timeout = null;\n      return func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    return timeout = setTimeout(later, wait);\n  };\n};\n\nFunction.prototype.returning = function(x) {\n  var func;\n  func = this;\n  return function() {\n    func.apply(this, arguments);\n    return x;\n  };\n};\n\nFunction.prototype.delay = function() {\n  var args, func, wait;\n  wait = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  func = this;\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n};\n\nFunction.prototype.defer = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.delay.apply(this, [1].concat(args));\n};\n;",
          "parameters":{

          },
          "returns":{
            "type":"Function",
            "description":"The debounced version of this function."
          },
          "see":null
        },
        "Function#apply":{
          "summary":"<p>Calls a function with a given this value and arguments provided as an array.</p>",
          "code_sample":"<p><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></p>",
          "source":null,
          "parameters":{
            "Determines":{
              "type":"thisArg",
              "description":"the value of this inside fun. If thisArg is null or",
              "optional":false
            },
            "An":{
              "type":"argsArray",
              "description":"argument array for the object, specifying the arguments",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Function#bind":{
          "summary":"<p>Creates a new function that, when called, itself calls this function in the<br />context of the provided this value, with a given sequence of arguments preceding<br />any provided when the new function was called.</p>",
          "code_sample":"<p><code><em>fun</em>.bind(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>",
          "source":null,
          "parameters":{
            "arg2,":{
              "type":"thisValuearg1, ",
              "description":"... The value to be passed as the this parameter to",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Function#call":{
          "summary":"<p>Calls a function with a given this value and arguments provided individually.</p>",
          "code_sample":"<p><code><em>fun</em>.call(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>",
          "source":null,
          "parameters":{
            "Determines":{
              "type":"thisArg",
              "description":"the value of this inside fun. If thisArg is null or",
              "optional":false
            },
            "arg2,":{
              "type":"arg1, ",
              "description":"... Arguments for the object.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Function#toString":{
          "summary":"<p>Returns a string representing the source code of the function.</p>",
          "code_sample":"<p><code><em>function</em>.toString(<em>indentation</em>)</code></p>",
          "source":null,
          "parameters":{
            "Non-standard":{
              "type":"indentation",
              "description":"The amount of spaces to indent the string",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "GameObject":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "GameObject#":{
      "method_list":[
        "create",
        "destroy",
        "step",
        "update",
        "remove"
      ],
      "methods":{
        "GameObject#create":{
          "summary":"<p>Triggered when the object is created.</p>",
          "code_sample":"<pre><code>enemyCount = 0\n\nenemy = engine.add\n  class: \"Enemy\"\n\nenemy.bind 'create', -&gt;\n  enemyCount++\n</code></pre>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "GameObject#destroy":{
          "summary":"<p>Triggered when object is destroyed. Use<br />the destroy event to add particle effects, play sounds, etc.</p>",
          "code_sample":"<pre><code>bomb = GameObject()\n\nbomb.bind 'destroy', -&gt;\n  bomb.explode()\n  Sound.play \"Kaboom\"\n</code></pre>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "GameObject#step":{
          "summary":"<p>Triggered during every update step.</p>",
          "code_sample":"<p>player = GameObject()</p>\n\n<pre><code>player.bind 'step', -&gt;\n  # check to see if keys are being pressed and\n  # change the player's velocity\n  if keydown.left\n    player.velocity(Point(-1, 0))\n  else if keydown.right\n    player.velocity(Point(1, 0))\n  else\n    player.velocity(Point(0, 0))\n</code></pre>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "GameObject#update":{
          "summary":"<p>Triggered every update after the <code>step</code> event is triggered.</p>",
          "code_sample":"<pre><code>player = GameObject()\n\n# we can really use the update and\n# step events almost interchangebly\nplayer.bind 'update', -&gt;\n  # check to see if keys are being pressed and\n  # change the player's velocity\n  if keydown.left\n    player.velocity(Point(-1, 0))\n  else if keydown.right\n    player.velocity(Point(1, 0))\n  else\n    player.velocity(Point(0, 0))\n</code></pre>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "GameObject#remove":{
          "summary":"<p>Triggered when the object is removed from<br />the engine. Use the remove event to handle any clean up.</p>",
          "code_sample":"<pre><code>boss = GameObject()\n\nboss.bind 'remove', -&gt;\n  unlockDoorToLevel2()\n</code></pre>",
          "source":"var GameObject;\n\nGameObject = function(I) {\n  var autobindEvents, defaultModules, modules, self;\n  I || (I = {});",
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "GameOver":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "GameOver#":{
      "method_list":[
        "update",
        "overlay"
      ],
      "methods":{
        "GameOver#update":{
          "summary":"<p>Transitions to the title state on user input.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "GameOver#overlay":{
          "summary":"<p>Draws Game Over screen and reset instructions.</p>",
          "code_sample":"",
          "source":"var GameOver;\n\nGameOver = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = TextScreen(I);\n  self.bind('update', function() {\n    if (justPressed.any) {\n      return engine.delay(15, function() {\n        return engine.setState(TitleScreen());\n      });\n    }\n  });\n  self.bind(\"overlay\", function(canvas) {\n    self.centerText(canvas, \"Game Over\");\n    return self.centerText(canvas, \"Press any key to restart\", {\n      size: 12,\n      y: App.height / 2 + 30\n    });\n  });\n  return self;\n};\n;\nvar GameState;\n\nGameState = function(I) {\n  var queuedObjects, self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    objects: []\n  });\n  queuedObjects = [];\n  self = Core(I).extend({",
          "parameters":{
            "canvas":{
              "type":"PixieCanvas",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "LevelState":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "LevelState#":{
      "method_list":[
        "enter"
      ],
      "methods":{
        "LevelState#enter":{
          "summary":"<p>Fades in the current level and loads the map.</p>",
          "code_sample":"",
          "source":"var LevelState;\n\nLevelState = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    duration: 10,\n    level: 'level1'\n  });\n  self = GameState(I);\n  self.bind(\"enter\", function() {\n    engine.fadeIn({\n      duration: I.duration\n    });\n    return engine.loadMap(I.level, function() {\n      return engine.I.transitioning = false;\n    });\n  });\n  return self;\n};\n;",
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Math":{
      "method_list":[
        "uuid"
      ],
      "methods":{
        "Mathuuid":{
          "summary":"<p>Generate a random uuid.</p>",
          "code_sample":"<p><code><pre><br />   // No arguments  - returns RFC4122, version 4 ID<br />   Math.uuid()<br />=> \"92329D39-6F5C-4520-ABFC-AAB64544E172\"</p>\n\n<p>// One argument - returns ID of the specified length<br />   Math.uuid(15)     // 15 character ID (default base=62)<br />=> \"VcydxgltxrVZSTV\"</p>\n\n<p>// Two arguments - returns ID of the specified length, and radix. (Radix must be &lt;= 62)<br />   Math.uuid(8, 2)  // 8 character ID (base=2)<br />=> \"01001010\"</p>\n\n<p>Math.uuid(8, 10) // 8 character ID (base=10)<br />=> \"47473046\"</p>\n\n<p>Math.uuid(8, 16) // 8 character ID (base=16)<br />=> \"098F4D35\"<br /></pre></code></p>",
          "source":"(function() {\n  // Private array of chars to use\n  var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n  Math.uuid = function (len, radix) {\n    var chars = CHARS, uuid = [];\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (var i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      var r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n      uuid[14] = '4';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (var i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join('');\n  };\n\n  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n  // by minimizing calls to random()\n  Math.uuidFast = function() {\n    var chars = CHARS, uuid = new Array(36), rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = '-';\n      } else if (i==14) {\n        uuid[i] = '4';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n    return uuid.join('');\n  };\n\n  // A more compact, but less performant, RFC4122v4 solution:\n  Math.uuidCompact = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    }).toUpperCase();\n  };\n})();;\n;\n;\nvar ActiveBounds;\n\nActiveBounds = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    x: 0,\n    y: 0,\n    width: 8,\n    height: 8,\n    activeBounds: Rectangle(0, 0, App.width, App.height)\n  });\n  return self.bind('update', function() {\n    var _ref, _ref2;\n    if (!((I.activeBounds.left <= (_ref = I.x) && _ref <= I.activeBounds.right))) {\n      self.destroy();\n    }\n    if (!((I.activeBounds.top <= (_ref2 = I.y) && _ref2 <= I.activeBounds.bottom))) {\n      return self.destroy();\n    }\n  });\n};\n;",
          "parameters":{
            "The":{
              "type":"radix",
              "description":"number of allowable values for each character.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Metered":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Movable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Number#":{
      "method_list":[
        "abs",
        "ceil",
        "floor",
        "round",
        "circularPoint",
        "clamp",
        "mod",
        "sign",
        "even",
        "odd",
        "times",
        "snap",
        "primeFactors",
        "toColorPart",
        "approach",
        "approachByRatio",
        "approachRotation",
        "constrainRotation",
        "d",
        "toExponential",
        "toFixed",
        "toLocaleString",
        "toPrecision",
        "toString",
        "valueOf"
      ],
      "methods":{
        "Number#abs":{
          "summary":"<p>Returns the absolute value of this number.</p>",
          "code_sample":"<pre><code>(-4).abs()\n# =&gt; 4\n</code></pre>",
          "source":"Number.prototype.abs = function() {\n  return Math.abs(this);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The absolute value of the number."
          },
          "see":null
        },
        "Number#ceil":{
          "summary":"<p>Returns the mathematical ceiling of this number.</p>",
          "code_sample":"<pre><code>4.9.ceil()\n# =&gt; 5\n\n4.2.ceil()\n# =&gt; 5\n\n(-1.2).ceil()\n# =&gt; -1\n</code></pre>",
          "source":"Number.prototype.ceil = function() {\n  return Math.ceil(this);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The number truncated to the nearest integer of greater than or equal value."
          },
          "see":null
        },
        "Number#floor":{
          "summary":"<p>Returns the mathematical floor of this number.</p>",
          "code_sample":"<pre><code>4.9.floor()\n# =&gt; 4\n\n4.2.floor()\n# =&gt; 4\n\n(-1.2).floor()\n# =&gt; -2\n</code></pre>",
          "source":"Number.prototype.floor = function() {\n  return Math.floor(this);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The number truncated to the nearest integer of less than or equal value."
          },
          "see":null
        },
        "Number#round":{
          "summary":"<p>Returns this number rounded to the nearest integer.</p>",
          "code_sample":"<pre><code>4.5.round()\n# =&gt; 5\n\n4.4.round()\n# =&gt; 4\n</code></pre>",
          "source":"Number.prototype.round = function() {\n  return Math.round(this);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The number rounded to the nearest integer."
          },
          "see":null
        },
        "Number#circularPoint":{
          "summary":"<p>Get a bunch of points equally spaced around the unit circle.</p>",
          "code_sample":"<pre><code>4.circularPoints (p) -&gt;\n\n# p gets Point(1, 0), Point(0, 1), Point(-1, 0), Point(0, -1)\n</code></pre>",
          "source":"Number.prototype.circularPoints = function(block) {\n  var n;\n  n = this;\n  return n.times(function(i) {\n    return block(Point.fromAngle((i / n).turns), i);\n  });\n};",
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Number#clamp":{
          "summary":"<p>Returns a number whose value is limited to the given range.</p>",
          "code_sample":"<pre><code># limit the output of this computation to between 0 and 255\n(2 * 255).clamp(0, 255)\n# =&gt; 255\n</code></pre>",
          "source":"Number.prototype.clamp = function(min, max) {\n  if ((min != null) && (max != null)) {\n    return Math.min(Math.max(this, min), max);\n  } else if (min != null) {\n    return Math.max(this, min);\n  } else if (max != null) {\n    return Math.min(this, max);\n  } else {\n    return this;\n  }\n};",
          "parameters":{
            "min":{
              "type":"Number",
              "description":"The lower boundary of the output range",
              "optional":false
            },
            "max":{
              "type":"Number",
              "description":"The upper boundary of the output range",
              "optional":false
            }
          },
          "returns":{
            "type":"Number",
            "description":"A number in the range [min, max]"
          },
          "see":null
        },
        "Number#mod":{
          "summary":"<p>A mod method useful for array wrapping. The range of the function is<br />constrained to remain in bounds of array indices.</p>",
          "code_sample":"<pre><code>(-1).mod(5)\n# =&gt; 4\n</code></pre>",
          "source":"Number.prototype.mod = function(base) {\n  var result;\n  result = this % base;\n  if (result < 0 && base > 0) result += base;\n  return result;\n};",
          "parameters":{
            "base":{
              "type":"Number",
              "description":"",
              "optional":false
            }
          },
          "returns":{
            "type":"Number",
            "description":"An integer between 0 and (base - 1) if base is positive."
          },
          "see":null
        },
        "Number#sign":{
          "summary":"<p>Get the sign of this number as an integer (1, -1, or 0).</p>",
          "code_sample":"<pre><code>(-5).sign()\n# =&gt; -1\n\n0.sign()\n# =&gt; 0\n\n5.sign()\n# =&gt; 1\n</code></pre>",
          "source":"Number.prototype.sign = function() {\n  if (this > 0) {\n    return 1;\n  } else if (this < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"The sign of this number, 0 if the number is 0."
          },
          "see":null
        },
        "Number#even":{
          "summary":"<p>Returns true if this number is even (evenly divisible by 2).</p>",
          "code_sample":"<pre><code>2.even()\n# =&gt; true\n\n3.even()\n# =&gt; false\n\n0.even()\n# =&gt; true\n</code></pre>",
          "source":"Number.prototype.even = function() {\n  return this % 2 === 0;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Boolean",
            "description":"true if this number is an even integer, false otherwise."
          },
          "see":null
        },
        "Number#odd":{
          "summary":"<p>Returns true if this number is odd (has remainder of 1 when divided by 2).</p>",
          "code_sample":"<pre><code>2.odd()\n# =&gt; false\n\n3.odd()\n# =&gt; true\n\n0.odd()\n# =&gt; false\n</code></pre>",
          "source":"Number.prototype.odd = function() {\n  if (this > 0) {\n    return this % 2 === 1;\n  } else {\n    return this % 2 === -1;\n  }\n};",
          "parameters":{

          },
          "returns":{
            "type":"Boolean",
            "description":"true if this number is an odd integer, false otherwise."
          },
          "see":null
        },
        "Number#times":{
          "summary":"<p>Calls iterator the specified number of times, passing in the number of the<br />current iteration as a parameter: 0 on first call, 1 on the second call, etc.</p>",
          "code_sample":"<pre><code>output = []\n\n5.times (n) -&gt;\n  output.push(n)\n\noutput\n# =&gt; [0, 1, 2, 3, 4]\n</code></pre>",
          "source":"Number.prototype.times = function(iterator, context) {\n  var i;\n  i = -1;\n  while (++i < this) {\n    iterator.call(context, i);\n  }\n  return i;\n};",
          "parameters":{
            "iterator":{
              "type":"Function",
              "description":"The iterator takes a single parameter, the number of the current iteration.",
              "optional":false
            },
            "context":{
              "type":"Object",
              "description":"The optional context parameter specifies an object to treat as `this` in the iterator block.",
              "optional":true
            }
          },
          "returns":{
            "type":"Number",
            "description":"The number of times the iterator was called."
          },
          "see":null
        },
        "Number#snap":{
          "summary":"<p>Returns the the nearest grid resolution less than or equal to the number.</p>",
          "code_sample":"<pre><code>7.snap(8)\n# =&gt; 0\n\n4.snap(8)\n# =&gt; 0\n\n12.snap(8)\n# =&gt; 8\n</code></pre>",
          "source":"Number.prototype.snap = function(resolution) {\n  var n;\n  n = this / resolution;\n  1 / 1;\n  return n.floor() * resolution;\n};",
          "parameters":{
            "resolution":{
              "type":"Number",
              "description":"The grid resolution to snap to.",
              "optional":false
            }
          },
          "returns":{
            "type":"Number",
            "description":"The nearest multiple of resolution lower than the number."
          },
          "see":null
        },
        "Number#primeFactors":{
          "summary":"<p>In number theory, integer factorization or prime factorization is the<br />breaking down of a composite number into smaller non-trivial divisors,<br />which when multiplied together equal the original integer.</p>",
          "code_sample":"<p>Floors the number for purposes of factorization.</p>\n\n<pre><code>60.primeFactors()\n# =&gt; [2, 2, 3, 5]\n\n37.primeFactors()\n# =&gt; [37]\n</code></pre>",
          "source":"Number.prototype.primeFactors = function() {\n  var factors, i, iSquared, n;\n  factors = [];\n  n = Math.floor(this);\n  if (n === 0) return;\n  if (n < 0) {\n    factors.push(-1);\n    n /= -1;\n  }\n  i = 2;\n  iSquared = i * i;\n  while (iSquared < n) {\n    while ((n % i) === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i += 1;\n    iSquared = i * i;\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Array",
            "description":"An array containing the factorization of this number."
          },
          "see":null
        },
        "Number#toColorPart":{
          "summary":"<p>Returns the two character hexidecimal<br />representation of numbers 0 through 255.</p>",
          "code_sample":"<pre><code>255.toColorPart()\n# =&gt; \"ff\"\n\n0.toColorPart()\n# =&gt; \"00\"\n\n200.toColorPart()\n# =&gt; \"c8\"\n</code></pre>",
          "source":"Number.prototype.toColorPart = function() {\n  var s;\n  s = parseInt(this.clamp(0, 255), 10).toString(16);\n  if (s.length === 1) s = '0' + s;\n  return s;\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"Hexidecimal representation of the number"
          },
          "see":null
        },
        "Number#approach":{
          "summary":"<p>Returns a number that is maxDelta closer to target.</p>",
          "code_sample":"<pre><code>255.approach(0, 5)\n# =&gt; 250\n\n5.approach(0, 10)\n# =&gt; 0\n</code></pre>",
          "source":"Number.prototype.approach = function(target, maxDelta) {\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"A number maxDelta toward target"
          },
          "see":null
        },
        "Number#approachByRatio":{
          "summary":"<p>Returns a number that is closer to the target by the ratio.</p>",
          "code_sample":"<pre><code>255.approachByRatio(0, 0.1)\n# =&gt; 229.5\n</code></pre>",
          "source":"Number.prototype.approachByRatio = function(target, ratio) {\n  return this.approach(target, this * ratio);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"A number toward target by the ratio"
          },
          "see":null
        },
        "Number#approachRotation":{
          "summary":"<p>Returns a number that is closer to the target angle by the delta.</p>",
          "code_sample":"<pre><code>Math.PI.approachRotation(0, Math.PI/4)\n# =&gt; 2.356194490192345 # this is (3/4) * Math.PI, which is (1/4) * Math.PI closer to 0 from Math.PI\n</code></pre>",
          "source":"Number.prototype.approachRotation = function(target, maxDelta) {\n  while (target > this + Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < this - Math.PI) {\n    target += Math.TAU;\n  }\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"A number toward the target angle by maxDelta"
          },
          "see":null
        },
        "Number#constrainRotation":{
          "summary":"<p>Constrains a rotation to between -PI and PI.</p>",
          "code_sample":"<pre><code>(9/4 * Math.PI).constrainRotation()\n# =&gt; 0.7853981633974483 # this is (1/4) * Math.PI\n</code></pre>",
          "source":"Number.prototype.constrainRotation = function() {\n  var target;\n  target = this;\n  while (target > Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < -Math.PI) {\n    target += Math.TAU;\n  }\n  return target;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Number",
            "description":"This number constrained between -PI and PI."
          },
          "see":null
        },
        "Number#d":{
          "summary":"<p>The mathematical d operator. Useful for simulating dice rolls.</p>",
          "code_sample":"<pre><code># Simulates rolling 5 6-sided dice\n5.d(6)\n\n# Simulates rolling 3 20-sided dice\n3.d(20)\n</code></pre>",
          "source":"Number.prototype.d = function(sides) {\n  var sum;\n  sum = 0;\n  this.times(function() {\n    return sum += rand(sides) + 1;\n  });\n  return sum;\n};",
          "parameters":{
            "sides":{
              "type":"Number",
              "description":"Number of sides on the simulated die",
              "optional":false
            }
          },
          "returns":{
            "type":"Number",
            "description":"Sum of rolling `this` many `sides`-sided dice"
          },
          "see":null
        },
        "Number#toExponential":{
          "summary":"<p>Returns a string representing the Number object in exponential notation</p>",
          "code_sample":"<p><code><i>number</i>.toExponential( [<em>fractionDigits</em>] )</code></p>",
          "source":null,
          "parameters":{
            "":{
              "type":"fractionDigits",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Number#toFixed":{
          "summary":"<p>Formats a number using fixed-point notation</p>",
          "code_sample":"<p><code><i>number</i>.toFixed( [<em>digits</em>] )</code></p>",
          "source":null,
          "parameters":{
            "The":{
              "type":"digits",
              "description":"number of digits to appear after the decimal point; this",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Number#toLocaleString":{
          "summary":"<p>number.toLocaleString();</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "Number#toPrecision":{
          "summary":"<p>Returns a string representing the Number object to the specified precision.</p>",
          "code_sample":"<p><code><em>number</em>.toPrecision( [ <em>precision</em> ] )</code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"precision",
              "description":"integer specifying the number of significant digits.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Number#toString":{
          "summary":"<p>Returns a string representing the specified Number object</p>",
          "code_sample":"<p><code><i>number</i>.toString( [<em>radix</em>] )</code></p>",
          "source":null,
          "parameters":{
            "":{
              "type":"radix",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "Number#valueOf":{
          "summary":"<p>Returns the primitive value of a Number object.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Object":{
      "method_list":[
        "isArray",
        "isString",
        "reverseMerge",
        "extend",
        "isObject"
      ],
      "methods":{
        "ObjectisArray":{
          "summary":"<p>Checks whether an object is an array.</p>",
          "code_sample":"<pre><code>Object.isArray([1, 2, 4])\n# =&gt; true\n\nObject.isArray({key: \"value\"})\n# =&gt; false\n</code></pre>",
          "source":"var __slice = Array.prototype.slice;\n\nObject.isArray = function(object) {\n  return Object.prototype.toString.call(object) === \"[object Array]\";\n};",
          "parameters":{
            "object":{
              "type":"Object",
              "description":"The object to check for array-ness.",
              "optional":false
            }
          },
          "returns":{
            "type":"Boolean",
            "description":"A boolean expressing whether the object is an instance of Array"
          },
          "see":null
        },
        "ObjectisString":{
          "summary":"<p>Checks whether an object is a string.</p>",
          "code_sample":"<pre><code>Object.isString(\"a string\")\n# =&gt; true\n\nObject.isString([1, 2, 4])\n# =&gt; false\n\nObject.isString({key: \"value\"})\n# =&gt; false\n</code></pre>",
          "source":"Object.isString = function(object) {\n  return Object.prototype.toString.call(object) === \"[object String]\";\n};",
          "parameters":{
            "object":{
              "type":"Object",
              "description":"The object to check for string-ness.",
              "optional":false
            }
          },
          "returns":{
            "type":"Boolean",
            "description":"A boolean expressing whether the object is an instance of String"
          },
          "see":null
        },
        "ObjectreverseMerge":{
          "summary":"<p>Merges properties from objects into target without overiding.<br />First come, first served.</p>",
          "code_sample":"<pre><code>I =\n  a: 1\n  b: 2\n  c: 3\n\nObject.reverseMerge I,\n  c: 6\n  d: 4\n\nI # =&gt; {a: 1, b:2, c:3, d: 4}\n</code></pre>",
          "source":"Object.reverseMerge = function() {\n  var name, object, objects, target, _i, _len;\n  target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  for (_i = 0, _len = objects.length; _i < _len; _i++) {\n    object = objects[_i];\n    for (name in object) {\n      if (!target.hasOwnProperty(name)) target[name] = object[name];\n    }\n  }\n  return target;\n};",
          "parameters":{
            "target":{
              "type":"Object",
              "description":"The object to merge the properties into.",
              "optional":false
            }
          },
          "returns":{
            "type":"Object",
            "description":"target"
          },
          "see":null
        },
        "Objectextend":{
          "summary":"<p>Merges properties from sources into target with overiding.<br />Last in covers earlier properties.</p>",
          "code_sample":"<pre><code>I =\n  a: 1\n  b: 2\n  c: 3\n\nObject.extend I,\n  c: 6\n  d: 4\n\nI # =&gt; {a: 1, b:2, c:6, d: 4}\n</code></pre>",
          "source":"Object.extend = function() {\n  var name, source, sources, target, _i, _len;\n  target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  for (_i = 0, _len = sources.length; _i < _len; _i++) {\n    source = sources[_i];\n    for (name in source) {\n      target[name] = source[name];\n    }\n  }\n  return target;\n};",
          "parameters":{
            "target":{
              "type":"Object",
              "description":"The object to merge the properties into.",
              "optional":false
            }
          },
          "returns":{
            "type":"Object",
            "description":"target"
          },
          "see":null
        },
        "ObjectisObject":{
          "summary":"<p>Helper method that tells you if something is an object.</p>",
          "code_sample":"<pre><code>object = {a: 1}\n\nObject.isObject(object)\n# =&gt; true\n</code></pre>",
          "source":"Object.isObject = function(object) {\n  return Object.prototype.toString.call(object) === '[object Object]';\n};\n;\nvar __slice = Array.prototype.slice;\n\n(function() {",
          "parameters":{
            "object":{
              "type":"Object",
              "description":"Maybe this guy is an object.",
              "optional":false
            }
          },
          "returns":{
            "type":"Boolean",
            "description":"true if this guy is an object."
          },
          "see":null
        }
      }
    }
  },
  {
    "Object#":{
      "method_list":[
        "hasOwnProperty"
      ],
      "methods":{
        "Object#hasOwnProperty":{
          "summary":"<p>Returns a boolean indicating whether the object has the specified property.</p>",
          "code_sample":"<p><code><em>obj</em>.hasOwnProperty(<em>prop</em>)</code></p>",
          "source":null,
          "parameters":{
            "The":{
              "type":"prop",
              "description":"name of the property to test.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Oscillator":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "RegExp#":{
      "method_list":[
        "exec",
        "test",
        "toString"
      ],
      "methods":{
        "RegExp#exec":{
          "summary":"<p>Executes a search for a match in a specified string. Returns a result array, or<br />null.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{
            "The":{
              "type":"str",
              "description":"string against which to match the regular expression.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "RegExp#test":{
          "summary":"<p>Executes the search for a match between a regular expression and a specified<br />string. Returns true or false.</p>",
          "code_sample":"<p><code> <em>regexp</em>.test([<em>str</em>]) </code></p>",
          "source":null,
          "parameters":{
            "The":{
              "type":"str",
              "description":"string against which to match the regular expression.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "RegExp#toString":{
          "summary":"<p>Returns a string representing the specified object.</p>",
          "code_sample":"<p><code><i>regexp</i>.toString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Rotatable":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "Sprite":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "String#":{
      "method_list":[
        "blank",
        "camelize",
        "capitalize",
        "constantize",
        "humanize",
        "isString",
        "parse",
        "startsWith",
        "titleize",
        "underscore",
        "withoutExtension",
        "charAt",
        "charCodeAt",
        "concat",
        "indexOf",
        "lastIndexOf",
        "localeCompare",
        "match",
        "replace",
        "search",
        "slice",
        "split",
        "substr",
        "substring",
        "toLocaleLowerCase",
        "toLocaleUpperCase",
        "toLowerCase",
        "toString",
        "toUpperCase",
        "trim",
        "valueOf"
      ],
      "methods":{
        "String#blank":{
          "summary":"<p>Returns true if this string only contains whitespace characters.</p>",
          "code_sample":"<pre><code>\"\".blank()\n# =&gt; true\n\n\"hello\".blank()\n# =&gt; false\n\n\"   \".blank()\n# =&gt; true\n</code></pre>",
          "source":"String.prototype.blank = function() {\n  return /^\\s*$/.test(this);\n};",
          "parameters":{

          },
          "returns":{
            "type":"Boolean",
            "description":"Whether or not this string is blank."
          },
          "see":null
        },
        "String#camelize":{
          "summary":"<p>Returns a new string that is a camelCase version.</p>",
          "code_sample":"<pre><code>\"camel_case\".camelize()\n\"camel-case\".camelize()\n\"camel case\".camelize()\n\n# =&gt; \"camelCase\"\n</code></pre>",
          "source":"String.prototype.camelize = function() {\n  return this.trim().replace(/(\\-|_|\\s)+(.)?/g, function(match, separator, chr) {\n    if (chr) {\n      return chr.toUpperCase();\n    } else {\n      return '';\n    }\n  });\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string. camelCase version of `this`."
          },
          "see":null
        },
        "String#capitalize":{
          "summary":"<p>Returns a new string with the first letter capitalized and the rest lower cased.</p>",
          "code_sample":"<pre><code>\"capital\".capitalize()\n\"cAPITAL\".capitalize()\n\"cApItAl\".capitalize()\n\"CAPITAL\".capitalize()\n\n# =&gt; \"Capital\"\n</code></pre>",
          "source":"String.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string. Capitalized version of `this`"
          },
          "see":null
        },
        "String#constantize":{
          "summary":"<p>Return the class or constant named in this string.</p>",
          "code_sample":"<pre><code>\"Constant\".constantize()\n# =&gt; Constant\n# notice this isn't a string. Useful for calling methods on class with the same name as `this`.\n</code></pre>",
          "source":"String.prototype.constantize = function() {\n  if (this.match(/[A-Z][A-Za-z0-9]*/)) {\n    eval(\"var that = \" + this);\n    return that;\n  } else {\n    throw \"String#constantize: '\" + this + \"' is not a valid constant name.\";\n  }\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"The class or constant named in this string."
          },
          "see":null
        },
        "String#humanize":{
          "summary":"<p>Returns a new string that is a more human readable version.</p>",
          "code_sample":"<pre><code>\"player_id\".humanize()\n# =&gt; \"Player\"\n\n\"player_ammo\".humanize()\n# =&gt; \"Player ammo\"\n</code></pre>",
          "source":"String.prototype.humanize = function() {\n  return this.replace(/_id$/, \"\").replace(/_/g, \" \").capitalize();\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string. Replaces _id and _ with \"\" and capitalizes the word."
          },
          "see":null
        },
        "String#isString":{
          "summary":"<p>Returns true.</p>",
          "code_sample":"",
          "source":"String.prototype.isString = function() {\n  return true;\n};",
          "parameters":{

          },
          "returns":{
            "type":"Boolean",
            "description":"true"
          },
          "see":null
        },
        "String#parse":{
          "summary":"<p>Parse this string as though it is JSON and return the object it represents. If it<br />is not valid JSON returns the string itself.</p>",
          "code_sample":"<pre><code># this is valid json, so an object is returned\n'{\"a\": 3}'.parse()\n# =&gt; {a: 3}\n\n# double quoting instead isn't valid JSON so a string is returned\n\"{'a': 3}\".parse()\n# =&gt; \"{'a': 3}\"\n</code></pre>",
          "source":"String.prototype.parse = function() {\n  try {\n    return JSON.parse(this.toString());\n  } catch (e) {\n    return this.toString();\n  }\n};",
          "parameters":{

          },
          "returns":{
            "type":"Object",
            "description":"Returns an object from the JSON this string contains. If it is not valid JSON returns the string itself."
          },
          "see":null
        },
        "String#startsWith":{
          "summary":"<p>Returns true if this string starts with the given string.</p>",
          "code_sample":"",
          "source":"String.prototype.startsWith = function(str) {\n  return this.lastIndexOf(str, 0) === 0;\n};",
          "parameters":{
            "str":{
              "type":"String",
              "description":"The string to check.",
              "optional":false
            }
          },
          "returns":{
            "type":"Boolean",
            "description":"True if this string starts with the given string, false otherwise."
          },
          "see":null
        },
        "String#titleize":{
          "summary":"<p>Returns a new string in Title Case.</p>",
          "code_sample":"<pre><code>\"title-case\".titleize()\n# =&gt; \"Title Case\"\n\n\"title case\".titleize()\n# =&gt; \"Title Case\"\n</code></pre>",
          "source":"String.prototype.titleize = function() {\n  return this.split(/[- ]/).map(function(word) {\n    return word.capitalize();\n  }).join(' ');\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string. Title Cased."
          },
          "see":null
        },
        "String#underscore":{
          "summary":"<p>Underscore a word, changing camelCased with under_scored.</p>",
          "code_sample":"<pre><code>\"UNDERScore\".underscore()\n# =&gt; \"under_score\"\n\n\"UNDER-SCORE\".underscore()\n# =&gt; \"under_score\"\n\n\"UnDEr-SCorE\".underscore()\n# =&gt; \"un_d_er_s_cor_e\"\n</code></pre>",
          "source":"String.prototype.underscore = function() {\n  return this.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();\n};",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string. Separated by _."
          },
          "see":null
        },
        "String#withoutExtension":{
          "summary":"<p>Assumes the string is something like a file name and returns the<br />contents of the string without the extension.</p>",
          "code_sample":"<pre><code>\"neat.png\".witouthExtension()\n# =&gt; \"neat\"\n</code></pre>",
          "source":"String.prototype.withoutExtension = function() {\n  return this.replace(/\\.[^\\.]*$/, '');\n};\n\nString.prototype.parseHex = function() {\n  var alpha, hexString, i, rgb;\n  hexString = this.replace(/#/, '');\n  switch (hexString.length) {\n    case 3:\n    case 4:\n      if (hexString.length === 4) {\n        alpha = (parseInt(hexString.substr(3, 1), 16) * 0x11) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(i, 1), 16) * 0x11);\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n    case 6:\n    case 8:\n      if (hexString.length === 8) {\n        alpha = parseInt(hexString.substr(6, 2), 16) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(2 * i, 2), 16));\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n  }\n};\n;",
          "parameters":{

          },
          "returns":{
            "type":"String",
            "description":"A new string without the extension name."
          },
          "see":null
        },
        "String#charAt":{
          "summary":"<p>Returns the specified character from a string.</p>",
          "code_sample":"<p><code><em>string</em>.charAt(<em>index</em>)</code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"index",
              "description":"integer between 0 and 1 less than the length of the string.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#charCodeAt":{
          "summary":"<p>Returns the numeric Unicode value of the character at the given index (except<br />for unicode codepoints > 0x10000).</p>",
          "code_sample":"",
          "source":null,
          "parameters":{
            "An":{
              "type":"index",
              "description":"integer greater than 0 and less than the length of the string;",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#concat":{
          "summary":"<p>Combines the text of two or more strings and returns a new string.</p>",
          "code_sample":"<p><code><em>string</em>.concat(<em>string2</em>, <em>string3</em>[, ..., <em>stringN</em>])</code></p>",
          "source":null,
          "parameters":{
            "Strings":{
              "type":"string2...stringN",
              "description":"to concatenate to this string.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#indexOf":{
          "summary":"<p>Returns the index within the calling String object of the first occurrence of<br />the specified value, starting the search at fromIndex,<br />returns -1 if the value is not found.</p>",
          "code_sample":"<p><code><em>string</em>.indexOf(<em>searchValue</em>[, <em>fromIndex</em>]</code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"searchValue",
              "description":"string representing the value to search for.",
              "optional":false
            },
            "The":{
              "type":"fromIndex",
              "description":"location within the calling string to start the search",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#lastIndexOf":{
          "summary":"<p>Returns the index within the calling String object of the last occurrence of the<br />specified value, or -1 if not found. The calling string is searched backward,<br />starting at fromIndex.</p>",
          "code_sample":"<p><code><em>string</em>.lastIndexOf(<em>searchValue</em>[, <em>fromIndex</em>])</code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"searchValue",
              "description":"string representing the value to search for.",
              "optional":false
            },
            "The":{
              "type":"fromIndex",
              "description":"location within the calling string to start the search",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#localeCompare":{
          "summary":"<p>Returns a number indicating whether a reference string comes before or after or<br />is the same as the given string in sort order.</p>",
          "code_sample":"<p><code> localeCompare(compareString) </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#match":{
          "summary":"<p>Used to retrieve the matches when matching a string against a regular<br />expression.</p>",
          "code_sample":"<p><code><em>string</em>.match(<em>regexp</em>)</code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"regexp",
              "description":"regular expression object. If a non-RegExp object obj is passed,",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#replace":{
          "summary":"<p>Returns a new string with some or all matches of a pattern replaced by a<br />replacement.  The pattern can be a string or a RegExp, and the replacement can<br />be a string or a function to be called for each match.</p>",
          "code_sample":"<p><code><em>str</em>.replace(<em>regexp|substr</em>, <em>newSubStr|function[</em>, </code><code><em>flags]</em>);</code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"function",
              "description":"function to be invoked to create the new substring (to put in",
              "optional":false
            },
            "The":{
              "type":"newSubStr",
              "description":"String that replaces the substring received from parameter",
              "optional":false
            },
            "gimy":{
              "type":"flags",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#search":{
          "summary":"<p>Executes the search for a match between a regular expression and this String<br />object.</p>",
          "code_sample":"<p><code><em>string</em>.search(<em>regexp</em>)</code></p>",
          "source":null,
          "parameters":{
            "A":{
              "type":"regexp",
              "description":"regular expression object. If a non-RegExp object obj is",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#slice":{
          "summary":"<p>Extracts a section of a string and returns a new string.</p>",
          "code_sample":"<p><code><em>string</em>.slice(<em>beginslice</em>[, <em>endSlice</em>])</code></p>",
          "source":null,
          "parameters":{
            "The":{
              "type":"endSlice",
              "description":"zero-based index at which to end extraction. If omitted,",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#split":{
          "summary":"<p>Splits a String object into an array of strings by separating the string into<br />substrings.</p>",
          "code_sample":"<p><code><em>string</em>.split([<em>separator</em>][, <em>limit</em>])</code></p>",
          "source":null,
          "parameters":{
            "Specifies":{
              "type":"separator",
              "description":"the character to use for separating the string. The",
              "optional":false
            },
            "Integer":{
              "type":"limit",
              "description":"specifying a limit on the number of splits to be found.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#substr":{
          "summary":"<p>Returns the characters in a string beginning at the specified location through<br />the specified number of characters.</p>",
          "code_sample":"<p><code><em>string</em>.substr(<em>start</em>[, <em>length</em>])</code></p>",
          "source":null,
          "parameters":{
            "Location":{
              "type":"start",
              "description":"at which to begin extracting characters.",
              "optional":false
            },
            "The":{
              "type":"length",
              "description":"number of characters to extract.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#substring":{
          "summary":"<p>Returns a subset of a string between one index and another, or through the end<br />of the string.</p>",
          "code_sample":"<p><code><em>string</em>.substring(<em>indexA</em>[, <em>indexB</em>])</code></p>",
          "source":null,
          "parameters":{
            "An":{
              "type":"indexA",
              "description":"integer between 0 and one less than the length of the string.",
              "optional":false
            },
            "(optional)":{
              "type":"indexB",
              "description":"An integer between 0 and the length of the string.",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        },
        "String#toLocaleLowerCase":{
          "summary":"<p>Returns the calling string value converted to lower case, according to any<br />locale-specific case mappings.</p>",
          "code_sample":"<p><code> toLocaleLowerCase() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#toLocaleUpperCase":{
          "summary":"<p>Returns the calling string value converted to upper case, according to any<br />locale-specific case mappings.</p>",
          "code_sample":"<p><code> toLocaleUpperCase() </code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#toLowerCase":{
          "summary":"<p>Returns the calling string value converted to lowercase.</p>",
          "code_sample":"<p><code><em>string</em>.toLowerCase()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#toString":{
          "summary":"<p>Returns a string representing the specified object.</p>",
          "code_sample":"<p><code><em>string</em>.toString()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#toUpperCase":{
          "summary":"<p>Returns the calling string value converted to uppercase.</p>",
          "code_sample":"<p><code><em>string</em>.toUpperCase()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#trim":{
          "summary":"<p>Removes whitespace from both ends of the string.</p>",
          "code_sample":"<p><code><em>string</em>.trim()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "String#valueOf":{
          "summary":"<p>Returns the primitive value of a String object.</p>",
          "code_sample":"<p><code><em>string</em>.valueOf()</code></p>",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "TextEffect":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "TextEffect#":{
      "method_list":[
        "update",
        "draw"
      ],
      "methods":{
        "TextEffect#update":{
          "summary":"<p>Updates the position of the text based on the effect velocity. Updates the<br />alpha based on the elapsed time since the effect creation. If <code>rotationalVelocity</code><br />is provided then the text rotation is updated as well.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "TextEffect#draw":{
          "summary":"<p>Draws the <code>textShadow</code> text and the <code>text</code> text.</p>",
          "code_sample":"",
          "source":"var TextEffect;\n\nTextEffect = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    color: Color('green'),\n    duration: 40,\n    font: '20px Helvetica',\n    text: '100',\n    textShadow: Color('black'),\n    alpha: 1,\n    rotation: 0,\n    rotationalVelocity: 0,\n    velocity: Point(0, -1)\n  });\n  self = GameObject(I);\n  self.bind(\"update\", function() {\n    I.rotation += I.rotationalVelocity;\n    I.x += I.velocity.x;\n    I.y += I.velocity.y;\n    return I.alpha = 1 - (I.age / I.duration);\n  });\n  self.unbind(\"draw\");\n  self.bind(\"draw\", function(canvas) {\n    if (!I.color.channels) I.color = Color(I.color);\n    if (!I.textShadow.channels) I.textShadow = Color(I.textShadow);\n    I.color.a = I.alpha;\n    I.textShadow.a = I.alpha;\n    canvas.font(I.font);\n    canvas.drawText({\n      color: I.textShadow,\n      x: 1,\n      y: 1,\n      text: I.text\n    });\n    return canvas.drawText({\n      color: I.color,\n      x: 0,\n      y: 0,\n      text: I.text\n    });\n  });\n  return self;\n};\n;",
          "parameters":{
            "canvas":{
              "type":"PixieCanvas",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "TextScreen":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "TimedEvents":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "TitleScreen":{
      "method_list":null,
      "methods":{

      }
    }
  },
  {
    "TitleScreen#":{
      "method_list":[
        "update",
        "overlay"
      ],
      "methods":{
        "TitleScreen#update":{
          "summary":"<p>Goes to the next level on any user input.</p>",
          "code_sample":"",
          "source":null,
          "parameters":{

          },
          "returns":null,
          "see":null
        },
        "TitleScreen#overlay":{
          "summary":"<p>Overlays the title text in the middle of the screen. Uses <code>App.name</code></p>",
          "code_sample":"",
          "source":"var TitleScreen;\n\nTitleScreen = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = TextScreen(I);\n  self.bind('update', function() {\n    if (justPressed.any) return engine.nextLevel();\n  });\n  self.bind(\"overlay\", function(canvas) {\n    self.centerText(canvas, App.name);\n    return self.centerText(canvas, \"Press any key to start\", {\n      size: 12,\n      y: App.height / 2 + 30\n    });\n  });\n  return self;\n};\n;",
          "parameters":{
            "canvas":{
              "type":"PixieCanvas",
              "description":"",
              "optional":false
            }
          },
          "returns":null,
          "see":null
        }
      }
    }
  },
  {
    "Tween":{
      "method_list":null,
      "methods":{

      }
    }
  }
]