[ { tags: 
     [ { type: [32m'name'[39m, string: [32m'compact'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} A new array that contains only the non-null values.'[39m } ],
    description: 
     { full: [32m'<p>Returns a copy of the array without null and undefined values.</p>\n\n<p><code><pre><br />[null, undefined, 3, 3, undefined, 5].compact()</p>\n\n<h1>=> [3, 3, 5]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a copy of the array without null and undefined values.</p>'[39m,
       body: [32m'<p><code><pre><br />[null, undefined, 3, 3, undefined, 5].compact()</p>\n\n<h1>=> [3, 3, 5]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var _base,\n  __slice = Array.prototype.slice;\n\nArray.prototype.compact = function() {\n  return this.select(function(element) {\n    return element != null;\n  });\n};'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'copy'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} A new array that is a copy of the array'[39m } ],
    description: 
     { full: [32m'<p>Creates and returns a copy of the array. The copy contains<br />the same objects.</p>\n\n<p><code><pre><br />a = ["a", "b", "c"]<br />b = a.copy()</p>\n\n<h1>their elements are equal</h1>\n\n<p>a[0] == b[0] &amp;&amp; a[1] == b[1] &amp;&amp; a[2] == b[2]</p>\n\n<h1>=> true</h1>\n\n<h1>but they aren\'t the same object in memory</h1>\n\n<p>a === b</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Creates and returns a copy of the array. The copy contains<br />the same objects.</p>'[39m,
       body: [32m'<p><code><pre><br />a = ["a", "b", "c"]<br />b = a.copy()</p>\n\n<h1>their elements are equal</h1>\n\n<p>a[0] == b[0] &amp;&amp; a[1] == b[1] &amp;&amp; a[2] == b[2]</p>\n\n<h1>=> true</h1>\n\n<h1>but they aren\'t the same object in memory</h1>\n\n<p>a === b</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.copy = function() {\n  return this.concat();\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'copy'[39m,
       string: [32m'Array.prototype.copy()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'clear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} this, now emptied.'[39m } ],
    description: 
     { full: [32m'<p>Empties the array of its contents. It is modified in place.</p>\n\n<p><code><pre><br />fullArray = [1, 2, 3]<br />fullArray.clear()<br />fullArray</p>\n\n<h1>=> []</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Empties the array of its contents. It is modified in place.</p>'[39m,
       body: [32m'<p><code><pre><br />fullArray = [1, 2, 3]<br />fullArray.clear()<br />fullArray</p>\n\n<h1>=> []</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.clear = function() {\n  this.length = 0;\n  return this;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'clear'[39m,
       string: [32m'Array.prototype.clear()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'flatten'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} A new array with all the sub-arrays flattened to the top.'[39m } ],
    description: 
     { full: [32m'<p>Flatten out an array of arrays into a single array of elements.</p>\n\n<p><code><pre><br />[[1, 2], [3, 4], 5].flatten()</p>\n\n<h1>=> [1, 2, 3, 4, 5]</h1>\n\n<h1>won\'t flatten twice nested arrays. call</h1>\n\n<h1>flatten twice if that is what you want</h1>\n\n<p>[[1, 2], [3, [4, 5]], 6].flatten()</p>\n\n<h1>=> [1, 2, 3, [4, 5], 6]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Flatten out an array of arrays into a single array of elements.</p>'[39m,
       body: [32m'<p><code><pre><br />[[1, 2], [3, 4], 5].flatten()</p>\n\n<h1>=> [1, 2, 3, 4, 5]</h1>\n\n<h1>won\'t flatten twice nested arrays. call</h1>\n\n<h1>flatten twice if that is what you want</h1>\n\n<p>[[1, 2], [3, [4, 5]], 6].flatten()</p>\n\n<h1>=> [1, 2, 3, [4, 5], 6]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.flatten = function() {\n  return this.inject([], function(a, b) {\n    return a.concat(b);\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'flatten'[39m,
       string: [32m'Array.prototype.flatten()'[39m } },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'String'[39m ],
         name: [32m'method'[39m,
         description: [32m'The name of the method to invoke.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'[arg...]'[39m ],
         name: [32m'Optional'[39m,
         description: [32m'arguments to pass to the method being invoked.'[39m },
       { type: [32m'name'[39m, string: [32m'invoke'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} A new array containing the results of invoking the named method on each element.'[39m } ],
    description: 
     { full: [32m'<p>Invoke the named method on each element in the array<br />and return a new array containing the results of the invocation.</p>\n\n<p><code><pre><br />[1.1, 2.2, 3.3, 4.4].invoke("floor")</p>\n\n<h1>=> [1, 2, 3, 4]</h1>\n\n<p>[\'hello\', \'world\', \'cool!\'].invoke(\'substring\', 0, 3)</p>\n\n<h1>=> [\'hel\', \'wor\', \'coo\']</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Invoke the named method on each element in the array<br />and return a new array containing the results of the invocation.</p>'[39m,
       body: [32m'<p><code><pre><br />[1.1, 2.2, 3.3, 4.4].invoke("floor")</p>\n\n<h1>=> [1, 2, 3, 4]</h1>\n\n<p>[\'hello\', \'world\', \'cool!\'].invoke(\'substring\', 0, 3)</p>\n\n<h1>=> [\'hel\', \'wor\', \'coo\']</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.invoke = function() {\n  var args, method;\n  method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  return this.map(function(element) {\n    return element[method].apply(element, args);\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'invoke'[39m,
       string: [32m'Array.prototype.invoke()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'rand'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} A random element from an array'[39m } ],
    description: 
     { full: [32m'<p>Randomly select an element from the array.</p>\n\n<p><code><pre><br />[1, 2, 3].rand()</p>\n\n<h1>=> 2</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Randomly select an element from the array.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3].rand()</p>\n\n<h1>=> 2</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.rand = function() {\n  return this[rand(this.length)];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'rand'[39m,
       string: [32m'Array.prototype.rand()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'remove'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'object'[39m,
         description: [32m'The object to remove from the array if present.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The removed object if present otherwise undefined.'[39m } ],
    description: 
     { full: [32m'<p>Remove the first occurrence of the given object from the array if it is<br />present. The array is modified in place.</p>\n\n<p><code><pre><br />a = [1, 1, "a", "b"]<br />a.remove(1)</p>\n\n<h1>=> 1</h1>\n\n<p>a</p>\n\n<h1>=> [1, "a", "b"]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Remove the first occurrence of the given object from the array if it is<br />present. The array is modified in place.</p>'[39m,
       body: [32m'<p><code><pre><br />a = [1, 1, "a", "b"]<br />a.remove(1)</p>\n\n<h1>=> 1</h1>\n\n<p>a</p>\n\n<h1>=> [1, "a", "b"]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.remove = function(object) {\n  var index;\n  index = this.indexOf(object);\n  if (index >= 0) {\n    return this.splice(index, 1)[0];\n  } else {\n    return;\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'remove'[39m,
       string: [32m'Array.prototype.remove()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'include'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'element'[39m,
         description: [32m'The element to check if present.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} true if the element is in the array, false otherwise.'[39m } ],
    description: 
     { full: [32m'<p>Returns true if the element is present in the array.</p>\n\n<p><code><pre><br />["a", "b", "c"].include("c")</p>\n\n<h1>=> true</h1>\n\n<p>[40, "a"].include(700)</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns true if the element is present in the array.</p>'[39m,
       body: [32m'<p><code><pre><br />["a", "b", "c"].include("c")</p>\n\n<h1>=> true</h1>\n\n<p>[40, "a"].include(700)</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.include = function(element) {\n  return this.indexOf(element) !== -1;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'include'[39m,
       string: [32m'Array.prototype.include()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'each'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'Function to be called once for each element in the array.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} this to enable method chaining.'[39m } ],
    description: 
     { full: [32m'<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument, the index of <br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>\n\n<p><code><pre><br />word = ""<br />indices = []<br />["r", "a", "d"].each (letter, index) -><br />  word += letter<br />  indices.push(index)</p>\n\n<h1>=> ["r", "a", "d"]</h1>\n\n<p>word</p>\n\n<h1>=> "rad"</h1>\n\n<p>indices</p>\n\n<h1>=> [0, 1, 2]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument, the index of <br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>'[39m,
       body: [32m'<p><code><pre><br />word = ""<br />indices = []<br />["r", "a", "d"].each (letter, index) -><br />  word += letter<br />  indices.push(index)</p>\n\n<h1>=> ["r", "a", "d"]</h1>\n\n<p>word</p>\n\n<h1>=> "rad"</h1>\n\n<p>indices</p>\n\n<h1>=> [0, 1, 2]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.each = function(iterator, context) {\n  var element, i, _len;\n  if (this.forEach) {\n    this.forEach(iterator, context);\n  } else {\n    for (i = 0, _len = this.length; i < _len; i++) {\n      element = this[i];\n      iterator.call(context, element, i, this);\n    }\n  }\n  return this;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'each'[39m,
       string: [32m'Array.prototype.each()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'map'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'Function to be called once for each element in the array.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array of the results of the iterator function being called on the original array elements.'[39m } ],
    description: 
     { full: [32m'<p>Call the given iterator once for each element in the array, <br />passing in the element as the first argument, the index of <br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>\n\n<p><code><pre><br />[1, 2, 3].map (number) -><br />  number * number</p>\n\n<h1>=> [1, 4, 9]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Call the given iterator once for each element in the array, <br />passing in the element as the first argument, the index of <br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3].map (number) -><br />  number * number</p>\n\n<h1>=> [1, 4, 9]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'(_base = Array.prototype).map || (_base.map = function(iterator, context) {\n  var element, i, results, _len;\n  results = [];\n  for (i = 0, _len = this.length; i < _len; i++) {\n    element = this[i];\n    results.push(iterator.call(context, element, i, this));\n  }\n  return results;\n});'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'eachPair'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'Function to be called once for each pair of elements in the array.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m } ],
    description: 
     { full: [32m'<p>Call the given iterator once for each pair of objects in the array.</p>\n\n<p><code><pre><br />[1, 2, 3, 4].eachPair (a, b) -><br />  # 1, 2<br />  # 1, 3<br />  # 1, 4<br />  # 2, 3<br />  # 2, 4<br />  # 3, 4<br /></pre></code></p>'[39m,
       summary: [32m'<p>Call the given iterator once for each pair of objects in the array.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3, 4].eachPair (a, b) -><br />  # 1, 2<br />  # 1, 3<br />  # 1, 4<br />  # 2, 3<br />  # 2, 4<br />  # 3, 4<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.eachPair = function(iterator, context) {\n  var a, b, i, j, length, _results;\n  length = this.length;\n  i = 0;\n  _results = [];\n  while (i < length) {\n    a = this[i];\n    j = i + 1;\n    i += 1;\n    _results.push((function() {\n      var _results2;\n      _results2 = [];\n      while (j < length) {\n        b = this[j];\n        j += 1;\n        _results2.push(iterator.call(context, a, b));\n      }\n      return _results2;\n    }).call(this));\n  }\n  return _results;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'eachPair'[39m,
       string: [32m'Array.prototype.eachPair()'[39m } },
  { tags: 
     [ { type: [32m'see'[39m,
         local: [32m'Array#each'[39m,
         visibility: [32m'Array#each'[39m },
       { type: [32m'name'[39m, string: [32m'eachWithObject'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'object'[39m,
         description: [32m'The object to pass to the iterator on each visit.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'Function to be called once for each element in the array.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m, string: [32m'{Array} this'[39m } ],
    description: 
     { full: [32m'<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument and the given object<br />as the second argument. Additional arguments are passed similar to<br /><code>each</code>.</p>'[39m,
       summary: [32m'<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument and the given object<br />as the second argument. Additional arguments are passed similar to<br /><code>each</code>.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.eachWithObject = function(object, iterator, context) {\n  this.each(function(element, i, self) {\n    return iterator.call(context, element, object, i, self);\n  });\n  return object;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'eachWithObject'[39m,
       string: [32m'Array.prototype.eachWithObject()'[39m } },
  { tags: 
     [ { type: [32m'see'[39m,
         local: [32m'Array#each'[39m,
         visibility: [32m'Array#each'[39m },
       { type: [32m'name'[39m, string: [32m'eachSlice'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'n'[39m,
         description: [32m'The number of elements in each group.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'Function to be called once for each group of elements in the array.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m, string: [32m'{Array} this'[39m } ],
    description: 
     { full: [32m'<p>Call the given iterator once for each group of elements in the array,<br />passing in the elements in groups of n. Additional argumens are<br />passed as in each.</p>\n\n<p><code><pre><br />results = []<br />[1, 2, 3, 4].eachSlice 2, (slice) -><br />  results.push(slice)</p>\n\n<h1>=> [1, 2, 3, 4]</h1>\n\n<p>results</p>\n\n<h1>=> [[1, 2], [3, 4]]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Call the given iterator once for each group of elements in the array,<br />passing in the elements in groups of n. Additional argumens are<br />passed as in each.</p>'[39m,
       body: [32m'<p><code><pre><br />results = []<br />[1, 2, 3, 4].eachSlice 2, (slice) -><br />  results.push(slice)</p>\n\n<h1>=> [1, 2, 3, 4]</h1>\n\n<p>results</p>\n\n<h1>=> [[1, 2], [3, 4]]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.eachSlice = function(n, iterator, context) {\n  var i, len;\n  if (n > 0) {\n    len = (this.length / n).floor();\n    i = -1;\n    while (++i < len) {\n      iterator.call(context, this.slice(i * n, (i + 1) * n), i * n, this);\n    }\n  }\n  return this;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'eachSlice'[39m,
       string: [32m'Array.prototype.eachSlice()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'pipeline'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'input'[39m,
         description: [32m'The initial input to pass to the first function in the pipeline.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The result of processing the input by each function in the array.'[39m } ],
    description: 
     { full: [32m'<p>Pipe the input through each function in the array in turn. For example, if you have a<br />list of objects you can perform a series of selection, sorting, and other processing<br />methods and then receive the processed list. This array must contain functions that<br />accept a single input and return the processed input. The output of the first function<br />is fed to the input of the second and so on until the final processed output is returned.</p>'[39m,
       summary: [32m'<p>Pipe the input through each function in the array in turn. For example, if you have a<br />list of objects you can perform a series of selection, sorting, and other processing<br />methods and then receive the processed list. This array must contain functions that<br />accept a single input and return the processed input. The output of the first function<br />is fed to the input of the second and so on until the final processed output is returned.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.pipeline = function(input) {\n  var fn, _i, _len;\n  for (_i = 0, _len = this.length; _i < _len; _i++) {\n    fn = this[_i];\n    input = fn(input);\n  }\n  return input;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'pipeline'[39m,
       string: [32m'Array.prototype.pipeline()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'shuffle'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} A new array that is randomly shuffled.'[39m } ],
    description: 
     { full: [32m'<p>Returns a new array with the elements all shuffled up.</p>\n\n<p><code><pre><br />a = [1, 2, 3]</p>\n\n<p>a.shuffle()</p>\n\n<h1>=> [2, 3, 1]</h1>\n\n<p>a # => [1, 2, 3]<br /></pre></code></p>'[39m,
       summary: [32m'<p>Returns a new array with the elements all shuffled up.</p>'[39m,
       body: [32m'<p><code><pre><br />a = [1, 2, 3]</p>\n\n<p>a.shuffle()</p>\n\n<h1>=> [2, 3, 1]</h1>\n\n<p>a # => [1, 2, 3]<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.shuffle = function() {\n  var shuffledArray;\n  shuffledArray = [];\n  this.each(function(element) {\n    return shuffledArray.splice(rand(shuffledArray.length + 1), 0, element);\n  });\n  return shuffledArray;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'shuffle'[39m,
       string: [32m'Array.prototype.shuffle()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'first'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The first element, or undefined if the array is empty.'[39m } ],
    description: 
     { full: [32m'<p>Returns the first element of the array, undefined if the array is empty.</p>\n\n<p><code><pre><br />["first", "second", "third"].first()</p>\n\n<h1>=> "first"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the first element of the array, undefined if the array is empty.</p>'[39m,
       body: [32m'<p><code><pre><br />["first", "second", "third"].first()</p>\n\n<h1>=> "first"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.first = function() {\n  return this[0];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'first'[39m,
       string: [32m'Array.prototype.first()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'last'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The last element, or undefined if the array is empty.'[39m } ],
    description: 
     { full: [32m'<p>Returns the last element of the array, undefined if the array is empty.</p>\n\n<p><code><pre><br />["first", "second", "third"].last()</p>\n\n<h1>=> "third"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the last element of the array, undefined if the array is empty.</p>'[39m,
       body: [32m'<p><code><pre><br />["first", "second", "third"].last()</p>\n\n<h1>=> "third"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.last = function() {\n  return this[this.length - 1];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'last'[39m,
       string: [32m'Array.prototype.last()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'extremes'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'[fn]'[39m,
         description: [32m'An optional funtion used to evaluate each element to calculate its value for determining extremes.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} {min: minElement, max: maxElement}'[39m } ],
    description: 
     { full: [32m'<p>Returns an object containing the extremes of this array.</p>\n\n<p><code><pre><br />[-1, 3, 0].extremes()</p>\n\n<h1>=> {min: -1, max: 3}</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns an object containing the extremes of this array.</p>'[39m,
       body: [32m'<p><code><pre><br />[-1, 3, 0].extremes()</p>\n\n<h1>=> {min: -1, max: 3}</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.extremes = function(fn) {\n  var max, maxResult, min, minResult;\n  fn || (fn = function(n) {\n    return n;\n  });\n  min = max = void 0;\n  minResult = maxResult = void 0;\n  this.each(function(object) {\n    var result;\n    result = fn(object);\n    if (min != null) {\n      if (result < minResult) {\n        min = object;\n        minResult = result;\n      }\n    } else {\n      min = object;\n      minResult = result;\n    }\n    if (max != null) {\n      if (result > maxResult) {\n        max = object;\n        return maxResult = result;\n      }\n    } else {\n      max = object;\n      return maxResult = result;\n    }\n  });\n  return {\n    min: min,\n    max: max\n  };\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'extremes'[39m,
       string: [32m'Array.prototype.extremes()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'wrap'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'start'[39m,
         description: [32m'The index to start wrapping at, or the index of the sole element to return if no length is given.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'[length]'[39m,
         description: [32m'Optional length determines how long result array should be.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} or {Array} The element at start mod array.length, or an array of length elements, starting from start and wrapping.'[39m } ],
    description: 
     { full: [32m'<p>Pretend the array is a circle and grab a new array containing length elements. <br />If length is not given return the element at start, again assuming the array <br />is a circle.</p>\n\n<p><code><pre><br />[1, 2, 3].wrap(-1)</p>\n\n<h1>=> 3</h1>\n\n<p>[1, 2, 3].wrap(6)</p>\n\n<h1>=> 1</h1>\n\n<p>["l", "o", "o", "p"].wrap(0, 16)</p>\n\n<h1>=> ["l", "o", "o", "p", "l", "o", "o", "p", "l", "o", "o", "p", "l", "o", "o", "p"]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Pretend the array is a circle and grab a new array containing length elements. <br />If length is not given return the element at start, again assuming the array <br />is a circle.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3].wrap(-1)</p>\n\n<h1>=> 3</h1>\n\n<p>[1, 2, 3].wrap(6)</p>\n\n<h1>=> 1</h1>\n\n<p>["l", "o", "o", "p"].wrap(0, 16)</p>\n\n<h1>=> ["l", "o", "o", "p", "l", "o", "o", "p", "l", "o", "o", "p", "l", "o", "o", "p"]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.wrap = function(start, length) {\n  var end, i, result;\n  if (length != null) {\n    end = start + length;\n    i = start;\n    result = [];\n    while (i++ < end) {\n      result.push(this[i.mod(this.length)]);\n    }\n    return result;\n  } else {\n    return this[start.mod(this.length)];\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'wrap'[39m,
       string: [32m'Array.prototype.wrap()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'partition'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array in the form of [trueCollection, falseCollection]'[39m } ],
    description: 
     { full: [32m'<p>Partitions the elements into two groups: those for which the iterator returns<br />true, and those for which it returns false.</p>\n\n<p><code><pre><br />[evens, odds] = [1, 2, 3, 4].partition (n) -><br />  n.even()</p>\n\n<p>evens</p>\n\n<h1>=> [2, 4]</h1>\n\n<p>odds</p>\n\n<h1>=> [1, 3]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Partitions the elements into two groups: those for which the iterator returns<br />true, and those for which it returns false.</p>'[39m,
       body: [32m'<p><code><pre><br />[evens, odds] = [1, 2, 3, 4].partition (n) -><br />  n.even()</p>\n\n<p>evens</p>\n\n<h1>=> [2, 4]</h1>\n\n<p>odds</p>\n\n<h1>=> [1, 3]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.partition = function(iterator, context) {\n  var falseCollection, trueCollection;\n  trueCollection = [];\n  falseCollection = [];\n  this.each(function(element) {\n    if (iterator.call(context, element)) {\n      return trueCollection.push(element);\n    } else {\n      return falseCollection.push(element);\n    }\n  });\n  return [trueCollection, falseCollection];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'partition'[39m,
       string: [32m'Array.prototype.partition()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'select'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'The iterator receives each element in turn as the first agument.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array containing the elements for which the iterator returned true.'[39m } ],
    description: 
     { full: [32m'<p>Return the group of elements for which the return value of the iterator is true.</p>'[39m,
       summary: [32m'<p>Return the group of elements for which the return value of the iterator is true.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.select = function(iterator, context) {\n  return this.partition(iterator, context)[0];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'select'[39m,
       string: [32m'Array.prototype.select()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'without'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Array'[39m ],
         name: [32m'values'[39m,
         description: [32m'List of elements to exclude.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array containing the elements that are not passed in.'[39m } ],
    description: 
     { full: [32m'<p>Return the group of elements that are not in the passed in set.</p>\n\n<p><code><pre><br />[1, 2, 3, 4].without ([2, 3])</p>\n\n<h1>=> [1, 4]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Return the group of elements that are not in the passed in set.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3, 4].without ([2, 3])</p>\n\n<h1>=> [1, 4]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.without = function(values) {\n  return this.reject(function(element) {\n    return values.include(element);\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'without'[39m,
       string: [32m'Array.prototype.without()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'reject'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'The iterator receives each element in turn as the first agument.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'Optional context parameter to be used as `this` when calling the iterator function.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array containing the elements for which the iterator returned false.'[39m } ],
    description: 
     { full: [32m'<p>Return the group of elements for which the return value of the iterator is false.</p>'[39m,
       summary: [32m'<p>Return the group of elements for which the return value of the iterator is false.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.reject = function(iterator, context) {\n  return this.partition(iterator, context)[1];\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'reject'[39m,
       string: [32m'Array.prototype.reject()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'inject'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The result of a'[39m } ],
    description: 
     { full: [32m'<p>Combines all elements of the array by applying a binary operation.<br />for each element in the arra the iterator is passed an accumulator <br />value (memo) and the element.</p>'[39m,
       summary: [32m'<p>Combines all elements of the array by applying a binary operation.<br />for each element in the arra the iterator is passed an accumulator <br />value (memo) and the element.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.inject = function(initial, iterator) {\n  this.each(function(element) {\n    return initial = iterator(initial, element);\n  });\n  return initial;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'inject'[39m,
       string: [32m'Array.prototype.inject()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'sum'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The sum of the elements in the array.'[39m } ],
    description: 
     { full: [32m'<p>Add all the elements in the array.</p>\n\n<p><code><pre><br />[1, 2, 3, 4].sum()</p>\n\n<h1>=> 10</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Add all the elements in the array.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3, 4].sum()</p>\n\n<h1>=> 10</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.sum = function() {\n  return this.inject(0, function(sum, n) {\n    return sum + n;\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'sum'[39m,
       string: [32m'Array.prototype.sum()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'product'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The product of the elements in the array.'[39m } ],
    description: 
     { full: [32m'<p>Multiply all the elements in the array.</p>\n\n<p><code><pre><br />[1, 2, 3, 4].product()</p>\n\n<h1>=> 24</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Multiply all the elements in the array.</p>'[39m,
       body: [32m'<p><code><pre><br />[1, 2, 3, 4].product()</p>\n\n<h1>=> 24</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.product = function() {\n  return this.inject(1, function(product, n) {\n    return product * n;\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'product'[39m,
       string: [32m'Array.prototype.product()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'zip'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} Array groupings whose values are arranged by their positions in the original input arrays.'[39m } ],
    description: 
     { full: [32m'<p>Merges together the values of each of the arrays with the values at the corresponding position.</p>\n\n<p><code><pre><br />[\'a\', \'b\', \'c\'].zip([1, 2, 3])</p>\n\n<h1>=> [[\'a\', 1], [\'b\', 2], [\'c\', 3]]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Merges together the values of each of the arrays with the values at the corresponding position.</p>'[39m,
       body: [32m'<p><code><pre><br />[\'a\', \'b\', \'c\'].zip([1, 2, 3])</p>\n\n<h1>=> [[\'a\', 1], [\'b\', 2], [\'c\', 3]]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Array.prototype.zip = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.map(function(element, index) {\n    var output;\n    output = args.map(function(arr) {\n      return arr[index];\n    });\n    output.unshift(element);\n    return output;\n  });\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Array'[39m,
       name: [32m'zip'[39m,
       string: [32m'Array.prototype.zip()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Bindable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Bindable module.</p>\n\n<p><code><pre><br />player = Core<br />  x: 5<br />  y: 10</p>\n\n<p>player.bind "update", -><br />  updatePlayer()</p>\n\n<h1>=> Uncaught TypeError: Object has no method \'bind\'</h1>\n\n<p>player.include(Bindable)</p>\n\n<p>player.bind "update", -><br />  updatePlayer()</p>\n\n<h1>=> this will call updatePlayer each time through the main loop</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Bindable module.</p>'[39m,
       body: [32m'<p><code><pre><br />player = Core<br />  x: 5<br />  y: 10</p>\n\n<p>player.bind "update", -><br />  updatePlayer()</p>\n\n<h1>=> Uncaught TypeError: Object has no method \'bind\'</h1>\n\n<p>player.include(Bindable)</p>\n\n<p>player.bind "update", -><br />  updatePlayer()</p>\n\n<h1>=> this will call updatePlayer each time through the main loop</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Bindable,\n  __slice = Array.prototype.slice;\n\nBindable = function() {\n  var eventCallbacks;\n  eventCallbacks = {};\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The bind method adds a function as an event listener.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# this will call coolEventHandler after\n# yourObject.trigger "someCustomEvent" is called.\nyourObject.bind "someCustomEvent", coolEventHandler\n\n#or\nyourObject.bind "anotherCustomEvent", -&gt;\n  doSomething()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name bind\n@methodOf Bindable#\n@param {String} event The event to listen to.\n@param {Function} callback The function to be called when the specified event\nis triggered.\n</code></pre>'[39m,
       summary: [32m'<p>The bind method adds a function as an event listener.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# this will call coolEventHandler after\n# yourObject.trigger "someCustomEvent" is called.\nyourObject.bind "someCustomEvent", coolEventHandler\n\n#or\nyourObject.bind "anotherCustomEvent", -&gt;\n  doSomething()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name bind\n@methodOf Bindable#\n@param {String} event The event to listen to.\n@param {Function} callback The function to be called when the specified event\nis triggered.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'bind: function(event, callback) {\n      eventCallbacks[event] = eventCallbacks[event] || [];\n      return eventCallbacks[event].push(callback);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The unbind method removes a specific event listener, or all event listeners if<br />    no specific listener is given.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n#  removes the handler coolEventHandler from the event\n# "someCustomEvent" while leaving the other events intact.\nyourObject.unbind "someCustomEvent", coolEventHandler\n\n# removes all handlers attached to "anotherCustomEvent" \nyourObject.unbind "anotherCustomEvent"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name unbind\n@methodOf Bindable#\n@param {String} event The event to remove the listener from.\n@param {Function} [callback] The listener to remove.\n</code></pre>'[39m,
       summary: [32m'<p>The unbind method removes a specific event listener, or all event listeners if<br />    no specific listener is given.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n#  removes the handler coolEventHandler from the event\n# "someCustomEvent" while leaving the other events intact.\nyourObject.unbind "someCustomEvent", coolEventHandler\n\n# removes all handlers attached to "anotherCustomEvent" \nyourObject.unbind "anotherCustomEvent"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name unbind\n@methodOf Bindable#\n@param {String} event The event to remove the listener from.\n@param {Function} [callback] The listener to remove.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'unbind: function(event, callback) {\n      eventCallbacks[event] = eventCallbacks[event] || [];\n      if (callback) {\n        return eventCallbacks[event].remove(callback);\n      } else {\n        return eventCallbacks[event] = [];\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The trigger method calls all listeners attached to the specified event.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# calls each event handler bound to "someCustomEvent"\nyourObject.trigger "someCustomEvent"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name trigger\n@methodOf Bindable#\n@param {String} event The event to trigger.\n@param {Array} [parameters] Additional parameters to pass to the event listener.\n</code></pre>'[39m,
       summary: [32m'<p>The trigger method calls all listeners attached to the specified event.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# calls each event handler bound to "someCustomEvent"\nyourObject.trigger "someCustomEvent"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name trigger\n@methodOf Bindable#\n@param {String} event The event to trigger.\n@param {Array} [parameters] Additional parameters to pass to the event listener.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'trigger: function() {\n      var callbacks, event, parameters, self;\n      event = arguments[0], parameters = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      callbacks = eventCallbacks[event];\n      if (callbacks && callbacks.length) {\n        self = this;\n        return callbacks.each(function(callback) {\n          return callback.apply(self, parameters);\n        });\n      }\n    }\n  };\n};\n\n(typeof exports !== "undefined" && exports !== null ? exports : this)["Bindable"] = Bindable;\n;\nvar CommandStack;\n\nCommandStack = function() {\n  var index, stack;\n  stack = [];\n  index = 0;\n  return {\n    execute: function(command) {\n      stack[index] = command;\n      command.execute();\n      return stack.length = index += 1;\n    },\n    undo: function() {\n      var command;\n      if (this.canUndo()) {\n        index -= 1;\n        command = stack[index];\n        command.undo();\n        return command;\n      }\n    },\n    redo: function() {\n      var command;\n      if (this.canRedo()) {\n        command = stack[index];\n        command.execute();\n        index += 1;\n        return command;\n      }\n    },\n    canUndo: function() {\n      return index > 0;\n    },\n    canRedo: function() {\n      return stack[index] != null;\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Core'[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m } ],
    description: 
     { full: [32m'<p>The Core class is used to add extended functionality to objects without<br />extending the object class directly. Inherit from Core to gain its utility<br />methods.</p>'[39m,
       summary: [32m'<p>The Core class is used to add extended functionality to objects without<br />extending the object class directly. Inherit from Core to gain its utility<br />methods.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Core,\n  __slice = Array.prototype.slice;\n\nCore = function(I) {\n  var self;\n  if (I == null) I = {};\n  return self = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>External access to instance variables. Use of this property should be avoided<br />    in general, but can come in handy from time to time.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nI =\n  r: 255\n  g: 0\n  b: 100\n\nmyObject = Core(I)\n\n# a bad idea most of the time, but it\'s \n# pretty convenient to have available.\nmyObject.I.r\n# =&gt; 255\n\nmyObject.I.g\n# =&gt; 0\n\nmyObject.I.b\n# =&gt; 100\n&lt;/pre&gt;&lt;/code&gt;\n\n@name I\n@fieldOf Core#\n</code></pre>'[39m,
       summary: [32m'<p>External access to instance variables. Use of this property should be avoided<br />    in general, but can come in handy from time to time.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nI =\n  r: 255\n  g: 0\n  b: 100\n\nmyObject = Core(I)\n\n# a bad idea most of the time, but it\'s \n# pretty convenient to have available.\nmyObject.I.r\n# =&gt; 255\n\nmyObject.I.g\n# =&gt; 0\n\nmyObject.I.b\n# =&gt; 100\n&lt;/pre&gt;&lt;/code&gt;\n\n@name I\n@fieldOf Core#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'I: I,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Generates a public jQuery style getter / setter method for each <br />    String argument.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core\n  r: 255\n  g: 0\n  b: 100\n\nmyObject.attrAccessor "r", "g", "b"\n\nmyObject.r(254)\nmyObject.r()\n\n=&gt; 254\n&lt;/pre&gt;&lt;/code&gt;\n\n@name attrAccessor\n@methodOf Core#\n</code></pre>'[39m,
       summary: [32m'<p>Generates a public jQuery style getter / setter method for each <br />    String argument.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core\n  r: 255\n  g: 0\n  b: 100\n\nmyObject.attrAccessor "r", "g", "b"\n\nmyObject.r(254)\nmyObject.r()\n\n=&gt; 254\n&lt;/pre&gt;&lt;/code&gt;\n\n@name attrAccessor\n@methodOf Core#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'attrAccessor: function() {\n      var attrNames;\n      attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrNames.each(function(attrName) {\n        return self[attrName] = function(newValue) {\n          if (newValue != null) {\n            I[attrName] = newValue;\n            return self;\n          } else {\n            return I[attrName];\n          }\n        };\n      });\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Generates a public jQuery style getter method for each String argument.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core\n  r: 255\n  g: 0\n  b: 100\n\nmyObject.attrReader "r", "g", "b"\n\nmyObject.r()\n=&gt; 255\n\nmyObject.g()\n=&gt; 0\n\nmyObject.b()\n=&gt; 100\n&lt;/pre&gt;&lt;/code&gt;\n\n@name attrReader\n@methodOf Core#\n</code></pre>'[39m,
       summary: [32m'<p>Generates a public jQuery style getter method for each String argument.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core\n  r: 255\n  g: 0\n  b: 100\n\nmyObject.attrReader "r", "g", "b"\n\nmyObject.r()\n=&gt; 255\n\nmyObject.g()\n=&gt; 0\n\nmyObject.b()\n=&gt; 100\n&lt;/pre&gt;&lt;/code&gt;\n\n@name attrReader\n@methodOf Core#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'attrReader: function() {\n      var attrNames;\n      attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrNames.each(function(attrName) {\n        return self[attrName] = function() {\n          return I[attrName];\n        };\n      });\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Extends this object with methods from the passed in object. A shortcut for<br />    <code>Object.extend(self, methods)</code></p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nI =\n  x: 30\n  y: 40\n  maxSpeed: 5\n\n# we are using extend to give player\n# additional methods that Core doesn\'t have\nplayer = Core(I).extend\n  increaseSpeed: -&gt;\n    I.maxSpeed += 1\n\nplayer.I.maxSpeed\n=&gt; 5\n\nplayer.increaseSpeed()\n\nplayer.I.maxSpeed\n=&gt; 6\n&lt;/pre&gt;&lt;/code&gt;\n\n@name extend\n@methodOf Core#\n@see Object.extend\n@returns self\n</code></pre>'[39m,
       summary: [32m'<p>Extends this object with methods from the passed in object. A shortcut for<br />    <code>Object.extend(self, methods)</code></p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nI =\n  x: 30\n  y: 40\n  maxSpeed: 5\n\n# we are using extend to give player\n# additional methods that Core doesn\'t have\nplayer = Core(I).extend\n  increaseSpeed: -&gt;\n    I.maxSpeed += 1\n\nplayer.I.maxSpeed\n=&gt; 5\n\nplayer.increaseSpeed()\n\nplayer.I.maxSpeed\n=&gt; 6\n&lt;/pre&gt;&lt;/code&gt;\n\n@name extend\n@methodOf Core#\n@see Object.extend\n@returns self\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'extend: function(options) {\n      Object.extend(self, options);\n      return self;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Includes a module in this object.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core()\nmyObject.include(Bindable)\n\n# now you can bind handlers to functions\nmyObject.bind "someEvent", -&gt;\n  alert("wow. that was easy.")\n&lt;/pre&gt;&lt;/code&gt;\n\n@name include\n@methodOf Core#\n@param {Module} Module the module to include. A module is a constructor that takes two parameters, I and self, and returns an object containing the public methods to extend the including object with.\n</code></pre>'[39m,
       summary: [32m'<p>Includes a module in this object.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nmyObject = Core()\nmyObject.include(Bindable)\n\n# now you can bind handlers to functions\nmyObject.bind "someEvent", -&gt;\n  alert("wow. that was easy.")\n&lt;/pre&gt;&lt;/code&gt;\n\n@name include\n@methodOf Core#\n@param {Module} Module the module to include. A module is a constructor that takes two parameters, I and self, and returns an object containing the public methods to extend the including object with.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'include: function(Module) {\n      return self.extend(Module(I, self));\n    }\n  };\n};\n;\nvar __slice = Array.prototype.slice;\n\nFunction.prototype.withBefore = function(interception) {\n  var method;\n  method = this;\n  return function() {\n    interception.apply(this, arguments);\n    return method.apply(this, arguments);\n  };\n};\n\nFunction.prototype.withAfter = function(interception) {\n  var method;\n  method = this;\n  return function() {\n    var result;\n    result = method.apply(this, arguments);\n    interception.apply(this, arguments);\n    return result;\n  };\n};'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'debounce'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Function} The debounced version of this function.'[39m } ],
    description: 
     { full: [32m'<p>Calling a debounced function will postpone its execution until after <br />wait milliseconds have elapsed since the last time the function was <br />invoked. Useful for implementing behavior that should only happen after <br />the input has stopped arriving. For example: rendering a preview of a <br />Markdown comment, recalculating a layout after the window has stopped <br />being resized...</p>\n\n<p><code><pre><br />lazyLayout = calculateLayout.debounce(300)<br />$(window).resize(lazyLayout)<br /></pre></code></p>'[39m,
       summary: [32m'<p>Calling a debounced function will postpone its execution until after <br />wait milliseconds have elapsed since the last time the function was <br />invoked. Useful for implementing behavior that should only happen after <br />the input has stopped arriving. For example: rendering a preview of a <br />Markdown comment, recalculating a layout after the window has stopped <br />being resized...</p>'[39m,
       body: [32m'<p><code><pre><br />lazyLayout = calculateLayout.debounce(300)<br />$(window).resize(lazyLayout)<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Function.prototype.debounce = function(wait) {\n  var func, timeout;\n  timeout = null;\n  func = this;\n  return function() {\n    var args, context, later;\n    context = this;\n    args = arguments;\n    later = function() {\n      timeout = null;\n      return func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    return timeout = setTimeout(later, wait);\n  };\n};\n\nFunction.prototype.returning = function(x) {\n  var func;\n  func = this;\n  return function() {\n    func.apply(this, arguments);\n    return x;\n  };\n};\n\nFunction.prototype.delay = function() {\n  var args, func, wait;\n  wait = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  func = this;\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n};\n\nFunction.prototype.defer = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.delay.apply(this, [1].concat(args));\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Function'[39m,
       name: [32m'debounce'[39m,
       string: [32m'Function.prototype.debounce()'[39m } },
  { tags: 
     [ { type: [32m'namespace'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'Gives'[39m,
         string: [32m'you some convenience methods for outputting data while developing. '[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'<code><pre>'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m'log "Testing123"'[39m },
       { type: [32m''[39m,
         string: [32m'info "Hey, this is happening"'[39m },
       { type: [32m''[39m,
         string: [32m'warn "Be careful, this might be a problem"'[39m },
       { type: [32m''[39m, string: [32m'error "Kaboom!"'[39m },
       { type: [32m'</pre></code>'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>@name Logging</p>'[39m,
       summary: [32m'<p>@name Logging</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'["log", "info", "warn", "error"].each(function(name) {\n  if (typeof console !== "undefined") {\n    return (typeof exports !== "undefined" && exports !== null ? exports : this)[name] = function(message) {\n      if (console[name]) return console[name](message);\n    };\n  } else {\n    return (typeof exports !== "undefined" && exports !== null ? exports : this)[name] = function() {};\n  }\n});\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Matrix.js v1.3.0pre</p>\n\n<p>Copyright (c) 2010 STRd6</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy<br />of this software and associated documentation files (the "Software"), to deal<br />in the Software without restriction, including without limitation the rights<br />to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br />copies of the Software, and to permit persons to whom the Software is<br />furnished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in<br />all copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br />IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br />FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br />AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br />LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br />OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br />THE SOFTWARE.</p>\n\n<h2>Loosely based on flash</h2>\n\n<p><a href=\'http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/flash/geom/Matrix.html\'>http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/flash/geom/Matrix.html</a></p>'[39m,
       summary: [32m'<p>Matrix.js v1.3.0pre</p>'[39m,
       body: [32m'<p>Copyright (c) 2010 STRd6</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy<br />of this software and associated documentation files (the "Software"), to deal<br />in the Software without restriction, including without limitation the rights<br />to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br />copies of the Software, and to permit persons to whom the Software is<br />furnished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in<br />all copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br />IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br />FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br />AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br />LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br />OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<br />THE SOFTWARE.</p>\n\n<h2>Loosely based on flash</h2>\n\n<p><a href=\'http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/flash/geom/Matrix.html\'>http://www.adobe.com/livedocs/flash/9.0/ActionScriptLangRefV3/flash/geom/Matrix.html</a></p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'(function() {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<pre>\n     _        _\n    | a  c tx  |\n    | b  d ty  |\n    |_0  0  1 _|\n  </pre>\n\n<p>Creates a matrix for 2d affine transformations.</p>\n\n<p>concat, inverse, rotate, scale and translate return new matrices with the<br />  transformations applied. The matrix is not modified in place.</p>\n\n<p>Returns the identity matrix when called with no arguments.</p>\n\n<p>@name Matrix<br />  @param {Number} [a]<br />  @param {Number} [b]<br />  @param {Number} [c]<br />  @param {Number} [d]<br />  @param {Number} [tx]<br />  @param {Number} [ty]<br />  @constructor</p>'[39m,
       summary: [32m'<pre>\n     _        _\n    | a  c tx  |\n    | b  d ty  |\n    |_0  0  1 _|\n  </pre>\n\n<p>Creates a matrix for 2d affine transformations.</p>'[39m,
       body: [32m'<p>concat, inverse, rotate, scale and translate return new matrices with the<br />  transformations applied. The matrix is not modified in place.</p>\n\n<p>Returns the identity matrix when called with no arguments.</p>\n\n<p>@name Matrix<br />  @param {Number} [a]<br />  @param {Number} [b]<br />  @param {Number} [c]<br />  @param {Number} [d]<br />  @param {Number} [tx]<br />  @param {Number} [ty]<br />  @constructor</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var Matrix;\n  Matrix = function(a, b, c, d, tx, ty) {\n    return {\n      __proto__: Matrix.prototype,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name a<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name a<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'a: a != null ? a : 1,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name b<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name b<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'b: b || 0,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name c<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name c<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'c: c || 0,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name d<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name d<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'd: d != null ? d : 1,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name tx<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name tx<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'tx: tx || 0,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name ty<br />      @fieldOf Matrix#</p>'[39m,
       summary: [32m'<p>@name ty<br />      @fieldOf Matrix#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'ty: ty || 0\n    };\n  };\n  Matrix.prototype = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the result of this matrix multiplied by another matrix<br />    combining the geometric effects of the two. In mathematical terms, <br />    concatenating two matrixes is the same as combining them using matrix multiplication.<br />    If this matrix is A and the matrix passed in is B, the resulting matrix is A x B<br />    <a href=\'http://mathworld.wolfram.com/MatrixMultiplication.html\'>http://mathworld.wolfram.com/MatrixMultiplication.html</a><br />    @name concat<br />    @methodOf Matrix#<br />    @param {Matrix} matrix The matrix to multiply this matrix by.<br />    @returns {Matrix} The result of the matrix multiplication, a new matrix.</p>'[39m,
       summary: [32m'<p>Returns the result of this matrix multiplied by another matrix<br />    combining the geometric effects of the two. In mathematical terms, <br />    concatenating two matrixes is the same as combining them using matrix multiplication.<br />    If this matrix is A and the matrix passed in is B, the resulting matrix is A x B<br />    <a href=\'http://mathworld.wolfram.com/MatrixMultiplication.html\'>http://mathworld.wolfram.com/MatrixMultiplication.html</a><br />    @name concat<br />    @methodOf Matrix#<br />    @param {Matrix} matrix The matrix to multiply this matrix by.<br />    @returns {Matrix} The result of the matrix multiplication, a new matrix.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'concat: function(matrix) {\n      return Matrix(this.a * matrix.a + this.c * matrix.b, this.b * matrix.a + this.d * matrix.b, this.a * matrix.c + this.c * matrix.d, this.b * matrix.c + this.d * matrix.d, this.a * matrix.tx + this.c * matrix.ty + this.tx, this.b * matrix.tx + this.d * matrix.ty + this.ty);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Copy this matrix.<br />    @name copy<br />    @methodOf Matrix#<br />    @returns {Matrix} A copy of this matrix.</p>'[39m,
       summary: [32m'<p>Copy this matrix.<br />    @name copy<br />    @methodOf Matrix#<br />    @returns {Matrix} A copy of this matrix.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'copy: function() {\n      return Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Given a point in the pretransform coordinate space, returns the coordinates of <br />    that point after the transformation occurs. Unlike the standard transformation <br />    applied using the transformPoint() method, the deltaTransformPoint() method <br />    does not consider the translation parameters tx and ty.<br />    @name deltaTransformPoint<br />    @methodOf Matrix#<br />    @see #transformPoint<br />    @return {Point} A new point transformed by this matrix ignoring tx and ty.</p>'[39m,
       summary: [32m'<p>Given a point in the pretransform coordinate space, returns the coordinates of <br />    that point after the transformation occurs. Unlike the standard transformation <br />    applied using the transformPoint() method, the deltaTransformPoint() method <br />    does not consider the translation parameters tx and ty.<br />    @name deltaTransformPoint<br />    @methodOf Matrix#<br />    @see #transformPoint<br />    @return {Point} A new point transformed by this matrix ignoring tx and ty.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'deltaTransformPoint: function(point) {\n      return Point(this.a * point.x + this.c * point.y, this.b * point.x + this.d * point.y);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the inverse of the matrix.<br />    <a href=\'http://mathworld.wolfram.com/MatrixInverse.html\'>http://mathworld.wolfram.com/MatrixInverse.html</a><br />    @name inverse<br />    @methodOf Matrix#<br />    @returns {Matrix} A new matrix that is the inverse of this matrix.</p>'[39m,
       summary: [32m'<p>Returns the inverse of the matrix.<br />    <a href=\'http://mathworld.wolfram.com/MatrixInverse.html\'>http://mathworld.wolfram.com/MatrixInverse.html</a><br />    @name inverse<br />    @methodOf Matrix#<br />    @returns {Matrix} A new matrix that is the inverse of this matrix.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'inverse: function() {\n      var determinant;\n      determinant = this.a * this.d - this.b * this.c;\n      return Matrix(this.d / determinant, -this.b / determinant, -this.c / determinant, this.a / determinant, (this.c * this.ty - this.d * this.tx) / determinant, (this.b * this.tx - this.a * this.ty) / determinant);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a new matrix that corresponds this matrix multiplied by a<br />    a rotation matrix.<br />    @name rotate<br />    @methodOf Matrix#<br />    @see Matrix.rotation<br />    @param {Number} theta Amount to rotate in radians.<br />    @param {Point} [aboutPoint] The point about which this rotation occurs. Defaults to (0,0).<br />    @returns {Matrix} A new matrix, rotated by the specified amount.</p>'[39m,
       summary: [32m'<p>Returns a new matrix that corresponds this matrix multiplied by a<br />    a rotation matrix.<br />    @name rotate<br />    @methodOf Matrix#<br />    @see Matrix.rotation<br />    @param {Number} theta Amount to rotate in radians.<br />    @param {Point} [aboutPoint] The point about which this rotation occurs. Defaults to (0,0).<br />    @returns {Matrix} A new matrix, rotated by the specified amount.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'rotate: function(theta, aboutPoint) {\n      return this.concat(Matrix.rotation(theta, aboutPoint));\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a new matrix that corresponds this matrix multiplied by a<br />    a scaling matrix.<br />    @name scale<br />    @methodOf Matrix#<br />    @see Matrix.scale<br />    @param {Number} sx<br />    @param {Number} [sy]<br />    @param {Point} [aboutPoint] The point that remains fixed during the scaling<br />    @returns {Matrix} A new Matrix. The original multiplied by a scaling matrix.</p>'[39m,
       summary: [32m'<p>Returns a new matrix that corresponds this matrix multiplied by a<br />    a scaling matrix.<br />    @name scale<br />    @methodOf Matrix#<br />    @see Matrix.scale<br />    @param {Number} sx<br />    @param {Number} [sy]<br />    @param {Point} [aboutPoint] The point that remains fixed during the scaling<br />    @returns {Matrix} A new Matrix. The original multiplied by a scaling matrix.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'scale: function(sx, sy, aboutPoint) {\n      return this.concat(Matrix.scale(sx, sy, aboutPoint));\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a string representation of this matrix.</p>\n\n<pre><code>@name toString\n@methodOf Matrix#\n@returns {String} A string reperesentation of this matrix.\n</code></pre>'[39m,
       summary: [32m'<p>Returns a string representation of this matrix.</p>'[39m,
       body: [32m'<pre><code>@name toString\n@methodOf Matrix#\n@returns {String} A string reperesentation of this matrix.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'toString: function() {\n      return "Matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the result of applying the geometric transformation represented by the <br />    Matrix object to the specified point.<br />    @name transformPoint<br />    @methodOf Matrix#<br />    @see #deltaTransformPoint<br />    @returns {Point} A new point with the transformation applied.</p>'[39m,
       summary: [32m'<p>Returns the result of applying the geometric transformation represented by the <br />    Matrix object to the specified point.<br />    @name transformPoint<br />    @methodOf Matrix#<br />    @see #deltaTransformPoint<br />    @returns {Point} A new point with the transformation applied.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'transformPoint: function(point) {\n      return Point(this.a * point.x + this.c * point.y + this.tx, this.b * point.x + this.d * point.y + this.ty);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Translates the matrix along the x and y axes, as specified by the tx and ty parameters.<br />    @name translate<br />    @methodOf Matrix#<br />    @see Matrix.translation<br />    @param {Number} tx The translation along the x axis.<br />    @param {Number} ty The translation along the y axis.<br />    @returns {Matrix} A new matrix with the translation applied.</p>'[39m,
       summary: [32m'<p>Translates the matrix along the x and y axes, as specified by the tx and ty parameters.<br />    @name translate<br />    @methodOf Matrix#<br />    @see Matrix.translation<br />    @param {Number} tx The translation along the x axis.<br />    @param {Number} ty The translation along the y axis.<br />    @returns {Matrix} A new matrix with the translation applied.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'translate: function(tx, ty) {\n      return this.concat(Matrix.translation(tx, ty));\n    }\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Creates a matrix transformation that corresponds to the given rotation,<br />  around (0,0) or the specified point.<br />  @see Matrix#rotate<br />  @param {Number} theta Rotation in radians.<br />  @param {Point} [aboutPoint] The point about which this rotation occurs. Defaults to (0,0).<br />  @returns {Matrix} A new matrix rotated by the given amount.</p>'[39m,
       summary: [32m'<p>Creates a matrix transformation that corresponds to the given rotation,<br />  around (0,0) or the specified point.<br />  @see Matrix#rotate<br />  @param {Number} theta Rotation in radians.<br />  @param {Point} [aboutPoint] The point about which this rotation occurs. Defaults to (0,0).<br />  @returns {Matrix} A new matrix rotated by the given amount.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.rotate = Matrix.rotation = function(theta, aboutPoint) {\n    var rotationMatrix;\n    rotationMatrix = Matrix(Math.cos(theta), Math.sin(theta), -Math.sin(theta), Math.cos(theta));\n    if (aboutPoint != null) {\n      rotationMatrix = Matrix.translation(aboutPoint.x, aboutPoint.y).concat(rotationMatrix).concat(Matrix.translation(-aboutPoint.x, -aboutPoint.y));\n    }\n    return rotationMatrix;\n  };'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'rotate'[39m,
       value: [32m'Matrix.rotation = function(theta, aboutPoint) {'[39m,
       string: [32m'Matrix.rotate'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a matrix that corresponds to scaling by factors of sx, sy along<br />  the x and y axis respectively.<br />  If only one parameter is given the matrix is scaled uniformly along both axis.<br />  If the optional aboutPoint parameter is given the scaling takes place<br />  about the given point.<br />  @see Matrix#scale<br />  @param {Number} sx The amount to scale by along the x axis or uniformly if no sy is given.<br />  @param {Number} [sy] The amount to scale by along the y axis.<br />  @param {Point} [aboutPoint] The point about which the scaling occurs. Defaults to (0,0).<br />  @returns {Matrix} A matrix transformation representing scaling by sx and sy.</p>'[39m,
       summary: [32m'<p>Returns a matrix that corresponds to scaling by factors of sx, sy along<br />  the x and y axis respectively.<br />  If only one parameter is given the matrix is scaled uniformly along both axis.<br />  If the optional aboutPoint parameter is given the scaling takes place<br />  about the given point.<br />  @see Matrix#scale<br />  @param {Number} sx The amount to scale by along the x axis or uniformly if no sy is given.<br />  @param {Number} [sy] The amount to scale by along the y axis.<br />  @param {Point} [aboutPoint] The point about which the scaling occurs. Defaults to (0,0).<br />  @returns {Matrix} A matrix transformation representing scaling by sx and sy.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.scale = function(sx, sy, aboutPoint) {\n    var scaleMatrix;\n    sy = sy || sx;\n    scaleMatrix = Matrix(sx, 0, 0, sy);\n    if (aboutPoint) {\n      scaleMatrix = Matrix.translation(aboutPoint.x, aboutPoint.y).concat(scaleMatrix).concat(Matrix.translation(-aboutPoint.x, -aboutPoint.y));\n    }\n    return scaleMatrix;\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'scale'[39m,
       string: [32m'Matrix.scale()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a matrix that corresponds to a translation of tx, ty.<br />  @see Matrix#translate<br />  @param {Number} tx The amount to translate in the x direction.<br />  @param {Number} ty The amount to translate in the y direction.<br />  @return {Matrix} A matrix transformation representing a translation by tx and ty.</p>'[39m,
       summary: [32m'<p>Returns a matrix that corresponds to a translation of tx, ty.<br />  @see Matrix#translate<br />  @param {Number} tx The amount to translate in the x direction.<br />  @param {Number} ty The amount to translate in the y direction.<br />  @return {Matrix} A matrix transformation representing a translation by tx and ty.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.translate = Matrix.translation = function(tx, ty) {\n    return Matrix(1, 0, 0, 1, tx, ty);\n  };'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'translate'[39m,
       value: [32m'Matrix.translation = function(tx, ty) {'[39m,
       string: [32m'Matrix.translate'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A constant representing the identity matrix.<br />  @name IDENTITY<br />  @fieldOf Matrix</p>'[39m,
       summary: [32m'<p>A constant representing the identity matrix.<br />  @name IDENTITY<br />  @fieldOf Matrix</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.IDENTITY = Matrix();'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'IDENTITY'[39m,
       value: [32m'Matrix()'[39m,
       string: [32m'Matrix.IDENTITY'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A constant representing the horizontal flip transformation matrix.<br />  @name HORIZONTAL_FLIP<br />  @fieldOf Matrix</p>'[39m,
       summary: [32m'<p>A constant representing the horizontal flip transformation matrix.<br />  @name HORIZONTAL_FLIP<br />  @fieldOf Matrix</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.HORIZONTAL_FLIP = Matrix(-1, 0, 0, 1);'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'HORIZONTAL_FLIP'[39m,
       value: [32m'Matrix(-1, 0, 0, 1)'[39m,
       string: [32m'Matrix.HORIZONTAL_FLIP'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A constant representing the vertical flip transformation matrix.<br />  @name VERTICAL_FLIP<br />  @fieldOf Matrix</p>'[39m,
       summary: [32m'<p>A constant representing the vertical flip transformation matrix.<br />  @name VERTICAL_FLIP<br />  @fieldOf Matrix</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Matrix.VERTICAL_FLIP = Matrix(1, 0, 0, -1);\n  if (Object.freeze) {\n    Object.freeze(Matrix.IDENTITY);\n    Object.freeze(Matrix.HORIZONTAL_FLIP);\n    Object.freeze(Matrix.VERTICAL_FLIP);\n  }\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Matrix"] = Matrix;\n})();\n;'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Matrix'[39m,
       name: [32m'VERTICAL_FLIP'[39m,
       value: [32m'Matrix(1, 0, 0, -1)'[39m,
       string: [32m'Matrix.VERTICAL_FLIP'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'abs'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The absolute value of the number.'[39m } ],
    description: 
     { full: [32m'<p>Returns the absolute value of this number.</p>\n\n<p><code><pre><br />(-4).abs()</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the absolute value of this number.</p>'[39m,
       body: [32m'<p><code><pre><br />(-4).abs()</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.abs = function() {\n  return Math.abs(this);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'abs'[39m,
       string: [32m'Number.prototype.abs()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'ceil'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The number truncated to the nearest integer of greater than or equal value.'[39m } ],
    description: 
     { full: [32m'<p>Returns the mathematical ceiling of this number.</p>\n\n<p><code><pre><br />4.9.ceil() </p>\n\n<h1>=> 5</h1>\n\n<p>4.2.ceil()</p>\n\n<h1>=> 5</h1>\n\n<p>(-1.2).ceil()</p>\n\n<h1>=> -1</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the mathematical ceiling of this number.</p>'[39m,
       body: [32m'<p><code><pre><br />4.9.ceil() </p>\n\n<h1>=> 5</h1>\n\n<p>4.2.ceil()</p>\n\n<h1>=> 5</h1>\n\n<p>(-1.2).ceil()</p>\n\n<h1>=> -1</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.ceil = function() {\n  return Math.ceil(this);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'ceil'[39m,
       string: [32m'Number.prototype.ceil()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'floor'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The number truncated to the nearest integer of less than or equal value.'[39m } ],
    description: 
     { full: [32m'<p>Returns the mathematical floor of this number.</p>\n\n<p><code><pre><br />4.9.floor()</p>\n\n<h1>=> 4</h1>\n\n<p>4.2.floor()</p>\n\n<h1>=> 4</h1>\n\n<p>(-1.2).floor()</p>\n\n<h1>=> -2</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the mathematical floor of this number.</p>'[39m,
       body: [32m'<p><code><pre><br />4.9.floor()</p>\n\n<h1>=> 4</h1>\n\n<p>4.2.floor()</p>\n\n<h1>=> 4</h1>\n\n<p>(-1.2).floor()</p>\n\n<h1>=> -2</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.floor = function() {\n  return Math.floor(this);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'floor'[39m,
       string: [32m'Number.prototype.floor()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'round'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The number rounded to the nearest integer.'[39m } ],
    description: 
     { full: [32m'<p>Returns this number rounded to the nearest integer.</p>\n\n<p><code><pre><br />4.5.round()</p>\n\n<h1>=> 5</h1>\n\n<p>4.4.round()</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns this number rounded to the nearest integer.</p>'[39m,
       body: [32m'<p><code><pre><br />4.5.round()</p>\n\n<h1>=> 5</h1>\n\n<p>4.4.round()</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.round = function() {\n  return Math.round(this);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'round'[39m,
       string: [32m'Number.prototype.round()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'clamp'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'min'[39m,
         description: [32m'The lower boundary of the output range'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'max'[39m,
         description: [32m'The upper boundary of the output range'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} A number in the range [min, max]'[39m } ],
    description: 
     { full: [32m'<p>Returns a number whose value is limited to the given range.</p>\n\n<p><code><pre></p>\n\n<h1>limit the output of this computation to between 0 and 255</h1>\n\n<p>(2 * 255).clamp(0, 255)</p>\n\n<h1>=> 255</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a number whose value is limited to the given range.</p>'[39m,
       body: [32m'<p><code><pre></p>\n\n<h1>limit the output of this computation to between 0 and 255</h1>\n\n<p>(2 * 255).clamp(0, 255)</p>\n\n<h1>=> 255</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.clamp = function(min, max) {\n  return Math.min(Math.max(this, min), max);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'clamp'[39m,
       string: [32m'Number.prototype.clamp()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'mod'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'base'[39m,
         description: [32m''[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} An integer between 0 and (base - 1) if base is positive.'[39m } ],
    description: 
     { full: [32m'<p>A mod method useful for array wrapping. The range of the function is<br />constrained to remain in bounds of array indices.</p>\n\n<p><code><pre><br />(-1).mod(5)</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>A mod method useful for array wrapping. The range of the function is<br />constrained to remain in bounds of array indices.</p>'[39m,
       body: [32m'<p><code><pre><br />(-1).mod(5)</p>\n\n<h1>=> 4</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.mod = function(base) {\n  var result;\n  result = this % base;\n  if (result < 0 && base > 0) result += base;\n  return result;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'mod'[39m,
       string: [32m'Number.prototype.mod()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'sign'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The sign of this number, 0 if the number is 0.'[39m } ],
    description: 
     { full: [32m'<p>Get the sign of this number as an integer (1, -1, or 0).</p>\n\n<p><code><pre><br />(-5).sign()</p>\n\n<h1>=> -1</h1>\n\n<p>0.sign()</p>\n\n<h1>=> 0</h1>\n\n<p>5.sign()</p>\n\n<h1>=> 1</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Get the sign of this number as an integer (1, -1, or 0).</p>'[39m,
       body: [32m'<p><code><pre><br />(-5).sign()</p>\n\n<h1>=> -1</h1>\n\n<p>0.sign()</p>\n\n<h1>=> 0</h1>\n\n<p>5.sign()</p>\n\n<h1>=> 1</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.sign = function() {\n  if (this > 0) {\n    return 1;\n  } else if (this < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'sign'[39m,
       string: [32m'Number.prototype.sign()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'even'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} true if this number is an even integer, false otherwise.'[39m } ],
    description: 
     { full: [32m'<p>Returns true if this number is even (evenly divisible by 2).</p>\n\n<p><code><pre><br />2.even()</p>\n\n<h1>=> true</h1>\n\n<p>3.even()</p>\n\n<h1>=> false</h1>\n\n<p>0.even()</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns true if this number is even (evenly divisible by 2).</p>'[39m,
       body: [32m'<p><code><pre><br />2.even()</p>\n\n<h1>=> true</h1>\n\n<p>3.even()</p>\n\n<h1>=> false</h1>\n\n<p>0.even()</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.even = function() {\n  return this % 2 === 0;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'even'[39m,
       string: [32m'Number.prototype.even()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'odd'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} true if this number is an odd integer, false otherwise.'[39m } ],
    description: 
     { full: [32m'<p>Returns true if this number is odd (has remainder of 1 when divided by 2).</p>\n\n<p><code><pre><br />2.odd()</p>\n\n<h1>=> false</h1>\n\n<p>3.odd()</p>\n\n<h1>=> true</h1>\n\n<p>0.odd()</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns true if this number is odd (has remainder of 1 when divided by 2).</p>'[39m,
       body: [32m'<p><code><pre><br />2.odd()</p>\n\n<h1>=> false</h1>\n\n<p>3.odd()</p>\n\n<h1>=> true</h1>\n\n<p>0.odd()</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.odd = function() {\n  if (this > 0) {\n    return this % 2 === 1;\n  } else {\n    return this % 2 === -1;\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'odd'[39m,
       string: [32m'Number.prototype.odd()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'times'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'iterator'[39m,
         description: [32m'The iterator takes a single parameter, the number of the current iteration.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'[context]'[39m,
         description: [32m'The optional context parameter specifies an object to treat as <code>this</code> in the iterator block.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The number of times the iterator was called.'[39m } ],
    description: 
     { full: [32m'<p>Calls iterator the specified number of times, passing in the number of the <br />current iteration as a parameter: 0 on first call, 1 on the second call, etc. </p>\n\n<p><code><pre><br />output = []</p>\n\n<p>5.times (n) -><br />  output.push(n)</p>\n\n<p>output</p>\n\n<h1>=> [0, 1, 2, 3, 4]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Calls iterator the specified number of times, passing in the number of the <br />current iteration as a parameter: 0 on first call, 1 on the second call, etc. </p>'[39m,
       body: [32m'<p><code><pre><br />output = []</p>\n\n<p>5.times (n) -><br />  output.push(n)</p>\n\n<p>output</p>\n\n<h1>=> [0, 1, 2, 3, 4]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.times = function(iterator, context) {\n  var i;\n  i = -1;\n  while (++i < this) {\n    iterator.call(context, i);\n  }\n  return i;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'times'[39m,
       string: [32m'Number.prototype.times()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'snap'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'resolution'[39m,
         description: [32m'The grid resolution to snap to.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The nearest multiple of resolution lower than the number.'[39m } ],
    description: 
     { full: [32m'<p>Returns the the nearest grid resolution less than or equal to the number. </p>\n\n<p><code><pre><br />7.snap(8) </p>\n\n<h1>=> 0</h1>\n\n<p>4.snap(8) </p>\n\n<h1>=> 0</h1>\n\n<p>12.snap(8) </p>\n\n<h1>=> 8</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the the nearest grid resolution less than or equal to the number. </p>'[39m,
       body: [32m'<p><code><pre><br />7.snap(8) </p>\n\n<h1>=> 0</h1>\n\n<p>4.snap(8) </p>\n\n<h1>=> 0</h1>\n\n<p>12.snap(8) </p>\n\n<h1>=> 8</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.snap = function(resolution) {\n  var n;\n  n = this / resolution;\n  1 / 1;\n  return n.floor() * resolution;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'snap'[39m,
       string: [32m'Number.prototype.snap()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'primeFactors'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Array} An array containing the factorization of this number.'[39m } ],
    description: 
     { full: [32m'<p>In number theory, integer factorization or prime factorization is the<br />breaking down of a composite number into smaller non-trivial divisors,<br />which when multiplied together equal the original integer.</p>\n\n<p>Floors the number for purposes of factorization.</p>\n\n<p><code><pre><br />60.primeFactors()</p>\n\n<h1>=> [2, 2, 3, 5]</h1>\n\n<p>37.primeFactors()</p>\n\n<h1>=> [37]</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>In number theory, integer factorization or prime factorization is the<br />breaking down of a composite number into smaller non-trivial divisors,<br />which when multiplied together equal the original integer.</p>'[39m,
       body: [32m'<p>Floors the number for purposes of factorization.</p>\n\n<p><code><pre><br />60.primeFactors()</p>\n\n<h1>=> [2, 2, 3, 5]</h1>\n\n<p>37.primeFactors()</p>\n\n<h1>=> [37]</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.primeFactors = function() {\n  var factors, i, iSquared, n;\n  factors = [];\n  n = Math.floor(this);\n  if (n === 0) return;\n  if (n < 0) {\n    factors.push(-1);\n    n /= -1;\n  }\n  i = 2;\n  iSquared = i * i;\n  while (iSquared < n) {\n    while ((n % i) === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i += 1;\n    iSquared = i * i;\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'primeFactors'[39m,
       string: [32m'Number.prototype.primeFactors()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toColorPart'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} Hexidecimal representation of the number'[39m } ],
    description: 
     { full: [32m'<p>Returns the two character hexidecimal <br />representation of numbers 0 through 255.</p>\n\n<p><code><pre><br />255.toColorPart()</p>\n\n<h1>=> "ff"</h1>\n\n<p>0.toColorPart()</p>\n\n<h1>=> "00"</h1>\n\n<p>200.toColorPart()</p>\n\n<h1>=> "c8"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns the two character hexidecimal <br />representation of numbers 0 through 255.</p>'[39m,
       body: [32m'<p><code><pre><br />255.toColorPart()</p>\n\n<h1>=> "ff"</h1>\n\n<p>0.toColorPart()</p>\n\n<h1>=> "00"</h1>\n\n<p>200.toColorPart()</p>\n\n<h1>=> "c8"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.toColorPart = function() {\n  var s;\n  s = parseInt(this.clamp(0, 255), 10).toString(16);\n  if (s.length === 1) s = \'0\' + s;\n  return s;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'toColorPart'[39m,
       string: [32m'Number.prototype.toColorPart()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'approach'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} A number maxDelta toward target'[39m } ],
    description: 
     { full: [32m'<p>Returns a number that is maxDelta closer to target.</p>\n\n<p><code><pre><br />255.approach(0, 5)</p>\n\n<h1>=> 250</h1>\n\n<p>5.approach(0, 10)</p>\n\n<h1>=> 0</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a number that is maxDelta closer to target.</p>'[39m,
       body: [32m'<p><code><pre><br />255.approach(0, 5)</p>\n\n<h1>=> 250</h1>\n\n<p>5.approach(0, 10)</p>\n\n<h1>=> 0</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.approach = function(target, maxDelta) {\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'approach'[39m,
       string: [32m'Number.prototype.approach()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'approachByRatio'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} A number toward target by the ratio'[39m } ],
    description: 
     { full: [32m'<p>Returns a number that is closer to the target by the ratio.</p>\n\n<p><code><pre><br />255.approachByRatio(0, 0.1)</p>\n\n<h1>=> 229.5</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a number that is closer to the target by the ratio.</p>'[39m,
       body: [32m'<p><code><pre><br />255.approachByRatio(0, 0.1)</p>\n\n<h1>=> 229.5</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.approachByRatio = function(target, ratio) {\n  return this.approach(target, this * ratio);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'approachByRatio'[39m,
       string: [32m'Number.prototype.approachByRatio()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'approachRotation'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} A number toward the target angle by maxDelta'[39m } ],
    description: 
     { full: [32m'<p>Returns a number that is closer to the target angle by the delta.</p>\n\n<p><code><pre><br />Math.PI.approachRotation(0, Math.PI/4)</p>\n\n<h1>=> 2.356194490192345 # this is (3/4) * Math.PI, which is (1/4) * Math.PI closer to 0 from Math.PI</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a number that is closer to the target angle by the delta.</p>'[39m,
       body: [32m'<p><code><pre><br />Math.PI.approachRotation(0, Math.PI/4)</p>\n\n<h1>=> 2.356194490192345 # this is (3/4) * Math.PI, which is (1/4) * Math.PI closer to 0 from Math.PI</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.approachRotation = function(target, maxDelta) {\n  while (target > this + Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < this - Math.PI) {\n    target += Math.TAU;\n  }\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'approachRotation'[39m,
       string: [32m'Number.prototype.approachRotation()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'constrainRotation'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} This number constrained between -PI and PI.'[39m } ],
    description: 
     { full: [32m'<p>Constrains a rotation to between -PI and PI.</p>\n\n<p><code><pre><br />(9/4 * Math.PI).constrainRotation() </p>\n\n<h1>=> 0.7853981633974483 # this is (1/4) * Math.PI</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Constrains a rotation to between -PI and PI.</p>'[39m,
       body: [32m'<p><code><pre><br />(9/4 * Math.PI).constrainRotation() </p>\n\n<h1>=> 0.7853981633974483 # this is (1/4) * Math.PI</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.constrainRotation = function() {\n  var target;\n  target = this;\n  while (target > Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < -Math.PI) {\n    target += Math.TAU;\n  }\n  return target;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'constrainRotation'[39m,
       string: [32m'Number.prototype.constrainRotation()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'd'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} The sum of rolling <code>this</code> many <code>sides</code>-sided dice'[39m } ],
    description: 
     { full: [32m'<p>The mathematical d operator. Useful for simulating dice rolls.</p>'[39m,
       summary: [32m'<p>The mathematical d operator. Useful for simulating dice rolls.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Number.prototype.d = function(sides) {\n  var sum;\n  sum = 0;\n  this.times(function() {\n    return sum += rand(sides) + 1;\n  });\n  return sum;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'Number'[39m,
       name: [32m'd'[39m,
       string: [32m'Number.prototype.d()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'seconds'[39m },
       { type: [32m'propertyOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} This number as a duration of seconds'[39m } ],
    description: 
     { full: [32m'<p>Utility method to convert a number to a duration of seconds.</p>\n\n<p><code><pre><br />3.seconds</p>\n\n<h1>=> 3000</h1>\n\n<p>setTimout doSometing, 3.seconds<br /></pre></code></p>'[39m,
       summary: [32m'<p>Utility method to convert a number to a duration of seconds.</p>'[39m,
       body: [32m'<p><code><pre><br />3.seconds</p>\n\n<h1>=> 3000</h1>\n\n<p>setTimout doSometing, 3.seconds<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'if (!5..seconds) {\n  Object.defineProperty(Number.prototype, \'seconds\', {\n    get: function() {\n      return this * 1000;\n    }\n  });\n}\n\nif (!1..second) {\n  Object.defineProperty(Number.prototype, \'second\', {\n    get: function() {\n      return this * 1000;\n    }\n  });\n}'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'rotations'[39m },
       { type: [32m'propertyOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} This number as an amount of rotations'[39m } ],
    description: 
     { full: [32m'<p>Utility method to convert a number to an amount of rotations.</p>\n\n<p><code><pre><br />0.5.rotations</p>\n\n<h1>=> 3.141592653589793</h1>\n\n<p>I.rotation = 0.25.rotations<br /></pre></code></p>'[39m,
       summary: [32m'<p>Utility method to convert a number to an amount of rotations.</p>'[39m,
       body: [32m'<p><code><pre><br />0.5.rotations</p>\n\n<h1>=> 3.141592653589793</h1>\n\n<p>I.rotation = 0.25.rotations<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'if (!5..rotations) {\n  Object.defineProperty(Number.prototype, \'rotations\', {\n    get: function() {\n      return this * Math.TAU;\n    }\n  });\n}\n\nif (!1..rotation) {\n  Object.defineProperty(Number.prototype, \'rotation\', {\n    get: function() {\n      return this * Math.TAU;\n    }\n  });\n}'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'degrees'[39m },
       { type: [32m'propertyOf'[39m, string: [32m'Number#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Number} This number as an amount of degrees'[39m } ],
    description: 
     { full: [32m'<p>Utility method to convert a number to an amount of degrees.</p>\n\n<p><code><pre><br />180.degrees</p>\n\n<h1>=> 3.141592653589793</h1>\n\n<p>I.rotation = 90.degrees<br /></pre></code></p>'[39m,
       summary: [32m'<p>Utility method to convert a number to an amount of degrees.</p>'[39m,
       body: [32m'<p><code><pre><br />180.degrees</p>\n\n<h1>=> 3.141592653589793</h1>\n\n<p>I.rotation = 90.degrees<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'if (!2..degrees) {\n  Object.defineProperty(Number.prototype, \'degrees\', {\n    get: function() {\n      return this * Math.TAU / 360;\n    }\n  });\n}\n\nif (!1..degree) {\n  Object.defineProperty(Number.prototype, \'degree\', {\n    get: function() {\n      return this * Math.TAU / 360;\n    }\n  });\n}'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'TAU'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Math'[39m } ],
    description: 
     { full: [32m'<p>The mathematical circle constant of 1 turn.</p>'[39m,
       summary: [32m'<p>The mathematical circle constant of 1 turn.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Math.TAU = 2 * Math.PI;\n;'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Math'[39m,
       name: [32m'TAU'[39m,
       value: [32m'2 * Math.PI'[39m,
       string: [32m'Math.TAU'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'isArray'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'object'[39m,
         description: [32m'The object to check for array-ness.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} A boolean expressing whether the object is an instance of Array'[39m } ],
    description: 
     { full: [32m'<p>Checks whether an object is an array.</p>\n\n<p><code><pre><br />Object.isArray([1, 2, 4])</p>\n\n<h1>=> true</h1>\n\n<p>Object.isArray({key: "value"})</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Checks whether an object is an array.</p>'[39m,
       body: [32m'<p><code><pre><br />Object.isArray([1, 2, 4])</p>\n\n<h1>=> true</h1>\n\n<p>Object.isArray({key: "value"})</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var __slice = Array.prototype.slice;\n\nObject.isArray = function(object) {\n  return Object.prototype.toString.call(object) === "[object Array]";\n};'[39m,
    ctx: 
     { type: [32m'declaration'[39m,
       name: [32m'__slice'[39m,
       value: [32m'Array.prototype.slice'[39m,
       string: [32m'__slice'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'isString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'object'[39m,
         description: [32m'The object to check for string-ness.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} A boolean expressing whether the object is an instance of String'[39m } ],
    description: 
     { full: [32m'<p>Checks whether an object is a string.</p>\n\n<p><code><pre><br />Object.isString("a string")</p>\n\n<h1>=> true</h1>\n\n<p>Object.isString([1, 2, 4])</p>\n\n<h1>=> false</h1>\n\n<p>Object.isString({key: "value"})</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Checks whether an object is a string.</p>'[39m,
       body: [32m'<p><code><pre><br />Object.isString("a string")</p>\n\n<h1>=> true</h1>\n\n<p>Object.isString([1, 2, 4])</p>\n\n<h1>=> false</h1>\n\n<p>Object.isString({key: "value"})</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Object.isString = function(object) {\n  return Object.prototype.toString.call(object) === "[object String]";\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Object'[39m,
       name: [32m'isString'[39m,
       string: [32m'Object.isString()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'reverseMerge'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'target'[39m,
         description: [32m'The object to merge the properties into.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} target'[39m } ],
    description: 
     { full: [32m'<p>Merges properties from objects into target without overiding.<br />First come, first served.</p>\n\n<p><code><pre><br />  I =<br />    a: 1<br />    b: 2<br />    c: 3</p>\n\n<p>Object.reverseMerge I,<br />    c: 6<br />    d: 4   </p>\n\n<p>I # => {a: 1, b:2, c:3, d: 4}<br /></pre></code></p>'[39m,
       summary: [32m'<p>Merges properties from objects into target without overiding.<br />First come, first served.</p>'[39m,
       body: [32m'<p><code><pre><br />  I =<br />    a: 1<br />    b: 2<br />    c: 3</p>\n\n<p>Object.reverseMerge I,<br />    c: 6<br />    d: 4   </p>\n\n<p>I # => {a: 1, b:2, c:3, d: 4}<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Object.reverseMerge = function() {\n  var name, object, objects, target, _i, _len;\n  target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  for (_i = 0, _len = objects.length; _i < _len; _i++) {\n    object = objects[_i];\n    for (name in object) {\n      if (!target.hasOwnProperty(name)) target[name] = object[name];\n    }\n  }\n  return target;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Object'[39m,
       name: [32m'reverseMerge'[39m,
       string: [32m'Object.reverseMerge()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'extend'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'target'[39m,
         description: [32m'The object to merge the properties into.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} target'[39m } ],
    description: 
     { full: [32m'<p>Merges properties from sources into target with overiding.<br />Last in covers earlier properties.</p>\n\n<p><code><pre><br />  I =<br />    a: 1<br />    b: 2<br />    c: 3</p>\n\n<p>Object.extend I,<br />    c: 6<br />    d: 4</p>\n\n<p>I # => {a: 1, b:2, c:6, d: 4}<br /></pre></code></p>'[39m,
       summary: [32m'<p>Merges properties from sources into target with overiding.<br />Last in covers earlier properties.</p>'[39m,
       body: [32m'<p><code><pre><br />  I =<br />    a: 1<br />    b: 2<br />    c: 3</p>\n\n<p>Object.extend I,<br />    c: 6<br />    d: 4</p>\n\n<p>I # => {a: 1, b:2, c:6, d: 4}<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Object.extend = function() {\n  var name, source, sources, target, _i, _len;\n  target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  for (_i = 0, _len = sources.length; _i < _len; _i++) {\n    source = sources[_i];\n    for (name in source) {\n      target[name] = source[name];\n    }\n  }\n  return target;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Object'[39m,
       name: [32m'extend'[39m,
       string: [32m'Object.extend()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'isObject'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'object'[39m,
         description: [32m'Maybe this guy is an object.'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} true if this guy is an object.'[39m } ],
    description: 
     { full: [32m'<p>Helper method that tells you if something is an object.</p>\n\n<p><code><pre><br />object = {a: 1}</p>\n\n<p>Object.isObject(object)</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Helper method that tells you if something is an object.</p>'[39m,
       body: [32m'<p><code><pre><br />object = {a: 1}</p>\n\n<p>Object.isObject(object)</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Object.isObject = function(object) {\n  return Object.prototype.toString.call(object) === \'[object Object]\';\n};\n;\nvar __slice = Array.prototype.slice;\n\n(function() {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Object'[39m,
       name: [32m'isObject'[39m,
       string: [32m'Object.isObject()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Create a new point with given x and y coordinates. If no arguments are given<br />  defaults to (0, 0).</p>\n\n<p><code><pre><br />  point = Point()</p>\n\n<p>p.x<br />  # => 0</p>\n\n<p>p.y<br />  # => 0</p>\n\n<p>point = Point(-2, 5)</p>\n\n<p>p.x<br />  # => -2</p>\n\n<p>p.y<br />  # => 5<br />  </pre></code></p>\n\n<p>@name Point<br />  @param {Number} [x]<br />  @param {Number} [y]<br />  @constructor</p>'[39m,
       summary: [32m'<p>Create a new point with given x and y coordinates. If no arguments are given<br />  defaults to (0, 0).</p>'[39m,
       body: [32m'<p><code><pre><br />  point = Point()</p>\n\n<p>p.x<br />  # => 0</p>\n\n<p>p.y<br />  # => 0</p>\n\n<p>point = Point(-2, 5)</p>\n\n<p>p.x<br />  # => -2</p>\n\n<p>p.y<br />  # => 5<br />  </pre></code></p>\n\n<p>@name Point<br />  @param {Number} [x]<br />  @param {Number} [y]<br />  @constructor</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var Point;\n  Point = function(x, y) {\n    return {\n      __proto__: Point.prototype,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The x coordinate of this point.<br />      @name x<br />      @fieldOf Point#</p>'[39m,
       summary: [32m'<p>The x coordinate of this point.<br />      @name x<br />      @fieldOf Point#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'x: x || 0,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The y coordinate of this point.<br />      @name y<br />      @fieldOf Point#</p>'[39m,
       summary: [32m'<p>The y coordinate of this point.<br />      @name y<br />      @fieldOf Point#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'y: y || 0\n    };\n  };\n  Point.prototype = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Creates a copy of this point.</p>\n\n<pre><code>@name copy\n@methodOf Point#\n@returns {Point} A new point with the same x and y value as this point.\n\n&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 1)\npointCopy = point.copy()\n\npoint.equal(pointCopy)\n# =&gt; true\n\npoint == pointCopy\n# =&gt; false     \n&lt;/pre&gt;&lt;/code&gt;\n</code></pre>'[39m,
       summary: [32m'<p>Creates a copy of this point.</p>'[39m,
       body: [32m'<pre><code>@name copy\n@methodOf Point#\n@returns {Point} A new point with the same x and y value as this point.\n\n&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 1)\npointCopy = point.copy()\n\npoint.equal(pointCopy)\n# =&gt; true\n\npoint == pointCopy\n# =&gt; false     \n&lt;/pre&gt;&lt;/code&gt;\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'copy: function() {\n      return Point(this.x, this.y);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Adds a point to this one and returns the new point. You may<br />    also use a two argument call like <code>point.add(x, y)</code><br />    to add x and y values without a second point object.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).add(Point(3, 4))\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 7\n\nanotherPoint = Point(2, 3).add(3, 4)\n\nanotherPoint.x\n# =&gt; 5\n\nanotherPoint.y\n# =&gt; 7\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add\n@methodOf Point#\n@param {Point} other The point to add this point to.\n@returns {Point} A new point, the sum of both.\n</code></pre>'[39m,
       summary: [32m'<p>Adds a point to this one and returns the new point. You may<br />    also use a two argument call like <code>point.add(x, y)</code><br />    to add x and y values without a second point object.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).add(Point(3, 4))\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 7\n\nanotherPoint = Point(2, 3).add(3, 4)\n\nanotherPoint.x\n# =&gt; 5\n\nanotherPoint.y\n# =&gt; 7\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add\n@methodOf Point#\n@param {Point} other The point to add this point to.\n@returns {Point} A new point, the sum of both.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'add: function(first, second) {\n      return this.copy().add$(first, second);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Adds a point to this one, returning a modified point. You may<br />    also use a two argument call like <code>point.add(x, y)</code><br />    to add x and y values without a second point object.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3)\n\npoint.x\n# =&gt; 2\n\npoint.y\n# =&gt; 3\n\npoint.add$(Point(3, 4))\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 7\n\nanotherPoint = Point(2, 3)\nanotherPoint.add$(3, 4)\n\nanotherPoint.x\n# =&gt; 5\n\nanotherPoint.y\n# =&gt; 7\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add$\n@methodOf Point#\n@param {Point} other The point to add this point to.\n@returns {Point} The sum of both points.\n</code></pre>'[39m,
       summary: [32m'<p>Adds a point to this one, returning a modified point. You may<br />    also use a two argument call like <code>point.add(x, y)</code><br />    to add x and y values without a second point object.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3)\n\npoint.x\n# =&gt; 2\n\npoint.y\n# =&gt; 3\n\npoint.add$(Point(3, 4))\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 7\n\nanotherPoint = Point(2, 3)\nanotherPoint.add$(3, 4)\n\nanotherPoint.x\n# =&gt; 5\n\nanotherPoint.y\n# =&gt; 7\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add$\n@methodOf Point#\n@param {Point} other The point to add this point to.\n@returns {Point} The sum of both points.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'add$: function(first, second) {\n      if (second != null) {\n        this.x += first;\n        this.y += second;\n      } else {\n        this.x += first.x;\n        this.y += first.y;\n      }\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Subtracts a point to this one and returns the new point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 2).subtract(Point(2, 0))\n\npoint.x\n# =&gt; -1\n\npoint.y\n# =&gt; 2\n\nanotherPoint = Point(1, 2).subtract(2, 0)\n\nanotherPoint.x\n# =&gt; -1\n\nanotherPoint.y\n# =&gt; 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name subtract\n@methodOf Point#\n@param {Point} other The point to subtract from this point.\n@returns {Point} A new point, this - other.\n</code></pre>'[39m,
       summary: [32m'<p>Subtracts a point to this one and returns the new point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 2).subtract(Point(2, 0))\n\npoint.x\n# =&gt; -1\n\npoint.y\n# =&gt; 2\n\nanotherPoint = Point(1, 2).subtract(2, 0)\n\nanotherPoint.x\n# =&gt; -1\n\nanotherPoint.y\n# =&gt; 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name subtract\n@methodOf Point#\n@param {Point} other The point to subtract from this point.\n@returns {Point} A new point, this - other.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'subtract: function(first, second) {\n      return this.copy().subtract$(first, second);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Subtracts a point to this one and returns the new point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 2)\n\npoint.x\n# =&gt; 1\n\npoint.y\n# =&gt; 2\n\npoint.subtract$(Point(2, 0))\n\npoint.x\n# =&gt; -1\n\npoint.y\n# =&gt; 2\n\nanotherPoint = Point(1, 2)\nanotherPoint.subtract$(2, 0)\n\nanotherPoint.x\n# =&gt; -1\n\nanotherPoint.y\n# =&gt; 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name subtract$\n@methodOf Point#\n@param {Point} other The point to subtract from this point.\n@returns {Point} The difference of the two points.\n</code></pre>'[39m,
       summary: [32m'<p>Subtracts a point to this one and returns the new point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(1, 2)\n\npoint.x\n# =&gt; 1\n\npoint.y\n# =&gt; 2\n\npoint.subtract$(Point(2, 0))\n\npoint.x\n# =&gt; -1\n\npoint.y\n# =&gt; 2\n\nanotherPoint = Point(1, 2)\nanotherPoint.subtract$(2, 0)\n\nanotherPoint.x\n# =&gt; -1\n\nanotherPoint.y\n# =&gt; 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name subtract$\n@methodOf Point#\n@param {Point} other The point to subtract from this point.\n@returns {Point} The difference of the two points.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'subtract$: function(first, second) {\n      if (second != null) {\n        this.x -= first;\n        this.y -= second;\n      } else {\n        this.x -= first.x;\n        this.y -= first.y;\n      }\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Scale this Point (Vector) by a constant amount.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 6).scale(2)\n\npoint.x\n# =&gt; 10\n\npoint.y\n# =&gt; 12\n&lt;/pre&gt;&lt;/code&gt;\n\n@name scale\n@methodOf Point#\n@param {Number} scalar The amount to scale this point by.\n@returns {Point} A new point, this * scalar.\n</code></pre>'[39m,
       summary: [32m'<p>Scale this Point (Vector) by a constant amount.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 6).scale(2)\n\npoint.x\n# =&gt; 10\n\npoint.y\n# =&gt; 12\n&lt;/pre&gt;&lt;/code&gt;\n\n@name scale\n@methodOf Point#\n@param {Number} scalar The amount to scale this point by.\n@returns {Point} A new point, this * scalar.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'scale: function(scalar) {\n      return this.copy().scale$(scalar);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Scale this Point (Vector) by a constant amount. Modifies the point in place.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 6)\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 6\n\npoint.scale$(2)\n\npoint.x\n# =&gt; 10\n\npoint.y\n# =&gt; 12\n&lt;/pre&gt;&lt;/code&gt;\n\n@name scale$\n@methodOf Point#\n@param {Number} scalar The amount to scale this point by.\n@returns {Point} this * scalar.\n</code></pre>'[39m,
       summary: [32m'<p>Scale this Point (Vector) by a constant amount. Modifies the point in place.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 6)\n\npoint.x\n# =&gt; 5\n\npoint.y\n# =&gt; 6\n\npoint.scale$(2)\n\npoint.x\n# =&gt; 10\n\npoint.y\n# =&gt; 12\n&lt;/pre&gt;&lt;/code&gt;\n\n@name scale$\n@methodOf Point#\n@param {Number} scalar The amount to scale this point by.\n@returns {Point} this * scalar.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'scale$: function(scalar) {\n      this.x *= scalar;\n      this.y *= scalar;\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The norm of a vector is the unit vector pointing in the same direction. This method<br />    treats the point as though it is a vector from the origin to (x, y).</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).norm()\n\npoint.x\n# =&gt; 0.5547001962252291\n\npoint.y  \n# =&gt; 0.8320502943378437\n\nanotherPoint = Point(2, 3).norm(2)\n\nanotherPoint.x\n# =&gt; 1.1094003924504583\n\nanotherPoint.y   \n# =&gt; 1.6641005886756874    \n&lt;/pre&gt;&lt;/code&gt;\n\n@name norm\n@methodOf Point#\n@returns {Point} The unit vector pointing in the same direction as this vector.\n</code></pre>'[39m,
       summary: [32m'<p>The norm of a vector is the unit vector pointing in the same direction. This method<br />    treats the point as though it is a vector from the origin to (x, y).</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).norm()\n\npoint.x\n# =&gt; 0.5547001962252291\n\npoint.y  \n# =&gt; 0.8320502943378437\n\nanotherPoint = Point(2, 3).norm(2)\n\nanotherPoint.x\n# =&gt; 1.1094003924504583\n\nanotherPoint.y   \n# =&gt; 1.6641005886756874    \n&lt;/pre&gt;&lt;/code&gt;\n\n@name norm\n@methodOf Point#\n@returns {Point} The unit vector pointing in the same direction as this vector.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'norm: function(length) {\n      if (length == null) length = 1.0;\n      return this.copy().norm$(length);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The norm of a vector is the unit vector pointing in the same direction. This method<br />    treats the point as though it is a vector from the origin to (x, y). Modifies the point in place.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).norm$()\n\npoint.x\n# =&gt; 0.5547001962252291\n\npoint.y  \n# =&gt; 0.8320502943378437\n\nanotherPoint = Point(2, 3).norm$(2)\n\nanotherPoint.x\n# =&gt; 1.1094003924504583\n\nanotherPoint.y   \n# =&gt; 1.6641005886756874    \n&lt;/pre&gt;&lt;/code&gt;\n\n@name norm$\n@methodOf Point#\n@returns {Point} The unit vector pointing in the same direction as this vector.\n</code></pre>'[39m,
       summary: [32m'<p>The norm of a vector is the unit vector pointing in the same direction. This method<br />    treats the point as though it is a vector from the origin to (x, y). Modifies the point in place.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(2, 3).norm$()\n\npoint.x\n# =&gt; 0.5547001962252291\n\npoint.y  \n# =&gt; 0.8320502943378437\n\nanotherPoint = Point(2, 3).norm$(2)\n\nanotherPoint.x\n# =&gt; 1.1094003924504583\n\nanotherPoint.y   \n# =&gt; 1.6641005886756874    \n&lt;/pre&gt;&lt;/code&gt;\n\n@name norm$\n@methodOf Point#\n@returns {Point} The unit vector pointing in the same direction as this vector.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'norm$: function(length) {\n      var m;\n      if (length == null) length = 1.0;\n      if (m = this.length()) {\n        return this.scale$(length / m);\n      } else {\n        return this;\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Floor the x and y values, returning a new point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(3.4, 5.8).floor()\n\npoint.x\n# =&gt; 3\n\npoint.y\n# =&gt; 5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name floor\n@methodOf Point#\n@returns {Point} A new point, with x and y values each floored to the largest previous integer.\n</code></pre>'[39m,
       summary: [32m'<p>Floor the x and y values, returning a new point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(3.4, 5.8).floor()\n\npoint.x\n# =&gt; 3\n\npoint.y\n# =&gt; 5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name floor\n@methodOf Point#\n@returns {Point} A new point, with x and y values each floored to the largest previous integer.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'floor: function() {\n      return this.copy().floor$();\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Floor the x and y values, returning a modified point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(3.4, 5.8)\npoint.floor$()\n\npoint.x\n# =&gt; 3\n\npoint.y\n# =&gt; 5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name floor$\n@methodOf Point#\n@returns {Point} A modified point, with x and y values each floored to the largest previous integer.\n</code></pre>'[39m,
       summary: [32m'<p>Floor the x and y values, returning a modified point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(3.4, 5.8)\npoint.floor$()\n\npoint.x\n# =&gt; 3\n\npoint.y\n# =&gt; 5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name floor$\n@methodOf Point#\n@returns {Point} A modified point, with x and y values each floored to the largest previous integer.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'floor$: function() {\n      this.x = this.x.floor();\n      this.y = this.y.floor();\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Determine whether this point is equal to another point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npointA = Point(2, 3)\npointB = Point(2, 3)\npointC = Point(4, 5)\n\npointA.equal(pointB)\n# =&gt; true\n\npointA.equal(pointC)\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name equal\n@methodOf Point#\n@param {Point} other The point to check for equality.\n@returns {Boolean} true if the other point has the same x, y coordinates, false otherwise.\n</code></pre>'[39m,
       summary: [32m'<p>Determine whether this point is equal to another point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npointA = Point(2, 3)\npointB = Point(2, 3)\npointC = Point(4, 5)\n\npointA.equal(pointB)\n# =&gt; true\n\npointA.equal(pointC)\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name equal\n@methodOf Point#\n@param {Point} other The point to check for equality.\n@returns {Boolean} true if the other point has the same x, y coordinates, false otherwise.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'equal: function(other) {\n      return this.x === other.x && this.y === other.y;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Computed the length of this point as though it were a vector from (0,0) to (x,y).</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 7)\n\npoint.length()\n# =&gt; 8.602325267042627\n&lt;/pre&gt;&lt;/code&gt;\n\n@name length\n@methodOf Point#\n@returns {Number} The length of the vector from the origin to this point.\n</code></pre>'[39m,
       summary: [32m'<p>Computed the length of this point as though it were a vector from (0,0) to (x,y).</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 7)\n\npoint.length()\n# =&gt; 8.602325267042627\n&lt;/pre&gt;&lt;/code&gt;\n\n@name length\n@methodOf Point#\n@returns {Number} The length of the vector from the origin to this point.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'length: function() {\n      return Math.sqrt(this.dot(this));\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Calculate the magnitude of this Point (Vector).</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 7)\n\npoint.magnitude()\n# =&gt; 8.602325267042627\n&lt;/pre&gt;&lt;/code&gt;\n\n@name magnitude\n@methodOf Point#\n@returns {Number} The magnitude of this point as if it were a vector from (0, 0) -&gt; (x, y).\n</code></pre>'[39m,
       summary: [32m'<p>Calculate the magnitude of this Point (Vector).</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(5, 7)\n\npoint.magnitude()\n# =&gt; 8.602325267042627\n&lt;/pre&gt;&lt;/code&gt;\n\n@name magnitude\n@methodOf Point#\n@returns {Number} The magnitude of this point as if it were a vector from (0, 0) -&gt; (x, y).\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'magnitude: function() {\n      return this.length();\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the direction in radians of this point from the origin.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(0, 1)\n\npoint.direction()\n# =&gt; 1.5707963267948966 # Math.PI / 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name direction\n@methodOf Point#\n@returns {Number} The direction in radians of this point from the origin\n</code></pre>'[39m,
       summary: [32m'<p>Returns the direction in radians of this point from the origin.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npoint = Point(0, 1)\n\npoint.direction()\n# =&gt; 1.5707963267948966 # Math.PI / 2\n&lt;/pre&gt;&lt;/code&gt;\n\n@name direction\n@methodOf Point#\n@returns {Number} The direction in radians of this point from the origin\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'direction: function() {\n      return Math.atan2(this.y, this.x);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Calculate the dot product of this point and another point (Vector).<br />    @name dot<br />    @methodOf Point#<br />    @param {Point} other The point to dot with this point.<br />    @returns {Number} The dot product of this point dot other as a scalar value.</p>'[39m,
       summary: [32m'<p>Calculate the dot product of this point and another point (Vector).<br />    @name dot<br />    @methodOf Point#<br />    @param {Point} other The point to dot with this point.<br />    @returns {Number} The dot product of this point dot other as a scalar value.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'dot: function(other) {\n      return this.x * other.x + this.y * other.y;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Calculate the cross product of this point and another point (Vector). <br />    Usually cross products are thought of as only applying to three dimensional vectors,<br />    but z can be treated as zero. The result of this method is interpreted as the magnitude <br />    of the vector result of the cross product between [x1, y1, 0] x [x2, y2, 0]<br />    perpendicular to the xy plane.</p>\n\n<pre><code>@name cross\n@methodOf Point#\n@param {Point} other The point to cross with this point.\n@returns {Number} The cross product of this point with the other point as scalar value.\n</code></pre>'[39m,
       summary: [32m'<p>Calculate the cross product of this point and another point (Vector). <br />    Usually cross products are thought of as only applying to three dimensional vectors,<br />    but z can be treated as zero. The result of this method is interpreted as the magnitude <br />    of the vector result of the cross product between [x1, y1, 0] x [x2, y2, 0]<br />    perpendicular to the xy plane.</p>'[39m,
       body: [32m'<pre><code>@name cross\n@methodOf Point#\n@param {Point} other The point to cross with this point.\n@returns {Number} The cross product of this point with the other point as scalar value.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'cross: function(other) {\n      return this.x * other.y - other.x * this.y;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Compute the Euclidean distance between this point and another point.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\npointA = Point(2, 3)\npointB = Point(9, 2)\n\npointA.distance(pointB)\n# =&gt; 7.0710678118654755 # Math.sqrt(50)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name distance\n@methodOf Point#\n@param {Point} other The point to compute the distance to.\n@returns {Number} The distance between this point and another point.\n</code></pre>'[39m,
       summary: [32m'<p>Compute the Euclidean distance between this point and another point.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\npointA = Point(2, 3)\npointB = Point(9, 2)\n\npointA.distance(pointB)\n# =&gt; 7.0710678118654755 # Math.sqrt(50)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name distance\n@methodOf Point#\n@param {Point} other The point to compute the distance to.\n@returns {Number} The distance between this point and another point.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'distance: function(other) {\n      return Point.distance(this, other);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name toString<br />    @methodOf Point#<br />    @returns {String} A string representation of this point.</p>'[39m,
       summary: [32m'<p>@name toString<br />    @methodOf Point#<br />    @returns {String} A string representation of this point.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'toString: function() {\n      return "Point(" + this.x + ", " + this.y + ")";\n    }\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Compute the Euclidean distance between two points.</p>\n\n<p><code><pre><br />  pointA = Point(2, 3)<br />  pointB = Point(9, 2)</p>\n\n<p>Point.distance(pointA, pointB)<br />  # => 7.0710678118654755 # Math.sqrt(50)<br />  </pre></code></p>\n\n<p>@name distance<br />  @fieldOf Point<br />  @param {Point} p1<br />  @param {Point} p2<br />  @returns {Number} The Euclidean distance between two points.</p>'[39m,
       summary: [32m'<p>Compute the Euclidean distance between two points.</p>'[39m,
       body: [32m'<p><code><pre><br />  pointA = Point(2, 3)<br />  pointB = Point(9, 2)</p>\n\n<p>Point.distance(pointA, pointB)<br />  # => 7.0710678118654755 # Math.sqrt(50)<br />  </pre></code></p>\n\n<p>@name distance<br />  @fieldOf Point<br />  @param {Point} p1<br />  @param {Point} p2<br />  @returns {Number} The Euclidean distance between two points.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.distance = function(p1, p2) {\n    return Math.sqrt(Point.distanceSquared(p1, p2));\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'distance'[39m,
       string: [32m'Point.distance()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p><code><pre><br />  pointA = Point(2, 3)<br />  pointB = Point(9, 2)</p>\n\n<p>Point.distanceSquared(pointA, pointB)<br />  # => 50<br />  </pre></code></p>\n\n<p>@name distanceSquared<br />  @fieldOf Point<br />  @param {Point} p1<br />  @param {Point} p2<br />  @returns {Number} The square of the Euclidean distance between two points.</p>'[39m,
       summary: [32m'<p><code><pre><br />  pointA = Point(2, 3)<br />  pointB = Point(9, 2)</p>'[39m,
       body: [32m'<p>Point.distanceSquared(pointA, pointB)<br />  # => 50<br />  </pre></code></p>\n\n<p>@name distanceSquared<br />  @fieldOf Point<br />  @param {Point} p1<br />  @param {Point} p2<br />  @returns {Number} The square of the Euclidean distance between two points.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.distanceSquared = function(p1, p2) {\n    return Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2);\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'distanceSquared'[39m,
       string: [32m'Point.distanceSquared()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name interpolate<br />  @fieldOf Point</p>\n\n<p>@param {Point} p1<br />  @param {Point} p2<br />  @param {Number} t<br />  @returns {Point} A point along the path from p1 to p2</p>'[39m,
       summary: [32m'<p>@name interpolate<br />  @fieldOf Point</p>'[39m,
       body: [32m'<p>@param {Point} p1<br />  @param {Point} p2<br />  @param {Number} t<br />  @returns {Point} A point along the path from p1 to p2</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.interpolate = function(p1, p2, t) {\n    return p2.subtract(p1).scale(t).add(p1);\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'interpolate'[39m,
       string: [32m'Point.interpolate()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Construct a point on the unit circle for the given angle.</p>\n\n<p><code><pre><br />  point = Point.fromAngle(Math.PI / 2)</p>\n\n<p>point.x<br />  # => 0</p>\n\n<p>point.y<br />  # => 1<br />  </pre></code></p>\n\n<p>@name fromAngle<br />  @fieldOf Point<br />  @param {Number} angle The angle in radians<br />  @returns {Point} The point on the unit circle.</p>'[39m,
       summary: [32m'<p>Construct a point on the unit circle for the given angle.</p>'[39m,
       body: [32m'<p><code><pre><br />  point = Point.fromAngle(Math.PI / 2)</p>\n\n<p>point.x<br />  # => 0</p>\n\n<p>point.y<br />  # => 1<br />  </pre></code></p>\n\n<p>@name fromAngle<br />  @fieldOf Point<br />  @param {Number} angle The angle in radians<br />  @returns {Point} The point on the unit circle.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.fromAngle = function(angle) {\n    return Point(Math.cos(angle), Math.sin(angle));\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'fromAngle'[39m,
       string: [32m'Point.fromAngle()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>If you have two dudes, one standing at point p1, and the other<br />  standing at point p2, then this method will return the direction<br />  that the dude standing at p1 will need to face to look at p2.</p>\n\n<p><code><pre><br />  p1 = Point(0, 0)<br />  p2 = Point(7, 3)</p>\n\n<p>Point.direction(p1, p2)<br />  # => 0.40489178628508343<br />  </pre></code></p>\n\n<p>@name direction<br />  @fieldOf Point<br />  @param {Point} p1 The starting point.<br />  @param {Point} p2 The ending point.<br />  @returns {Number} The direction from p1 to p2 in radians.</p>'[39m,
       summary: [32m'<p>If you have two dudes, one standing at point p1, and the other<br />  standing at point p2, then this method will return the direction<br />  that the dude standing at p1 will need to face to look at p2.</p>'[39m,
       body: [32m'<p><code><pre><br />  p1 = Point(0, 0)<br />  p2 = Point(7, 3)</p>\n\n<p>Point.direction(p1, p2)<br />  # => 0.40489178628508343<br />  </pre></code></p>\n\n<p>@name direction<br />  @fieldOf Point<br />  @param {Point} p1 The starting point.<br />  @param {Point} p2 The ending point.<br />  @returns {Number} The direction from p1 to p2 in radians.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.direction = function(p1, p2) {\n    return Math.atan2(p2.y - p1.y, p2.x - p1.x);\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'direction'[39m,
       string: [32m'Point.direction()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>The centroid of a set of points is their arithmetic mean.</p>\n\n<p>@name centroid<br />  @methodOf Point<br />  @param points... The points to find the centroid of.</p>'[39m,
       summary: [32m'<p>The centroid of a set of points is their arithmetic mean.</p>'[39m,
       body: [32m'<p>@name centroid<br />  @methodOf Point<br />  @param points... The points to find the centroid of.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.centroid = function() {\n    var points;\n    points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    return points.inject(Point(0, 0), function(sumPoint, point) {\n      return sumPoint.add(point);\n    }).scale(1 / points.length);\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'centroid'[39m,
       string: [32m'Point.centroid()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name ZERO<br />  @fieldOf Point<br />  @returns {Point} The point (0, 0)</p>'[39m,
       summary: [32m'<p>@name ZERO<br />  @fieldOf Point<br />  @returns {Point} The point (0, 0)</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.ZERO = Point(0, 0);'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'ZERO'[39m,
       value: [32m'Point(0, 0)'[39m,
       string: [32m'Point.ZERO'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name LEFT<br />  @fieldOf Point<br />  @returns {Point} The point (-1, 0)</p>'[39m,
       summary: [32m'<p>@name LEFT<br />  @fieldOf Point<br />  @returns {Point} The point (-1, 0)</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.LEFT = Point(-1, 0);'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'LEFT'[39m,
       value: [32m'Point(-1, 0)'[39m,
       string: [32m'Point.LEFT'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name RIGHT<br />  @fieldOf Point<br />  @returns {Point} The point (1, 0)</p>'[39m,
       summary: [32m'<p>@name RIGHT<br />  @fieldOf Point<br />  @returns {Point} The point (1, 0)</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.RIGHT = Point(1, 0);'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'RIGHT'[39m,
       value: [32m'Point(1, 0)'[39m,
       string: [32m'Point.RIGHT'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name UP<br />  @fieldOf Point<br />  @returns {Point} The point (0, -1)</p>'[39m,
       summary: [32m'<p>@name UP<br />  @fieldOf Point<br />  @returns {Point} The point (0, -1)</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.UP = Point(0, -1);'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'UP'[39m,
       value: [32m'Point(0, -1)'[39m,
       string: [32m'Point.UP'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name DOWN<br />  @fieldOf Point<br />  @returns {Point} The point (0, 1)</p>'[39m,
       summary: [32m'<p>@name DOWN<br />  @fieldOf Point<br />  @returns {Point} The point (0, 1)</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Point.DOWN = Point(0, 1);\n  if (Object.freeze) {\n    Object.freeze(Point.ZERO);\n    Object.freeze(Point.LEFT);\n    Object.freeze(Point.RIGHT);\n    Object.freeze(Point.UP);\n    Object.freeze(Point.DOWN);\n  }\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Point"] = Point;\n})();\n;\n\n(function() {'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Point'[39m,
       name: [32m'DOWN'[39m,
       value: [32m'Point(0, 1)'[39m,
       string: [32m'Point.DOWN'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>@name Random<br />  @namespace Some useful methods for generating random things.</p>'[39m,
       summary: [32m'<p>@name Random<br />  @namespace Some useful methods for generating random things.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'(typeof exports !== "undefined" && exports !== null ? exports : this)["Random"] = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a random angle, uniformly distributed, between 0 and 2pi.</p>\n\n<pre><code>@name angle\n@methodOf Random\n@returns {Number} A random angle between 0 and 2pi\n</code></pre>'[39m,
       summary: [32m'<p>Returns a random angle, uniformly distributed, between 0 and 2pi.</p>'[39m,
       body: [32m'<pre><code>@name angle\n@methodOf Random\n@returns {Number} A random angle between 0 and 2pi\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'angle: function() {\n      return rand() * Math.TAU;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a random color.</p>\n\n<pre><code>@name color\n@methodOf Random\n@returns {Color} A random color\n</code></pre>'[39m,
       summary: [32m'<p>Returns a random color.</p>'[39m,
       body: [32m'<pre><code>@name color\n@methodOf Random\n@returns {Color} A random color\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'color: function() {\n      return Color.random();\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Happens often.</p>\n\n<pre><code>@name often\n@methodOf Random\n</code></pre>'[39m,
       summary: [32m'<p>Happens often.</p>'[39m,
       body: [32m'<pre><code>@name often\n@methodOf Random\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'often: function() {\n      return rand(3);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Happens sometimes.</p>\n\n<pre><code>@name sometimes\n@methodOf Random\n</code></pre>'[39m,
       summary: [32m'<p>Happens sometimes.</p>'[39m,
       body: [32m'<pre><code>@name sometimes\n@methodOf Random\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'sometimes: function() {\n      return !rand(3);\n    }\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns random integers from [0, n) if n is given.<br />  Otherwise returns random float between 0 and 1.</p>\n\n<p>@name rand<br />  @methodOf window<br />  @param {Number} n<br />  @returns {Number} A random integer from 0 to n - 1 if n is given. If n is not given, a random float between 0 and 1.</p>'[39m,
       summary: [32m'<p>Returns random integers from [0, n) if n is given.<br />  Otherwise returns random float between 0 and 1.</p>'[39m,
       body: [32m'<p>@name rand<br />  @methodOf window<br />  @param {Number} n<br />  @returns {Number} A random integer from 0 to n - 1 if n is given. If n is not given, a random float between 0 and 1.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'(typeof exports !== "undefined" && exports !== null ? exports : this)["rand"] = function(n) {\n    if (n) {\n      return Math.floor(n * Math.random());\n    } else {\n      return Math.random();\n    }\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns random float from [-n / 2, n / 2] if n is given.<br />  Otherwise returns random float between -0.5 and 0.5.</p>\n\n<p>@name signedRand<br />  @methodOf window<br />  @param {Number} n<br />  @returns {Number} A random float from -n / 2 to n / 2 if n is given. If n is not given, a random float between -0.5 and 0.5.</p>'[39m,
       summary: [32m'<p>Returns random float from [-n / 2, n / 2] if n is given.<br />  Otherwise returns random float between -0.5 and 0.5.</p>'[39m,
       body: [32m'<p>@name signedRand<br />  @methodOf window<br />  @param {Number} n<br />  @returns {Number} A random float from -n / 2 to n / 2 if n is given. If n is not given, a random float between -0.5 and 0.5.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'return (typeof exports !== "undefined" && exports !== null ? exports : this)["signedRand"] = function(n) {\n    if (n) {\n      return (n * Math.random()) - (n / 2);\n    } else {\n      return Math.random() - 0.5;\n    }\n  };\n})();\n;\n\n(function() {\n  var Rectangle;\n  Rectangle = function(_arg) {\n    var height, width, x, y;\n    x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height;\n    return {\n      __proto__: Rectangle.prototype,\n      x: x || 0,\n      y: y || 0,\n      width: width || 0,\n      height: height || 0\n    };\n  };\n  Rectangle.prototype = {\n    center: function() {\n      return Point(this.x + this.width / 2, this.y + this.height / 2);\n    },\n    equal: function(other) {\n      return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;\n    }\n  };\n  Rectangle.prototype.__defineGetter__(\'left\', function() {\n    return this.x;\n  });\n  Rectangle.prototype.__defineGetter__(\'right\', function() {\n    return this.x + this.width;\n  });\n  Rectangle.prototype.__defineGetter__(\'top\', function() {\n    return this.y;\n  });\n  Rectangle.prototype.__defineGetter__(\'bottom\', function() {\n    return this.y + this.height;\n  });\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Rectangle"] = Rectangle;\n})();\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'blank'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} Whether or not this string is blank.'[39m } ],
    description: 
     { full: [32m'<p>Returns true if this string only contains whitespace characters.</p>\n\n<p><code><pre><br />"".blank()</p>\n\n<h1>=> true</h1>\n\n<p>"hello".blank()</p>\n\n<h1>=> false</h1>\n\n<p>"   ".blank()</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns true if this string only contains whitespace characters.</p>'[39m,
       body: [32m'<p><code><pre><br />"".blank()</p>\n\n<h1>=> true</h1>\n\n<p>"hello".blank()</p>\n\n<h1>=> false</h1>\n\n<p>"   ".blank()</p>\n\n<h1>=> true</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.blank = function() {\n  return /^\\s*$/.test(this);\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'blank'[39m,
       string: [32m'String.prototype.blank()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'camelize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string. camelCase version of `this`.'[39m } ],
    description: 
     { full: [32m'<p>Returns a new string that is a camelCase version.</p>\n\n<p><code><pre><br />"camel_case".camelize()<br />"camel-case".camelize()<br />"camel case".camelize()</p>\n\n<h1>=> "camelCase"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a new string that is a camelCase version.</p>'[39m,
       body: [32m'<p><code><pre><br />"camel_case".camelize()<br />"camel-case".camelize()<br />"camel case".camelize()</p>\n\n<h1>=> "camelCase"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.camelize = function() {\n  return this.trim().replace(/(\\-|_|\\s)+(.)?/g, function(match, separator, chr) {\n    if (chr) {\n      return chr.toUpperCase();\n    } else {\n      return \'\';\n    }\n  });\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'camelize'[39m,
       string: [32m'String.prototype.camelize()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'capitalize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string. Capitalized version of `this`'[39m } ],
    description: 
     { full: [32m'<p>Returns a new string with the first letter capitalized and the rest lower cased.</p>\n\n<p><code><pre><br />"capital".capitalize()<br />"cAPITAL".capitalize()<br />"cApItAl".capitalize()<br />"CAPITAL".capitalize()</p>\n\n<h1>=> "Capital"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a new string with the first letter capitalized and the rest lower cased.</p>'[39m,
       body: [32m'<p><code><pre><br />"capital".capitalize()<br />"cAPITAL".capitalize()<br />"cApItAl".capitalize()<br />"CAPITAL".capitalize()</p>\n\n<h1>=> "Capital"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'capitalize'[39m,
       string: [32m'String.prototype.capitalize()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'constantize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} The class or constant named in this string.'[39m } ],
    description: 
     { full: [32m'<p>Return the class or constant named in this string.</p>\n\n<p><code><pre></p>\n\n<p>"Constant".constantize()</p>\n\n<h1>=> Constant</h1>\n\n<h1>notice this isn\'t a string. Useful for calling methods on class with the same name as <code>this</code>.</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Return the class or constant named in this string.</p>'[39m,
       body: [32m'<p><code><pre></p>\n\n<p>"Constant".constantize()</p>\n\n<h1>=> Constant</h1>\n\n<h1>notice this isn\'t a string. Useful for calling methods on class with the same name as <code>this</code>.</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.constantize = function() {\n  if (this.match(/[A-Z][A-Za-z0-9]*/)) {\n    eval("var that = " + this);\n    return that;\n  } else {\n    throw "String#constantize: \'" + this + "\' is not a valid constant name.";\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'constantize'[39m,
       string: [32m'String.prototype.constantize()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'humanize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string. Replaces _id and _ with "" and capitalizes the word.'[39m } ],
    description: 
     { full: [32m'<p>Returns a new string that is a more human readable version.</p>\n\n<p><code><pre><br />"player_id".humanize()</p>\n\n<h1>=> "Player"</h1>\n\n<p>"player_ammo".humanize()</p>\n\n<h1>=> "Player ammo"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a new string that is a more human readable version.</p>'[39m,
       body: [32m'<p><code><pre><br />"player_id".humanize()</p>\n\n<h1>=> "Player"</h1>\n\n<p>"player_ammo".humanize()</p>\n\n<h1>=> "Player ammo"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.humanize = function() {\n  return this.replace(/_id$/, "").replace(/_/g, " ").capitalize();\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'humanize'[39m,
       string: [32m'String.prototype.humanize()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'isString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Boolean} true'[39m } ],
    description: 
     { full: [32m'<p>Returns true.</p>'[39m,
       summary: [32m'<p>Returns true.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.isString = function() {\n  return true;\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'isString'[39m,
       string: [32m'String.prototype.isString()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'parse'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{Object} Returns an object from the JSON this string contains. If it is not valid JSON returns the string itself.'[39m } ],
    description: 
     { full: [32m'<p>Parse this string as though it is JSON and return the object it represents. If it<br />is not valid JSON returns the string itself.</p>\n\n<p><code><pre></p>\n\n<h1>this is valid json, so an object is returned</h1>\n\n<p>\'{"a": 3}\'.parse()</p>\n\n<h1>=> {a: 3}</h1>\n\n<h1>double quoting instead isn\'t valid JSON so a string is returned</h1>\n\n<p>"{\'a\': 3}".parse()</p>\n\n<h1>=> "{\'a\': 3}"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Parse this string as though it is JSON and return the object it represents. If it<br />is not valid JSON returns the string itself.</p>'[39m,
       body: [32m'<p><code><pre></p>\n\n<h1>this is valid json, so an object is returned</h1>\n\n<p>\'{"a": 3}\'.parse()</p>\n\n<h1>=> {a: 3}</h1>\n\n<h1>double quoting instead isn\'t valid JSON so a string is returned</h1>\n\n<p>"{\'a\': 3}".parse()</p>\n\n<h1>=> "{\'a\': 3}"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.parse = function() {\n  try {\n    return JSON.parse(this.toString());\n  } catch (e) {\n    return this.toString();\n  }\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'parse'[39m,
       string: [32m'String.prototype.parse()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'titleize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string. Title Cased.'[39m } ],
    description: 
     { full: [32m'<p>Returns a new string in Title Case.</p>\n\n<p><code><pre><br />"title-case".titleize()</p>\n\n<h1>=> "Title Case"</h1>\n\n<p>"title case".titleize()</p>\n\n<h1>=> "Title Case"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Returns a new string in Title Case.</p>'[39m,
       body: [32m'<p><code><pre><br />"title-case".titleize()</p>\n\n<h1>=> "Title Case"</h1>\n\n<p>"title case".titleize()</p>\n\n<h1>=> "Title Case"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.titleize = function() {\n  return this.split(/[- ]/).map(function(word) {\n    return word.capitalize();\n  }).join(\' \');\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'titleize'[39m,
       string: [32m'String.prototype.titleize()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'underscore'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string. Separated by _.'[39m } ],
    description: 
     { full: [32m'<p>Underscore a word, changing camelCased with under_scored.</p>\n\n<p><code><pre><br />"UNDERScore".underscore()</p>\n\n<h1>=> "under_score"</h1>\n\n<p>"UNDER-SCORE".underscore()</p>\n\n<h1>=> "under_score"</h1>\n\n<p>"UnDEr-SCorE".underscore()</p>\n\n<h1>=> "un_d<em>er_s</em>cor_e"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Underscore a word, changing camelCased with under_scored.</p>'[39m,
       body: [32m'<p><code><pre><br />"UNDERScore".underscore()</p>\n\n<h1>=> "under_score"</h1>\n\n<p>"UNDER-SCORE".underscore()</p>\n\n<h1>=> "under_score"</h1>\n\n<p>"UnDEr-SCorE".underscore()</p>\n\n<h1>=> "un_d<em>er_s</em>cor_e"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.underscore = function() {\n  return this.replace(/([A-Z]+)([A-Z][a-z])/g, \'$1_$2\').replace(/([a-z\\d])([A-Z])/g, \'$1_$2\').replace(/-/g, \'_\').toLowerCase();\n};'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'underscore'[39m,
       string: [32m'String.prototype.underscore()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'withoutExtension'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m },
       { type: [32m'returns'[39m,
         string: [32m'{String} A new string without the extension name.'[39m } ],
    description: 
     { full: [32m'<p>Assumes the string is something like a file name and returns the <br />contents of the string without the extension.</p>\n\n<p><code><pre><br />"neat.png".witouthExtension() </p>\n\n<h1>=> "neat"</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>Assumes the string is something like a file name and returns the <br />contents of the string without the extension.</p>'[39m,
       body: [32m'<p><code><pre><br />"neat.png".witouthExtension() </p>\n\n<h1>=> "neat"</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'String.prototype.withoutExtension = function() {\n  return this.replace(/\\.[^\\.]*$/, \'\');\n};\n\nString.prototype.parseHex = function() {\n  var alpha, hexString, i, rgb;\n  hexString = this.replace(/#/, \'\');\n  switch (hexString.length) {\n    case 3:\n    case 4:\n      if (hexString.length === 4) {\n        alpha = (parseInt(hexString.substr(3, 1), 16) * 0x11) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(i, 1), 16) * 0x11);\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n    case 6:\n    case 8:\n      if (hexString.length === 8) {\n        alpha = parseInt(hexString.substr(6, 2), 16) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(2 * i, 2), 16));\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n  }\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       constructor: [32m'String'[39m,
       name: [32m'withoutExtension'[39m,
       string: [32m'String.prototype.withoutExtension()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Boolean#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Boolean#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified Boolean object.</p>\n\n<p><code><em>bool</em>.toString()</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified Boolean object.</p>'[39m,
       body: [32m'<p><code><em>bool</em>.toString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'valueOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Boolean#'[39m } ],
    description: 
     { full: [32m'<p>Returns the primitive value of a Boolean object.</p>\n\n<p><code><em>bool</em>.valueOf()</code></p>'[39m,
       summary: [32m'<p>Returns the primitive value of a Boolean object.</p>'[39m,
       body: [32m'<p><code><em>bool</em>.valueOf()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'fractionDigits'[39m ],
         name: [32m''[39m,
         description: [32m''[39m },
       { type: [32m'An'[39m,
         string: [32m'integer specifying the number of digits after the decimal point. Defaults'[39m },
       { type: [32m'to'[39m,
         string: [32m'as many digits as necessary to specify the number.'[39m },
       { type: [32m'name'[39m, string: [32m'toExponential'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the Number object in exponential notation</p>\n\n<p><code><i>number</i>.toExponential( [<em>fractionDigits</em>] )</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the Number object in exponential notation</p>'[39m,
       body: [32m'<p><code><i>number</i>.toExponential( [<em>fractionDigits</em>] )</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'digits'[39m ],
         name: [32m'The'[39m,
         description: [32m'number of digits to appear after the decimal point; this'[39m },
       { type: [32m'may'[39m,
         string: [32m'be a value between 0 and 20, inclusive, and implementations may optionally'[39m },
       { type: [32m'support'[39m,
         string: [32m'a larger range of values. If this argument is omitted, it is treated as'[39m },
       { type: [32m'0.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'toFixed'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Formats a number using fixed-point notation</p>\n\n<p><code><i>number</i>.toFixed( [<em>digits</em>] )</code></p>'[39m,
       summary: [32m'<p>Formats a number using fixed-point notation</p>'[39m,
       body: [32m'<p><code><i>number</i>.toFixed( [<em>digits</em>] )</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toLocaleString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>number.toLocaleString();</p>'[39m,
       summary: [32m'<p>number.toLocaleString();</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'precision'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer specifying the number of significant digits.'[39m },
       { type: [32m'name'[39m, string: [32m'toPrecision'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the Number object to the specified precision. </p>\n\n<p><code><em>number</em>.toPrecision( [ <em>precision</em> ] )</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the Number object to the specified precision. </p>'[39m,
       body: [32m'<p><code><em>number</em>.toPrecision( [ <em>precision</em> ] )</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'radix'[39m ],
         name: [32m''[39m,
         description: [32m''[39m },
       { type: [32m'An'[39m,
         string: [32m'integer between 2 and 36 specifying the base to use for representing'[39m },
       { type: [32m'numeric'[39m, string: [32m'values.'[39m },
       { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified Number object</p>\n\n<p><code><i>number</i>.toString( [<em>radix</em>] )</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified Number object</p>'[39m,
       body: [32m'<p><code><i>number</i>.toString( [<em>radix</em>] )</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'valueOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Number#'[39m } ],
    description: 
     { full: [32m'<p>Returns the primitive value of a Number object.</p>'[39m,
       summary: [32m'<p>Returns the primitive value of a Number object.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'index'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 1 less than the length of the string.'[39m },
       { type: [32m'name'[39m, string: [32m'charAt'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the specified character from a string.</p>\n\n<p><code><em>string</em>.charAt(<em>index</em>)</code></p>'[39m,
       summary: [32m'<p>Returns the specified character from a string.</p>'[39m,
       body: [32m'<p><code><em>string</em>.charAt(<em>index</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'index'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer greater than 0 and less than the length of the string;'[39m },
       { type: [32m'if'[39m,
         string: [32m'it is not a number, it defaults to 0.'[39m },
       { type: [32m'name'[39m, string: [32m'charCodeAt'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the numeric Unicode value of the character at the given index (except<br />for unicode codepoints > 0x10000).</p>'[39m,
       summary: [32m'<p>Returns the numeric Unicode value of the character at the given index (except<br />for unicode codepoints > 0x10000).</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'string2...stringN'[39m ],
         name: [32m'Strings'[39m,
         description: [32m'to concatenate to this string.'[39m },
       { type: [32m'name'[39m, string: [32m'concat'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Combines the text of two or more strings and returns a new string.</p>\n\n<p><code><em>string</em>.concat(<em>string2</em>, <em>string3</em>[, ..., <em>stringN</em>])</code></p>'[39m,
       summary: [32m'<p>Combines the text of two or more strings and returns a new string.</p>'[39m,
       body: [32m'<p><code><em>string</em>.concat(<em>string2</em>, <em>string3</em>[, ..., <em>stringN</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'searchValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'string representing the value to search for.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'fromIndex'[39m ],
         name: [32m'The'[39m,
         description: [32m'location within the calling string to start the search'[39m },
       { type: [32m'from.'[39m,
         string: [32m'It can be any integer between 0 and the length of the string. The default'[39m },
       { type: [32m'value'[39m, string: [32m'is 0.'[39m },
       { type: [32m'name'[39m, string: [32m'indexOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the index within the calling String object of the first occurrence of<br />the specified value, starting the search at fromIndex,<br />returns -1 if the value is not found.</p>\n\n<p><code><em>string</em>.indexOf(<em>searchValue</em>[, <em>fromIndex</em>]</code></p>'[39m,
       summary: [32m'<p>Returns the index within the calling String object of the first occurrence of<br />the specified value, starting the search at fromIndex,<br />returns -1 if the value is not found.</p>'[39m,
       body: [32m'<p><code><em>string</em>.indexOf(<em>searchValue</em>[, <em>fromIndex</em>]</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'searchValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'string representing the value to search for.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'fromIndex'[39m ],
         name: [32m'The'[39m,
         description: [32m'location within the calling string to start the search'[39m },
       { type: [32m'from,'[39m,
         string: [32m'indexed from left to right. It can be any integer between 0 and the length'[39m },
       { type: [32m'of'[39m,
         string: [32m'the string. The default value is the length of the string.'[39m },
       { type: [32m'name'[39m, string: [32m'lastIndexOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the index within the calling String object of the last occurrence of the<br />specified value, or -1 if not found. The calling string is searched backward,<br />starting at fromIndex.</p>\n\n<p><code><em>string</em>.lastIndexOf(<em>searchValue</em>[, <em>fromIndex</em>])</code></p>'[39m,
       summary: [32m'<p>Returns the index within the calling String object of the last occurrence of the<br />specified value, or -1 if not found. The calling string is searched backward,<br />starting at fromIndex.</p>'[39m,
       body: [32m'<p><code><em>string</em>.lastIndexOf(<em>searchValue</em>[, <em>fromIndex</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'localeCompare'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns a number indicating whether a reference string comes before or after or<br />is the same as the given string in sort order.</p>\n\n<p><code> localeCompare(compareString) </code></p>'[39m,
       summary: [32m'<p>Returns a number indicating whether a reference string comes before or after or<br />is the same as the given string in sort order.</p>'[39m,
       body: [32m'<p><code> localeCompare(compareString) </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'regexp'[39m ],
         name: [32m'A'[39m,
         description: [32m'regular expression object. If a non-RegExp object obj is passed,'[39m },
       { type: [32m'it'[39m,
         string: [32m'is implicitly converted to a RegExp by using new RegExp(obj).'[39m },
       { type: [32m'name'[39m, string: [32m'match'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Used to retrieve the matches when matching a string against a regular<br />expression.</p>\n\n<p><code><em>string</em>.match(<em>regexp</em>)</code></p>'[39m,
       summary: [32m'<p>Used to retrieve the matches when matching a string against a regular<br />expression.</p>'[39m,
       body: [32m'<p><code><em>string</em>.match(<em>regexp</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'quote'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'regexp'[39m ],
         name: [32m'A'[39m,
         description: [32m'RegExp object. The match is replaced by the return value of'[39m },
       { type: [32m'parameter'[39m, string: [32m'#2.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'substr'[39m ],
         name: [32m'A'[39m,
         description: [32m'String that is to be replaced by newSubStr.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'newSubStr'[39m ],
         name: [32m'The'[39m,
         description: [32m'String that replaces the substring received from parameter'[39m },
       { type: [32m'#1.'[39m,
         string: [32m'A number of special replacement patterns are supported; see the "Specifying'[39m },
       { type: [32m'a'[39m,
         string: [32m'string as a parameter" section below.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'function'[39m ],
         name: [32m'A'[39m,
         description: [32m'function to be invoked to create the new substring (to put in'[39m },
       { type: [32m'place'[39m,
         string: [32m'of the substring received from parameter #1). The arguments supplied to'[39m },
       { type: [32m'this'[39m,
         string: [32m'function are described in the "Specifying a function as a parameter"'[39m },
       { type: [32m'section'[39m, string: [32m'below.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'flags'[39m ],
         name: [32m'gimy'[39m,
         description: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'Non-standardThe'[39m,
         string: [32m'use of the flags parameter in the String.replace method is'[39m },
       { type: [32m'non-standard.'[39m,
         string: [32m'For cross-browser compatibility, use a RegExp object with'[39m },
       { type: [32m'corresponding'[39m,
         string: [32m'flags.A string containing any combination of the RegExp flags: g'[39m },
       { type: [32m'global'[39m,
         string: [32m'match i ignore case m match over multiple lines y Non-standard '[39m },
       { type: [32m'sticky'[39m,
         string: [32m'global matchignore casematch over multiple linesNon-standard sticky'[39m },
       { type: [32m'name'[39m, string: [32m'replace'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns a new string with some or all matches of a pattern replaced by a<br />replacement.  The pattern can be a string or a RegExp, and the replacement can<br />be a string or a function to be called for each match.</p>\n\n<p><code><em>str</em>.replace(<em>regexp|substr</em>, <em>newSubStr|function[</em>, </code><code><em>flags]</em>);</code></p>'[39m,
       summary: [32m'<p>Returns a new string with some or all matches of a pattern replaced by a<br />replacement.  The pattern can be a string or a RegExp, and the replacement can<br />be a string or a function to be called for each match.</p>'[39m,
       body: [32m'<p><code><em>str</em>.replace(<em>regexp|substr</em>, <em>newSubStr|function[</em>, </code><code><em>flags]</em>);</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'regexp'[39m ],
         name: [32m'A'[39m,
         description: [32m'regular expression object. If a non-RegExp object obj is'[39m },
       { type: [32m'passed,'[39m,
         string: [32m'it is implicitly converted to a RegExp by using new RegExp(obj).'[39m },
       { type: [32m'name'[39m, string: [32m'search'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Executes the search for a match between a regular expression and this String<br />object.</p>\n\n<p><code><em>string</em>.search(<em>regexp</em>)</code></p>'[39m,
       summary: [32m'<p>Executes the search for a match between a regular expression and this String<br />object.</p>'[39m,
       body: [32m'<p><code><em>string</em>.search(<em>regexp</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'beginSlice'[39m ],
         name: [32m'The'[39m,
         description: [32m'zero-based index at which to begin extraction.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'endSlice'[39m ],
         name: [32m'The'[39m,
         description: [32m'zero-based index at which to end extraction. If omitted,'[39m },
       { type: [32m'slice'[39m,
         string: [32m'extracts to the end of the string.'[39m },
       { type: [32m'name'[39m, string: [32m'slice'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Extracts a section of a string and returns a new string.</p>\n\n<p><code><em>string</em>.slice(<em>beginslice</em>[, <em>endSlice</em>])</code></p>'[39m,
       summary: [32m'<p>Extracts a section of a string and returns a new string.</p>'[39m,
       body: [32m'<p><code><em>string</em>.slice(<em>beginslice</em>[, <em>endSlice</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'separator'[39m ],
         name: [32m'Specifies'[39m,
         description: [32m'the character to use for separating the string. The'[39m },
       { type: [32m'separator'[39m,
         string: [32m'is treated as a string or a regular expression. If separator is'[39m },
       { type: [32m'omitted,'[39m,
         string: [32m'the array returned contains one element consisting of the entire'[39m },
       { type: [32m'string.'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'limit'[39m ],
         name: [32m'Integer'[39m,
         description: [32m'specifying a limit on the number of splits to be found.'[39m },
       { type: [32m'name'[39m, string: [32m'split'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Splits a String object into an array of strings by separating the string into<br />substrings.</p>\n\n<p><code><em>string</em>.split([<em>separator</em>][, <em>limit</em>])</code></p>'[39m,
       summary: [32m'<p>Splits a String object into an array of strings by separating the string into<br />substrings.</p>'[39m,
       body: [32m'<p><code><em>string</em>.split([<em>separator</em>][, <em>limit</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'start'[39m ],
         name: [32m'Location'[39m,
         description: [32m'at which to begin extracting characters.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'length'[39m ],
         name: [32m'The'[39m,
         description: [32m'number of characters to extract.'[39m },
       { type: [32m'name'[39m, string: [32m'substr'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the characters in a string beginning at the specified location through<br />the specified number of characters.</p>\n\n<p><code><em>string</em>.substr(<em>start</em>[, <em>length</em>])</code></p>'[39m,
       summary: [32m'<p>Returns the characters in a string beginning at the specified location through<br />the specified number of characters.</p>'[39m,
       body: [32m'<p><code><em>string</em>.substr(<em>start</em>[, <em>length</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'indexA'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and one less than the length of the string.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'indexB'[39m ],
         name: [32m'(optional)'[39m,
         description: [32m'An integer between 0 and the length of the string.'[39m },
       { type: [32m'name'[39m, string: [32m'substring'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns a subset of a string between one index and another, or through the end<br />of the string.</p>\n\n<p><code><em>string</em>.substring(<em>indexA</em>[, <em>indexB</em>])</code></p>'[39m,
       summary: [32m'<p>Returns a subset of a string between one index and another, or through the end<br />of the string.</p>'[39m,
       body: [32m'<p><code><em>string</em>.substring(<em>indexA</em>[, <em>indexB</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'toLocaleLowerCase'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the calling string value converted to lower case, according to any<br />locale-specific case mappings.</p>\n\n<p><code> toLocaleLowerCase() </code></p>'[39m,
       summary: [32m'<p>Returns the calling string value converted to lower case, according to any<br />locale-specific case mappings.</p>'[39m,
       body: [32m'<p><code> toLocaleLowerCase() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'toLocaleUpperCase'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the calling string value converted to upper case, according to any<br />locale-specific case mappings.</p>\n\n<p><code> toLocaleUpperCase() </code></p>'[39m,
       summary: [32m'<p>Returns the calling string value converted to upper case, according to any<br />locale-specific case mappings.</p>'[39m,
       body: [32m'<p><code> toLocaleUpperCase() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toLowerCase'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the calling string value converted to lowercase.</p>\n\n<p><code><em>string</em>.toLowerCase()</code></p>'[39m,
       summary: [32m'<p>Returns the calling string value converted to lowercase.</p>'[39m,
       body: [32m'<p><code><em>string</em>.toLowerCase()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified object.</p>\n\n<p><code><em>string</em>.toString()</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified object.</p>'[39m,
       body: [32m'<p><code><em>string</em>.toString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toUpperCase'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the calling string value converted to uppercase.</p>\n\n<p><code><em>string</em>.toUpperCase()</code></p>'[39m,
       summary: [32m'<p>Returns the calling string value converted to uppercase.</p>'[39m,
       body: [32m'<p><code><em>string</em>.toUpperCase()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'trim'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Removes whitespace from both ends of the string.</p>\n\n<p><code><em>string</em>.trim()</code></p>'[39m,
       summary: [32m'<p>Removes whitespace from both ends of the string.</p>'[39m,
       body: [32m'<p><code><em>string</em>.trim()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'trimLeft'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'trimRight'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'valueOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Returns the primitive value of a String object.</p>\n\n<p><code><em>string</em>.valueOf()</code></p>'[39m,
       summary: [32m'<p>Returns the primitive value of a String object.</p>'[39m,
       body: [32m'<p><code><em>string</em>.valueOf()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'anchor'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'big'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'blink'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>\n\n<p><code>BLINK</code></p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m'<p><code>BLINK</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'bold'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'fixed'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'fontcolor'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>\n\n<p><code>&lt;FONT COLOR="<i>color</i>"&gt;</code></p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m'<p><code>&lt;FONT COLOR="<i>color</i>"&gt;</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'fontsize'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>\n\n<p><code>&lt;FONT SIZE="<i>size</i>"&gt;</code></p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m'<p><code>&lt;FONT SIZE="<i>size</i>"&gt;</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'italics'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'link'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'small'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'strike'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'sub'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'sup'[39m },
       { type: [32m'methodOf'[39m, string: [32m'String#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'pop'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Removes the last element from an array and returns that element.</p>\n\n<p><code><br /><i>array</i>.pop()<br /></code></p>'[39m,
       summary: [32m'<p>Removes the last element from an array and returns that element.</p>'[39m,
       body: [32m'<p><code><br /><i>array</i>.pop()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'element1'[39m, [32m''[39m ],
         name: [32m'...,'[39m,
         description: [32m'elementN The elements to add to the end of the array.'[39m },
       { type: [32m'name'[39m, string: [32m'push'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Mutates an array by appending the given elements and returning the new length of<br />the array.</p>\n\n<p><code><em>array</em>.push(<em>element1</em>, ..., <em>elementN</em>)</code></p>'[39m,
       summary: [32m'<p>Mutates an array by appending the given elements and returning the new length of<br />the array.</p>'[39m,
       body: [32m'<p><code><em>array</em>.push(<em>element1</em>, ..., <em>elementN</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'reverse'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Reverses an array in place.  The first array element becomes the last and the<br />last becomes the first.</p>\n\n<p><code><em>array</em>.reverse()</code></p>'[39m,
       summary: [32m'<p>Reverses an array in place.  The first array element becomes the last and the<br />last becomes the first.</p>'[39m,
       body: [32m'<p><code><em>array</em>.reverse()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'shift'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Removes the first element from an array and returns that element. This method<br />changes the length of the array.</p>\n\n<p><code><em>array</em>.shift()</code></p>'[39m,
       summary: [32m'<p>Removes the first element from an array and returns that element. This method<br />changes the length of the array.</p>'[39m,
       body: [32m'<p><code><em>array</em>.shift()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'compareFunction'[39m ],
         name: [32m'Specifies'[39m,
         description: [32m'a function that defines the sort order. If'[39m },
       { type: [32m'omitted,'[39m,
         string: [32m'the array is sorted lexicographically (in dictionary order) according'[39m },
       { type: [32m'to'[39m,
         string: [32m'the string conversion of each element.'[39m },
       { type: [32m'name'[39m, string: [32m'sort'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Sorts the elements of an array in place.</p>\n\n<p><code><em>array</em>.sort([<em>compareFunction</em>])</code></p>'[39m,
       summary: [32m'<p>Sorts the elements of an array in place.</p>'[39m,
       body: [32m'<p><code><em>array</em>.sort([<em>compareFunction</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'index'[39m ],
         name: [32m'Index'[39m,
         description: [32m'at which to start changing the array. If negative, will'[39m },
       { type: [32m'begin'[39m,
         string: [32m'that many elements from the end.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'howMany'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer indicating the number of old array elements to'[39m },
       { type: [32m'remove.'[39m,
         string: [32m'If howMany is 0, no elements are removed. In this case, you should'[39m },
       { type: [32m'specify'[39m,
         string: [32m'at least one new element. If no howMany parameter is specified (second'[39m },
       { type: [32m'syntax'[39m,
         string: [32m'above, which is a SpiderMonkey extension), all elements after index are'[39m },
       { type: [32m'removed.'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'element1'[39m, [32m''[39m ],
         name: [32m'...,'[39m,
         description: [32m'elementN The elements to add to the array. If you don\'t'[39m },
       { type: [32m'specify'[39m,
         string: [32m'any elements, splice simply removes elements from the array.'[39m },
       { type: [32m'name'[39m, string: [32m'splice'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Changes the content of an array, adding new elements while removing old<br />elements.</p>\n\n<p><code><em>array</em>.splice(<em>index</em>, <em>howMany</em>[, <em>element1</em>[, ...[, <em>elementN</em>]]])</code></p>'[39m,
       summary: [32m'<p>Changes the content of an array, adding new elements while removing old<br />elements.</p>'[39m,
       body: [32m'<p><code><em>array</em>.splice(<em>index</em>, <em>howMany</em>[, <em>element1</em>[, ...[, <em>elementN</em>]]])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'element1'[39m, [32m''[39m ],
         name: [32m'...,'[39m,
         description: [32m'elementN The elements to add to the front of the array.'[39m },
       { type: [32m'name'[39m, string: [32m'unshift'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Adds one or more elements to the beginning of an array and returns the new<br />length of the array.</p>\n\n<p><code><em>arrayName</em>.unshift(<em>element1</em>, ..., <em>elementN</em>) </code></p>'[39m,
       summary: [32m'<p>Adds one or more elements to the beginning of an array and returns the new<br />length of the array.</p>'[39m,
       body: [32m'<p><code><em>arrayName</em>.unshift(<em>element1</em>, ..., <em>elementN</em>) </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'valueN'[39m ],
         name: [32m'Arrays'[39m,
         description: [32m'and/or values to concatenate to the resulting array.'[39m },
       { type: [32m'name'[39m, string: [32m'concat'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Returns a new array comprised of this array joined with other array(s) and/or<br />value(s).</p>\n\n<p><code><em>array</em>.concat(<em>value1</em>, <em>value2</em>, ..., <em>valueN</em>)</code></p>'[39m,
       summary: [32m'<p>Returns a new array comprised of this array joined with other array(s) and/or<br />value(s).</p>'[39m,
       body: [32m'<p><code><em>array</em>.concat(<em>value1</em>, <em>value2</em>, ..., <em>valueN</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'separator'[39m ],
         name: [32m'Specifies'[39m,
         description: [32m'a string to separate each element of the array. The'[39m },
       { type: [32m'separator'[39m,
         string: [32m'is converted to a string if necessary. If omitted, the array elements'[39m },
       { type: [32m'are'[39m,
         string: [32m'separated with a comma.'[39m },
       { type: [32m'name'[39m, string: [32m'join'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Joins all elements of an array into a string.</p>\n\n<p><code><em>array</em>.join(<em>separator</em>)</code></p>'[39m,
       summary: [32m'<p>Joins all elements of an array into a string.</p>'[39m,
       body: [32m'<p><code><em>array</em>.join(<em>separator</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'begin'[39m ],
         name: [32m'Zero-based'[39m,
         description: [32m'index at which to begin extraction.As a negative index,'[39m },
       { type: [32m'start'[39m,
         string: [32m'indicates an offset from the end of the sequence. slice(-2) extracts the'[39m },
       { type: [32m'second-to-last'[39m,
         string: [32m'element and the last element in the sequence.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'end'[39m ],
         name: [32m'Zero-based'[39m,
         description: [32m'index at which to end extraction. slice extracts up to'[39m },
       { type: [32m'but'[39m,
         string: [32m'not including end.slice(1,4) extracts the second element through the fourth'[39m },
       { type: [32m'element'[39m,
         string: [32m'(elements indexed 1, 2, and 3).As a negative index, end indicates an'[39m },
       { type: [32m'offset'[39m,
         string: [32m'from the end of the sequence. slice(2,-1) extracts the third element'[39m },
       { type: [32m'through'[39m,
         string: [32m'the second-to-last element in the sequence.If end is omitted, slice'[39m },
       { type: [32m'extracts'[39m,
         string: [32m'to the end of the sequence.'[39m },
       { type: [32m'name'[39m, string: [32m'slice'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Returns a one-level deep copy of a portion of an array.</p>\n\n<p><code><em>array</em>.slice(<em>begin</em>[, <em>end</em>])</code></p>'[39m,
       summary: [32m'<p>Returns a one-level deep copy of a portion of an array.</p>'[39m,
       body: [32m'<p><code><em>array</em>.slice(<em>begin</em>[, <em>end</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified array and its elements.</p>\n\n<p><code><em>array</em>.toString()</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified array and its elements.</p>'[39m,
       body: [32m'<p><code><em>array</em>.toString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'searchElement'[39m ],
         name: [32m'fromIndex'[39m,
         description: [32m'Element to locate in the array.The index at'[39m },
       { type: [32m'which'[39m,
         string: [32m'to begin the search. Defaults to 0, i.e. the whole array will be searched.'[39m },
       { type: [32m'If'[39m,
         string: [32m'the index is greater than or equal to the length of the array, -1 is'[39m },
       { type: [32m'returned,'[39m,
         string: [32m'i.e. the array will not be searched. If negative, it is taken as the'[39m },
       { type: [32m'offset'[39m,
         string: [32m'from the end of the array. Note that even when the index is negative, the'[39m },
       { type: [32m'array'[39m,
         string: [32m'is still searched from front to back. If the calculated index is less than'[39m },
       { type: [32m'0,'[39m,
         string: [32m'the whole array will be searched.'[39m },
       { type: [32m'name'[39m, string: [32m'indexOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Returns the first index at which a given element can be found in the array, or<br />-1 if it is not present.</p>\n\n<p><code><em>array</em>.indexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>'[39m,
       summary: [32m'<p>Returns the first index at which a given element can be found in the array, or<br />-1 if it is not present.</p>'[39m,
       body: [32m'<p><code><em>array</em>.indexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'searchElement'[39m ],
         name: [32m'fromIndex'[39m,
         description: [32m'Element to locate in the array.The index at'[39m },
       { type: [32m'which'[39m,
         string: [32m'to start searching backwards. Defaults to the array\'s length, i.e. the'[39m },
       { type: [32m'whole'[39m,
         string: [32m'array will be searched. If the index is greater than or equal to the'[39m },
       { type: [32m'length'[39m,
         string: [32m'of the array, the whole array will be searched. If negative, it is taken'[39m },
       { type: [32m'as'[39m,
         string: [32m'the offset from the end of the array. Note that even when the index is'[39m },
       { type: [32m'negative,'[39m,
         string: [32m'the array is still searched from back to front. If the calculated'[39m },
       { type: [32m'index'[39m,
         string: [32m'is less than 0, -1 is returned, i.e. the array will not be searched.'[39m },
       { type: [32m'name'[39m, string: [32m'lastIndexOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Returns the last index at which a given element can be found in the array, or -1<br />if it is not present. The array is searched backwards, starting at fromIndex.</p>\n\n<p><code><em>array</em>.lastIndexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>'[39m,
       summary: [32m'<p>Returns the last index at which a given element can be found in the array, or -1<br />if it is not present. The array is searched backwards, starting at fromIndex.</p>'[39m,
       body: [32m'<p><code><em>array</em>.lastIndexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callback'[39m ],
         name: [32m'thisObject'[39m,
         description: [32m'Function to test each element of the array.Object to'[39m },
       { type: [32m'use'[39m,
         string: [32m'as this when executing callback.'[39m },
       { type: [32m'name'[39m, string: [32m'filter'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Creates a new array with all elements that pass the test implemented by the<br />provided function.</p>\n\n<p><code><em>array</em>.filter(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m,
       summary: [32m'<p>Creates a new array with all elements that pass the test implemented by the<br />provided function.</p>'[39m,
       body: [32m'<p><code><em>array</em>.filter(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callback'[39m ],
         name: [32m'thisObject'[39m,
         description: [32m'Function to execute for each element.Object to use'[39m },
       { type: [32m'as'[39m,
         string: [32m'this when executing callback.'[39m },
       { type: [32m'name'[39m, string: [32m'forEach'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Executes a provided function once per array element.</p>\n\n<p><code><em>array</em>.forEach(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m,
       summary: [32m'<p>Executes a provided function once per array element.</p>'[39m,
       body: [32m'<p><code><em>array</em>.forEach(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callbackthisObject'[39m ],
         name: [32m'Function'[39m,
         description: [32m'to test for each element.Object to use as'[39m },
       { type: [32m'this'[39m,
         string: [32m'when executing callback.'[39m },
       { type: [32m'name'[39m, string: [32m'every'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Tests whether all elements in the array pass the test implemented by the<br />provided function.</p>\n\n<p><code><em>array</em>.every(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m,
       summary: [32m'<p>Tests whether all elements in the array pass the test implemented by the<br />provided function.</p>'[39m,
       body: [32m'<p><code><em>array</em>.every(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callbackthisObject'[39m ],
         name: [32m'Function'[39m,
         description: [32m'that produces an element of the new Array'[39m },
       { type: [32m'from'[39m,
         string: [32m'an element of the current one.Object to use as this when executing'[39m },
       { type: [32m'callback.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'map'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Creates a new array with the results of calling a provided function on every<br />element in this array.</p>\n\n<p><code><em>array</em>.map(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m,
       summary: [32m'<p>Creates a new array with the results of calling a provided function on every<br />element in this array.</p>'[39m,
       body: [32m'<p><code><em>array</em>.map(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callback'[39m ],
         name: [32m'thisObject'[39m,
         description: [32m'Function to test for each element.Object to use as'[39m },
       { type: [32m'this'[39m,
         string: [32m'when executing callback.'[39m },
       { type: [32m'name'[39m, string: [32m'some'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Tests whether some element in the array passes the test implemented by the<br />provided function.</p>\n\n<p><code><em>array</em>.some(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m,
       summary: [32m'<p>Tests whether some element in the array passes the test implemented by the<br />provided function.</p>'[39m,
       body: [32m'<p><code><em>array</em>.some(<em>callback</em>[, <em>thisObject</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callbackinitialValue'[39m ],
         name: [32m'Function'[39m,
         description: [32m'to execute on each value in the'[39m },
       { type: [32m'array.Object'[39m,
         string: [32m'to use as the first argument to the first call of the callback.'[39m },
       { type: [32m'name'[39m, string: [32m'reduce'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Apply a function against an accumulator and each value of the array (from<br />left-to-right) as to reduce it to a single value.</p>\n\n<p><code><em>array</em>.reduce(<em>callback</em>[, <em>initialValue</em>])</code></p>'[39m,
       summary: [32m'<p>Apply a function against an accumulator and each value of the array (from<br />left-to-right) as to reduce it to a single value.</p>'[39m,
       body: [32m'<p><code><em>array</em>.reduce(<em>callback</em>[, <em>initialValue</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'callback'[39m ],
         name: [32m'initialValue'[39m,
         description: [32m'Function to execute on each value in the'[39m },
       { type: [32m'array.Object'[39m,
         string: [32m'to use as the first argument to the first call of the callback.'[39m },
       { type: [32m'name'[39m, string: [32m'reduceRight'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Array#'[39m } ],
    description: 
     { full: [32m'<p>Apply a function simultaneously against two values of the array (from<br />right-to-left) as to reduce it to a single value.</p>\n\n<p><code><em>array</em>.reduceRight(<em>callback</em>[, <em>initialValue</em>])</code></p>'[39m,
       summary: [32m'<p>Apply a function simultaneously against two values of the array (from<br />right-to-left) as to reduce it to a single value.</p>'[39m,
       body: [32m'<p><code><em>array</em>.reduceRight(<em>callback</em>[, <em>initialValue</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'prop'[39m ],
         name: [32m'The'[39m,
         description: [32m'name of the property to test.'[39m },
       { type: [32m'name'[39m, string: [32m'hasOwnProperty'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Object#'[39m } ],
    description: 
     { full: [32m'<p>Returns a boolean indicating whether the object has the specified property.</p>\n\n<p><code><em>obj</em>.hasOwnProperty(<em>prop</em>)</code></p>'[39m,
       summary: [32m'<p>Returns a boolean indicating whether the object has the specified property.</p>'[39m,
       body: [32m'<p><code><em>obj</em>.hasOwnProperty(<em>prop</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'thisArg'[39m ],
         name: [32m'Determines'[39m,
         description: [32m'the value of this inside fun. If thisArg is null or'[39m },
       { type: [32m'undefined,'[39m,
         string: [32m'this will be the global object. Otherwise, this will be equal to'[39m },
       { type: [32m'Object(thisArg)'[39m,
         string: [32m'(which is thisArg if thisArg is already an object, or a String,'[39m },
       { type: [32m'Boolean,'[39m,
         string: [32m'or Number if thisArg is a primitive value of the corresponding type).'[39m },
       { type: [32m'Therefore,'[39m,
         string: [32m'it is always true that typeof this == "object" when the function'[39m },
       { type: [32m'executes.'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'argsArray'[39m ],
         name: [32m'An'[39m,
         description: [32m'argument array for the object, specifying the arguments'[39m },
       { type: [32m'with'[39m,
         string: [32m'which fun should be called, or null or undefined if no arguments should be'[39m },
       { type: [32m'provided'[39m,
         string: [32m'to the function.'[39m },
       { type: [32m'name'[39m, string: [32m'apply'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m } ],
    description: 
     { full: [32m'<p>Calls a function with a given this value and arguments provided as an array.</p>\n\n<p><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></p>'[39m,
       summary: [32m'<p>Calls a function with a given this value and arguments provided as an array.</p>'[39m,
       body: [32m'<p><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'thisValuearg1'[39m, [32m''[39m ],
         name: [32m'arg2,'[39m,
         description: [32m'... The value to be passed as the this parameter to'[39m },
       { type: [32m'the'[39m,
         string: [32m'target function when the bound function is called. The value is ignored if'[39m },
       { type: [32m'the'[39m,
         string: [32m'bound function is constructed using the new operator.Arguments to prepend to'[39m },
       { type: [32m'arguments'[39m,
         string: [32m'provided to the bound function when invoking the target function.'[39m },
       { type: [32m'name'[39m, string: [32m'bind'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m } ],
    description: 
     { full: [32m'<p>Creates a new function that, when called, itself calls this function in the<br />context of the provided this value, with a given sequence of arguments preceding<br />any provided when the new function was called.</p>\n\n<p><code><em>fun</em>.bind(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>'[39m,
       summary: [32m'<p>Creates a new function that, when called, itself calls this function in the<br />context of the provided this value, with a given sequence of arguments preceding<br />any provided when the new function was called.</p>'[39m,
       body: [32m'<p><code><em>fun</em>.bind(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'thisArg'[39m ],
         name: [32m'Determines'[39m,
         description: [32m'the value of this inside fun. If thisArg is null or'[39m },
       { type: [32m'undefined,'[39m,
         string: [32m'this will be the global object. Otherwise, this will be equal to'[39m },
       { type: [32m'Object(thisArg)'[39m,
         string: [32m'(which is thisArg if thisArg is already an object, or a String,'[39m },
       { type: [32m'Boolean,'[39m,
         string: [32m'or Number if thisArg is a primitive value of the corresponding type).'[39m },
       { type: [32m'Therefore,'[39m,
         string: [32m'it is always true that typeof this == "object" when the function'[39m },
       { type: [32m'executes.'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'arg1'[39m, [32m''[39m ],
         name: [32m'arg2,'[39m,
         description: [32m'... Arguments for the object.'[39m },
       { type: [32m'name'[39m, string: [32m'call'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m } ],
    description: 
     { full: [32m'<p>Calls a function with a given this value and arguments provided individually.</p>\n\n<p><code><em>fun</em>.call(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>'[39m,
       summary: [32m'<p>Calls a function with a given this value and arguments provided individually.</p>'[39m,
       body: [32m'<p><code><em>fun</em>.call(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'indentation'[39m ],
         name: [32m'Non-standard'[39m,
         description: [32m'The amount of spaces to indent the string'[39m },
       { type: [32m'representation'[39m,
         string: [32m'of the source code. If indentation is less than or equal to -1,'[39m },
       { type: [32m'most'[39m,
         string: [32m'unnecessary spaces are removed.'[39m },
       { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Function#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the source code of the function.</p>\n\n<p><code><em>function</em>.toString(<em>indentation</em>)</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the source code of the function.</p>'[39m,
       body: [32m'<p><code><em>function</em>.toString(<em>indentation</em>)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'regexp'[39m ],
         name: [32m'The'[39m,
         description: [32m'name of the regular expression. It can be a variable name or'[39m },
       { type: [32m'a'[39m, string: [32m'literal.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'str'[39m ],
         name: [32m'The'[39m,
         description: [32m'string against which to match the regular expression.'[39m },
       { type: [32m'name'[39m, string: [32m'exec'[39m },
       { type: [32m'methodOf'[39m, string: [32m'RegExp#'[39m } ],
    description: 
     { full: [32m'<p>Executes a search for a match in a specified string. Returns a result array, or<br />null.</p>'[39m,
       summary: [32m'<p>Executes a search for a match in a specified string. Returns a result array, or<br />null.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'regexp'[39m ],
         name: [32m'The'[39m,
         description: [32m'name of the regular expression. It can be a variable name or'[39m },
       { type: [32m'a'[39m, string: [32m'literal.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'str'[39m ],
         name: [32m'The'[39m,
         description: [32m'string against which to match the regular expression.'[39m },
       { type: [32m'name'[39m, string: [32m'test'[39m },
       { type: [32m'methodOf'[39m, string: [32m'RegExp#'[39m } ],
    description: 
     { full: [32m'<p>Executes the search for a match between a regular expression and a specified<br />string. Returns true or false.</p>\n\n<p><code> <em>regexp</em>.test([<em>str</em>]) </code></p>'[39m,
       summary: [32m'<p>Executes the search for a match between a regular expression and a specified<br />string. Returns true or false.</p>'[39m,
       body: [32m'<p><code> <em>regexp</em>.test([<em>str</em>]) </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'RegExp#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'RegExp#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified object.</p>\n\n<p><code><i>regexp</i>.toString()</code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified object.</p>'[39m,
       body: [32m'<p><code><i>regexp</i>.toString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'constructor'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns a reference to the Date function that created the instance\'s prototype.<br />Note that the value of this property is a reference to the function itself, not<br />a string containing the function\'s name.</p>'[39m,
       summary: [32m'<p>Returns a reference to the Date function that created the instance\'s prototype.<br />Note that the value of this property is a reference to the function itself, not<br />a string containing the function\'s name.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getDate'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the day of the month for the specified date according to local time.</p>\n\n<p><code><br />getDate()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the day of the month for the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getDate()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getDay'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the day of the week for the specified date according to local time.</p>\n\n<p><code><br />getDay()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the day of the week for the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getDay()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getFullYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the year of the specified date according to local time.</p>\n\n<p><code><br />getFullYear()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the year of the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getFullYear()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getHours'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the hour for the specified date according to local time.</p>\n\n<p><code><br />getHours()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the hour for the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getHours()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getMilliseconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the milliseconds in the specified date according to local time.</p>\n\n<p><code><br />getMilliseconds()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the milliseconds in the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getMilliseconds()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getMinutes'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the minutes in the specified date according to local time.</p>\n\n<p><code><br />getMinutes()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the minutes in the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getMinutes()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getMonth'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the month in the specified date according to local time.</p>\n\n<p><code><br />getMonth()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the month in the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getMonth()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getSeconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the seconds in the specified date according to local time.</p>\n\n<p><code><br />getSeconds()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the seconds in the specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />getSeconds()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getTime'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the numeric value corresponding to the time for the specified date<br />according to universal time.</p>\n\n<p><code> getTime() </code></p>'[39m,
       summary: [32m'<p>Returns the numeric value corresponding to the time for the specified date<br />according to universal time.</p>'[39m,
       body: [32m'<p><code> getTime() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'getTimezoneOffset'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the time-zone offset from UTC, in minutes, for the current locale.</p>\n\n<p><code> getTimezoneOffset() </code></p>'[39m,
       summary: [32m'<p>Returns the time-zone offset from UTC, in minutes, for the current locale.</p>'[39m,
       body: [32m'<p><code> getTimezoneOffset() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCDate'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the day (date) of the month in the specified date according to universal<br />time.</p>\n\n<p><code><br />getUTCDate()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the day (date) of the month in the specified date according to universal<br />time.</p>'[39m,
       body: [32m'<p><code><br />getUTCDate()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCDay'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the day of the week in the specified date according to universal time.</p>\n\n<p><code><br />getUTCDay()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the day of the week in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCDay()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCFullYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the year in the specified date according to universal time.</p>\n\n<p><code><br />getUTCFullYear()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the year in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCFullYear()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCHours'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the hours in the specified date according to universal time.</p>\n\n<p><code><br />getUTCHours<br /></code></p>'[39m,
       summary: [32m'<p>Returns the hours in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCHours<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'getUTCMilliseconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the milliseconds in the specified date according to universal time.</p>\n\n<p><code><br />getUTCMilliseconds()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the milliseconds in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCMilliseconds()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCMinutes'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the minutes in the specified date according to universal time.</p>\n\n<p><code><br />getUTCMinutes()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the minutes in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCMinutes()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCMonth'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the month of the specified date according to universal time.</p>\n\n<p><code><br />getUTCMonth()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the month of the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCMonth()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getUTCSeconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the seconds in the specified date according to universal time.</p>\n\n<p><code><br />getUTCSeconds()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the seconds in the specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />getUTCSeconds()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'getYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Deprecated</p>'[39m,
       summary: [32m'<p>Deprecated</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer from 1 to 31, representing the day of the month.'[39m },
       { type: [32m'name'[39m, string: [32m'setDate'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the day of the month for a specified date according to local time.</p>\n\n<p><code> setDate(<em>dayValue</em>) </code></p>'[39m,
       summary: [32m'<p>Sets the day of the month for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code> setDate(<em>dayValue</em>) </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'yearValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer specifying the numeric value of the year, for'[39m },
       { type: [32m'example,'[39m, string: [32m'1995.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'monthValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 11 representing the months January'[39m },
       { type: [32m'through'[39m, string: [32m'December.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 1 and 31 representing the day of the'[39m },
       { type: [32m'month.'[39m,
         string: [32m'If you specify the dayValue parameter, you must also specify the'[39m },
       { type: [32m'monthValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setFullYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the full year for a specified date according to local time.</p>\n\n<p><code><br />setFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the full year for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'hoursValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 23, representing the hour. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'minutesValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the minutes. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the seconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the secondsValue parameter, you must also specify the minutesValue.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the msValue parameter, you must also specify the minutesValue and'[39m },
       { type: [32m'secondsValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setHours'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the hours for a specified date according to local time.</p>\n\n<p><code><br />setHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the hours for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'millisecondsValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the'[39m },
       { type: [32m'milliseconds.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setMilliseconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the milliseconds for a specified date according to local time.</p>\n\n<p><code><br />setMilliseconds(<i>millisecondsValue</i>)<br /></code></p>'[39m,
       summary: [32m'<p>Sets the milliseconds for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setMilliseconds(<i>millisecondsValue</i>)<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'minutesValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the minutes. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the seconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the secondsValue parameter, you must also specify the minutesValue.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the msValue parameter, you must also specify the minutesValue and'[39m },
       { type: [32m'secondsValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setMinutes'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the minutes for a specified date according to local time.</p>\n\n<p><code><br />setMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the minutes for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'monthValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 11 (representing the months'[39m },
       { type: [32m'January'[39m,
         string: [32m'through December).'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer from 1 to 31, representing the day of the month.'[39m },
       { type: [32m'name'[39m, string: [32m'setMonth'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Set the month for a specified date according to local time.</p>\n\n<p><code><br />setMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>'[39m,
       summary: [32m'<p>Set the month for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds.'[39m },
       { type: [32m'name'[39m, string: [32m'setSeconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the seconds for a specified date according to local time.</p>\n\n<p><code><br />setSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the seconds for a specified date according to local time.</p>'[39m,
       body: [32m'<p><code><br />setSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'timeValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer representing the number of milliseconds since 1'[39m },
       { type: [32m'January'[39m,
         string: [32m'1970, 00:00:00 UTC.'[39m },
       { type: [32m'name'[39m, string: [32m'setTime'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the Date object to the time represented by a number of milliseconds since<br />January 1, 1970, 00:00:00 UTC.</p>\n\n<p><code><br />setTime(<i>timeValue</i>)<br /></code></p>'[39m,
       summary: [32m'<p>Sets the Date object to the time represented by a number of milliseconds since<br />January 1, 1970, 00:00:00 UTC.</p>'[39m,
       body: [32m'<p><code><br />setTime(<i>timeValue</i>)<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer from 1 to 31, representing the day of the month.'[39m },
       { type: [32m'name'[39m, string: [32m'setUTCDate'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the day of the month for a specified date according to universal time.</p>\n\n<p><code><br />setUTCDate(<i>dayValue</i>)<br /></code></p>'[39m,
       summary: [32m'<p>Sets the day of the month for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCDate(<i>dayValue</i>)<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'yearValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer specifying the numeric value of the year, for'[39m },
       { type: [32m'example,'[39m, string: [32m'1995.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'monthValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 11 representing the months January'[39m },
       { type: [32m'through'[39m, string: [32m'December.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 1 and 31 representing the day of the'[39m },
       { type: [32m'month.'[39m,
         string: [32m'If you specify the dayValue parameter, you must also specify the'[39m },
       { type: [32m'monthValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setUTCFullYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the full year for a specified date according to universal time.</p>\n\n<p><code><br />setUTCFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the full year for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'hoursValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 23, representing the hour. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'minutesValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the minutes. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the seconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the secondsValue parameter, you must also specify the minutesValue.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the msValue parameter, you must also specify the minutesValue and'[39m },
       { type: [32m'secondsValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setUTCHours'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the hour for a specified date according to universal time.</p>\n\n<p><code><br />setUTCHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the hour for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'millisecondsValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the'[39m },
       { type: [32m'milliseconds.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m,
         string: [32m'setUTCMilliseconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the milliseconds for a specified date according to universal time.</p>\n\n<p><code><br />setUTCMilliseconds(<i>millisecondsValue</i>)<br /></code></p>'[39m,
       summary: [32m'<p>Sets the milliseconds for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCMilliseconds(<i>millisecondsValue</i>)<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'minutesValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the minutes. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59, representing the seconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the secondsValue parameter, you must also specify the minutesValue.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds. If'[39m },
       { type: [32m'you'[39m,
         string: [32m'specify the msValue parameter, you must also specify the minutesValue and'[39m },
       { type: [32m'secondsValue.'[39m, string: [32m''[39m },
       { type: [32m'name'[39m, string: [32m'setUTCMinutes'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the minutes for a specified date according to universal time.</p>\n\n<p><code><br />setUTCMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the minutes for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'monthValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 11, representing the months'[39m },
       { type: [32m'January'[39m,
         string: [32m'through December.'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'dayValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer from 1 to 31, representing the day of the month.'[39m },
       { type: [32m'name'[39m, string: [32m'setUTCMonth'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the month for a specified date according to universal time.</p>\n\n<p><code><br />setUTCMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the month for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'param'[39m,
         types: [ [32m'secondsValue'[39m ],
         name: [32m'An'[39m,
         description: [32m'integer between 0 and 59. '[39m },
       { type: [32m'param'[39m,
         types: [ [32m'msValue'[39m ],
         name: [32m'A'[39m,
         description: [32m'number between 0 and 999, representing the milliseconds.'[39m },
       { type: [32m'name'[39m, string: [32m'setUTCSeconds'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Sets the seconds for a specified date according to universal time.</p>\n\n<p><code><br />setUTCSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>'[39m,
       summary: [32m'<p>Sets the seconds for a specified date according to universal time.</p>'[39m,
       body: [32m'<p><code><br />setUTCSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'setYear'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Deprecated</p>'[39m,
       summary: [32m'<p>Deprecated</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toDateString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the date portion of a Date object in human readable form in American<br />English.</p>\n\n<p><code><em>date</em>.toDateString()</code></p>'[39m,
       summary: [32m'<p>Returns the date portion of a Date object in human readable form in American<br />English.</p>'[39m,
       body: [32m'<p><code><em>date</em>.toDateString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toJSON'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns a JSON representation of the Date object.</p>\n\n<p><code><em>date</em>.prototype.toJSON()</code></p>'[39m,
       summary: [32m'<p>Returns a JSON representation of the Date object.</p>'[39m,
       body: [32m'<p><code><em>date</em>.prototype.toJSON()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toGMTString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Deprecated</p>'[39m,
       summary: [32m'<p>Deprecated</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'toLocaleDateString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Converts a date to a string, returning the "date" portion using the operating<br />system\'s locale\'s conventions.</p>\n\n<p><code><br />toLocaleDateString()<br /></code></p>'[39m,
       summary: [32m'<p>Converts a date to a string, returning the "date" portion using the operating<br />system\'s locale\'s conventions.</p>'[39m,
       body: [32m'<p><code><br />toLocaleDateString()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toLocaleFormat'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toLocaleString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Converts a date to a string, using the operating system\'s locale\'s conventions.</p>\n\n<p><code><br />toLocaleString()<br /></code></p>'[39m,
       summary: [32m'<p>Converts a date to a string, using the operating system\'s locale\'s conventions.</p>'[39m,
       body: [32m'<p><code><br />toLocaleString()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'toLocaleTimeString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Converts a date to a string, returning the "time" portion using the current<br />locale\'s conventions.</p>\n\n<p><code> toLocaleTimeString() </code></p>'[39m,
       summary: [32m'<p>Converts a date to a string, returning the "time" portion using the current<br />locale\'s conventions.</p>'[39m,
       body: [32m'<p><code> toLocaleTimeString() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toSource'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Non-standard</p>'[39m,
       summary: [32m'<p>Non-standard</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns a string representing the specified Date object.</p>\n\n<p><code> toString() </code></p>'[39m,
       summary: [32m'<p>Returns a string representing the specified Date object.</p>'[39m,
       body: [32m'<p><code> toString() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toTimeString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the time portion of a Date object in human readable form in American<br />English.</p>\n\n<p><code><em>date</em>.toTimeString()</code></p>'[39m,
       summary: [32m'<p>Returns the time portion of a Date object in human readable form in American<br />English.</p>'[39m,
       body: [32m'<p><code><em>date</em>.toTimeString()</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'toUTCString'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Converts a date to a string, using the universal time convention.</p>\n\n<p><code> toUTCString() </code></p>'[39m,
       summary: [32m'<p>Converts a date to a string, using the universal time convention.</p>'[39m,
       body: [32m'<p><code> toUTCString() </code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'valueOf'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Date#'[39m } ],
    description: 
     { full: [32m'<p>Returns the primitive value of a Date object.</p>\n\n<p><code><br />valueOf()<br /></code></p>'[39m,
       summary: [32m'<p>Returns the primitive value of a Date object.</p>'[39m,
       body: [32m'<p><code><br />valueOf()<br /></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m';'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Math.uuid.js (v1.4)<br /><a href=\'http://www.broofa.com\'>http://www.broofa.com</a><br />mailto:<a href=\'mailto:robert@broofa.com\'>robert@broofa.com</a></p>\n\n<p>Copyright (c) 2010 Robert Kieffer<br />Dual licensed under the MIT and GPL licenses.</p>'[39m,
       summary: [32m'<p>Math.uuid.js (v1.4)<br /><a href=\'http://www.broofa.com\'>http://www.broofa.com</a><br />mailto:<a href=\'mailto:robert@broofa.com\'>robert@broofa.com</a></p>'[39m,
       body: [32m'<p>Copyright (c) 2010 Robert Kieffer<br />Dual licensed under the MIT and GPL licenses.</p>'[39m },
    ignore: [33mtrue[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'uuid'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Math'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'length'[39m ],
         name: [32m'The'[39m,
         description: [32m'desired number of characters'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'radix'[39m ],
         name: [32m'The'[39m,
         description: [32m'number of allowable values for each character.'[39m } ],
    description: 
     { full: [32m'<p>Generate a random uuid.</p>\n\n<p><code><pre><br />   // No arguments  - returns RFC4122, version 4 ID<br />   Math.uuid()<br />=> "92329D39-6F5C-4520-ABFC-AAB64544E172"</p>\n\n<p>// One argument - returns ID of the specified length<br />   Math.uuid(15)     // 15 character ID (default base=62)<br />=> "VcydxgltxrVZSTV"</p>\n\n<p>// Two arguments - returns ID of the specified length, and radix. (Radix must be &lt;= 62)<br />   Math.uuid(8, 2)  // 8 character ID (base=2)<br />=> "01001010"</p>\n\n<p>Math.uuid(8, 10) // 8 character ID (base=10)<br />=> "47473046"</p>\n\n<p>Math.uuid(8, 16) // 8 character ID (base=16)<br />=> "098F4D35"<br /></pre></code></p>'[39m,
       summary: [32m'<p>Generate a random uuid.</p>'[39m,
       body: [32m'<p><code><pre><br />   // No arguments  - returns RFC4122, version 4 ID<br />   Math.uuid()<br />=> "92329D39-6F5C-4520-ABFC-AAB64544E172"</p>\n\n<p>// One argument - returns ID of the specified length<br />   Math.uuid(15)     // 15 character ID (default base=62)<br />=> "VcydxgltxrVZSTV"</p>\n\n<p>// Two arguments - returns ID of the specified length, and radix. (Radix must be &lt;= 62)<br />   Math.uuid(8, 2)  // 8 character ID (base=2)<br />=> "01001010"</p>\n\n<p>Math.uuid(8, 10) // 8 character ID (base=10)<br />=> "47473046"</p>\n\n<p>Math.uuid(8, 16) // 8 character ID (base=16)<br />=> "098F4D35"<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'(function() {\n  // Private array of chars to use\n  var CHARS = \'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\'.split(\'\'); \n\n  Math.uuid = function (len, radix) {\n    var chars = CHARS, uuid = [];\n    radix = radix || chars.length;\n\n    if (len) {\n      // Compact form\n      for (var i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n    } else {\n      // rfc4122, version 4 form\n      var r;\n\n      // rfc4122 requires these characters\n      uuid[8] = uuid[13] = uuid[18] = uuid[23] = \'-\';\n      uuid[14] = \'4\';\n\n      // Fill in random data.  At i==19 set the high bits of clock sequence as\n      // per rfc4122, sec. 4.1.5\n      for (var i = 0; i < 36; i++) {\n        if (!uuid[i]) {\n          r = 0 | Math.random()*16;\n          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n        }\n      }\n    }\n\n    return uuid.join(\'\');\n  };\n\n  // A more performant, but slightly bulkier, RFC4122v4 solution.  We boost performance\n  // by minimizing calls to random()\n  Math.uuidFast = function() {\n    var chars = CHARS, uuid = new Array(36), rnd=0, r;\n    for (var i = 0; i < 36; i++) {\n      if (i==8 || i==13 ||  i==18 || i==23) {\n        uuid[i] = \'-\';\n      } else if (i==14) {\n        uuid[i] = \'4\';\n      } else {\n        if (rnd <= 0x02) rnd = 0x2000000 + (Math.random()*0x1000000)|0;\n        r = rnd & 0xf;\n        rnd = rnd >> 4;\n        uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\n      }\n    }\n    return uuid.join(\'\');\n  };\n\n  // A more compact, but less performant, RFC4122v4 solution:\n  Math.uuidCompact = function() {\n    return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function(c) {\n      var r = Math.random()*16|0, v = c == \'x\' ? r : (r&0x3|0x8);\n      return v.toString(16);\n    }).toUpperCase();\n  };\n})();;\n;\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'see'[39m,
         local: [32m'GameObject'[39m,
         visibility: [32m'GameObject'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'Bounded'[39m, string: [32m'module'[39m },
       { type: [32m'name'[39m, string: [32m'Bounded'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Bounded module is used to provide basic data about the<br />location and dimensions of the including object. This module is included<br />by default in <code>GameObject</code>.</p>\n\n<p><code><pre><br />player = Core<br />  x: 10<br />  y: 50<br />  width: 20<br />  height: 20<br />  other: "stuff"<br />  more: "properties"</p>\n\n<p>player.position()</p>\n\n<h1>=> Uncaught TypeError: Object has no method \'position\'</h1>\n\n<p>player.include(Bounded)</p>\n\n<h1>now player has all the methods provided by this module</h1>\n\n<p>player.position()</p>\n\n<h1>=> {x: 10, y: 50}</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Bounded module is used to provide basic data about the<br />location and dimensions of the including object. This module is included<br />by default in <code>GameObject</code>.</p>'[39m,
       body: [32m'<p><code><pre><br />player = Core<br />  x: 10<br />  y: 50<br />  width: 20<br />  height: 20<br />  other: "stuff"<br />  more: "properties"</p>\n\n<p>player.position()</p>\n\n<h1>=> Uncaught TypeError: Object has no method \'position\'</h1>\n\n<p>player.include(Bounded)</p>\n\n<h1>now player has all the methods provided by this module</h1>\n\n<p>player.position()</p>\n\n<h1>=> {x: 10, y: 50}</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Bounded;\n\nBounded = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    x: 0,\n    y: 0,\n    width: 8,\n    height: 8,\n    collisionMargin: Point(0, 0)\n  });\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The position of this game object. By default it is the top left point.<br />    Redefining the center method will change the relative position.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 50\n  y: 40\n\nplayer.include(Bounded)      \n\nplayer.position()\n# =&gt; {x: 50, y: 40}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name position\n@methodOf Bounded#\n@returns {Point} The position of this object\n</code></pre>'[39m,
       summary: [32m'<p>The position of this game object. By default it is the top left point.<br />    Redefining the center method will change the relative position.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 50\n  y: 40\n\nplayer.include(Bounded)      \n\nplayer.position()\n# =&gt; {x: 50, y: 40}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name position\n@methodOf Bounded#\n@returns {Point} The position of this object\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'position: function(newPosition) {\n      if (newPosition != null) {\n        I.x = newPosition.x;\n        return I.y = newPosition.y;\n      } else {\n        return Point(I.x, I.y);\n      }\n    },\n    changePosition: function(delta) {\n      I.x += delta.x;\n      I.y += delta.y;\n      return self;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Does a check to see if this object is overlapping<br />    with the bounds passed in.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 4\n  y: 6\n  width: 20\n  height: 20\n\nplayer.include(Bounded)  \n\nplayer.collides({x: 5, y: 7, width: 20, height: 20})\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collides\n@methodOf Bounded#\n@returns {Point} The position of this object\n</code></pre>'[39m,
       summary: [32m'<p>Does a check to see if this object is overlapping<br />    with the bounds passed in.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 4\n  y: 6\n  width: 20\n  height: 20\n\nplayer.include(Bounded)  \n\nplayer.collides({x: 5, y: 7, width: 20, height: 20})\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collides\n@methodOf Bounded#\n@returns {Point} The position of this object\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'collides: function(bounds) {\n      return Collision.rectangular(self.bounds(), bounds);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>This returns a modified bounds based on the collision margin.<br />    The area of the bounds is reduced if collision margin is positive<br />    and increased if collision margin is negative.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  collisionMargin: \n    x: -2\n    y: -4\n  x: 50\n  y: 50\n  width: 20\n  height: 20\n\nplayer.include(Bounded)\n\nplayer.collisionBounds()\n# =&gt; {x: 38, y: 36, height: 28, width: 24}\n\nplayer.collisionBounds(10, 10)\n# =&gt; {x: 48, y: 46, height: 28, width: 24}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collisionBounds\n@methodOf Bounded#\n@param {Number} xOffset the amount to shift the x position \n@param {Number} yOffset the amount to shift the y position\n@returns {Object} The collision bounds\n</code></pre>'[39m,
       summary: [32m'<p>This returns a modified bounds based on the collision margin.<br />    The area of the bounds is reduced if collision margin is positive<br />    and increased if collision margin is negative.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  collisionMargin: \n    x: -2\n    y: -4\n  x: 50\n  y: 50\n  width: 20\n  height: 20\n\nplayer.include(Bounded)\n\nplayer.collisionBounds()\n# =&gt; {x: 38, y: 36, height: 28, width: 24}\n\nplayer.collisionBounds(10, 10)\n# =&gt; {x: 48, y: 46, height: 28, width: 24}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collisionBounds\n@methodOf Bounded#\n@param {Number} xOffset the amount to shift the x position \n@param {Number} yOffset the amount to shift the y position\n@returns {Object} The collision bounds\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'collisionBounds: function(xOffset, yOffset) {\n      var bounds;\n      bounds = self.bounds(xOffset, yOffset);\n      bounds.x += I.collisionMargin.x;\n      bounds.y += I.collisionMargin.y;\n      bounds.width -= 2 * I.collisionMargin.x;\n      bounds.height -= 2 * I.collisionMargin.y;\n      return bounds;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The bounds method returns infomation about the location <br />    of the object and its dimensions with optional offsets.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 3\n  y: 6\n  width: 2\n  height: 2\n\nplayer.include(Bounded)\n\nplayer.bounds()\n# =&gt; {x: 3, y: 6, width: 2, height: 2}\n\nplayer.bounds(7, 4)\n# =&gt; {x: 10, y: 10, width: 2, height: 2}   \n&lt;/pre&gt;&lt;/code&gt;\n\n@name bounds\n@methodOf Bounded#\n@param {Number} xOffset the amount to shift the x position \n@param {Number} yOffset the amount to shift the y position\n</code></pre>'[39m,
       summary: [32m'<p>The bounds method returns infomation about the location <br />    of the object and its dimensions with optional offsets.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 3\n  y: 6\n  width: 2\n  height: 2\n\nplayer.include(Bounded)\n\nplayer.bounds()\n# =&gt; {x: 3, y: 6, width: 2, height: 2}\n\nplayer.bounds(7, 4)\n# =&gt; {x: 10, y: 10, width: 2, height: 2}   \n&lt;/pre&gt;&lt;/code&gt;\n\n@name bounds\n@methodOf Bounded#\n@param {Number} xOffset the amount to shift the x position \n@param {Number} yOffset the amount to shift the y position\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'bounds: function(xOffset, yOffset) {\n      var center;\n      center = self.center();\n      return {\n        x: center.x - I.width / 2 + (xOffset || 0),\n        y: center.y - I.height / 2 + (yOffset || 0),\n        width: I.width,\n        height: I.height\n      };\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The centeredBounds method returns infomation about the center<br />    of the object along with the midpoint of the width and height.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 3\n  y: 6\n  width: 2\n  height: 2\n\nplayer.include(Bounded)\n\nplayer.centeredBounds()\n# =&gt; {x: 4, y: 7, xw: 1, yw: 1}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name centeredBounds\n@methodOf Bounded#\n</code></pre>'[39m,
       summary: [32m'<p>The centeredBounds method returns infomation about the center<br />    of the object along with the midpoint of the width and height.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 3\n  y: 6\n  width: 2\n  height: 2\n\nplayer.include(Bounded)\n\nplayer.centeredBounds()\n# =&gt; {x: 4, y: 7, xw: 1, yw: 1}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name centeredBounds\n@methodOf Bounded#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'centeredBounds: function() {\n      var center;\n      center = self.center();\n      return {\n        x: center.x,\n        y: center.y,\n        xw: I.width / 2,\n        yw: I.height / 2\n      };\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The center method returns the {@link Point} that is<br />    the center of the object.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 50\n  y: 40\n  width: 10\n  height: 30\n\nplayer.include(Bounded)  \n\nplayer.center()\n# =&gt; {x: 30, y: 35}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name center\n@methodOf Bounded#\n@returns {Point} The middle of the calling object\n</code></pre>'[39m,
       summary: [32m'<p>The center method returns the {@link Point} that is<br />    the center of the object.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  x: 50\n  y: 40\n  width: 10\n  height: 30\n\nplayer.include(Bounded)  \n\nplayer.center()\n# =&gt; {x: 30, y: 35}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name center\n@methodOf Bounded#\n@returns {Point} The middle of the calling object\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'center: function(newCenter) {\n      return self.position(newCenter);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Return the circular bounds of the object. The circle is<br />    centered at the midpoint of the object.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  radius: 5\n  x: 50\n  y: 50\n  other: "stuff"\n\nplayer.include(Bounded)\n\nplayer.circle()\n# =&gt; {radius: 5, x: 50, y: 50}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name circle\n@methodOf Bounded#\n@returns {Object} An object with a position and a radius\n</code></pre>'[39m,
       summary: [32m'<p>Return the circular bounds of the object. The circle is<br />    centered at the midpoint of the object.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = Core\n  radius: 5\n  x: 50\n  y: 50\n  other: "stuff"\n\nplayer.include(Bounded)\n\nplayer.circle()\n# =&gt; {radius: 5, x: 50, y: 50}\n&lt;/pre&gt;&lt;/code&gt;\n\n@name circle\n@methodOf Bounded#\n@returns {Object} An object with a position and a radius\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'circle: function() {\n      var circle;\n      circle = self.center();\n      circle.radius = I.radius || I.width / 2 || I.height / 2;\n      return circle;\n    }\n  };\n};\n;\nvar Camera;\n\nCamera = function(I) {\n  var currentObject, currentType, focusOn, followTypes, objectFilters, self, transformFilters;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    cameraBounds: Rectangle({\n      x: 0,\n      y: 0,\n      width: App.width,\n      height: App.height\n    }),\n    screen: Rectangle({\n      x: 0,\n      y: 0,\n      width: App.width,\n      height: App.height\n    }),\n    deadzone: Point(0, 0),\n    zoom: 1,\n    transform: Matrix(),\n    scroll: Point(0, 0)\n  });\n  currentType = "centered";\n  currentObject = null;\n  objectFilters = [];\n  transformFilters = [];\n  focusOn = function(object) {\n    var centerOffset, centerRect, deadzone, objectCenter;\n    objectCenter = object.center();\n    centerOffset = objectCenter.subtract(I.screen.width / 2, I.screen.height / 2);\n    deadzone = I.deadzone.scale(1 / (2 * I.zoom));\n    centerRect = Rectangle({\n      x: centerOffset.x - deadzone.x,\n      y: centerOffset.y - deadzone.y,\n      width: 2 * deadzone.x,\n      height: 2 * deadzone.y\n    });\n    return I.scroll = Point(I.scroll.x.clamp(centerRect.left, centerRect.right).clamp(I.cameraBounds.left, I.cameraBounds.right - I.screen.width), I.scroll.y.clamp(centerRect.top, centerRect.bottom).clamp(I.cameraBounds.top, I.cameraBounds.bottom - I.screen.height));\n  };\n  followTypes = {\n    centered: function(object) {\n      I.deadzone = Point(0, 0);\n      return focusOn(object);\n    },\n    topdown: function(object) {\n      var helper;\n      helper = Math.max(I.screen.width, I.screen.height) / 4;\n      I.deadzone = Point(helper, helper);\n      return focusOn(object);\n    },\n    platformer: function(object) {\n      var height, width;\n      width = I.screen.width / 8;\n      height = I.screen.height / 3;\n      I.deadzone = Point(width, height);\n      return focusOn(object);\n    }\n  };\n  self = Core(I).extend({\n    follow: function(object, type) {\n      if (type == null) type = "centered";\n      currentObject = object;\n      currentType = type;\n      return I.scroll = object.center();\n    },\n    objectFilterChain: function(fn) {\n      return objectFilters.push(fn);\n    },\n    transformFilterChain: function(fn) {\n      return transformFilters.push(fn);\n    }\n  });\n  self.attrAccessor("transform", "scroll");\n  self.include(Bindable);\n  self.bind("afterUpdate", function() {\n    if (currentObject) followTypes[currentType](currentObject);\n    return I.transform = Matrix.translate(-I.scroll.x, -I.scroll.y);\n  });\n  self.bind("draw", function(canvas, objects) {\n    return canvas.withTransform(Matrix.translate(I.screen.x, I.screen.y), function(canvas) {\n      var transform;\n      canvas.clip(0, 0, I.screen.width, I.screen.height);\n      objects = objectFilters.pipeline(objects);\n      transform = transformFilters.pipeline(self.transform().copy());\n      canvas.withTransform(transform, function(canvas) {\n        self.trigger("beforeDraw", canvas);\n        return objects.invoke("draw", canvas);\n      });\n      return self.trigger(\'flash\', canvas);\n    });\n  });\n  self.include(Camera.ZSort);\n  self.include(Camera.Zoom);\n  self.include(Camera.Rotate);\n  self.include(Camera.Shake);\n  self.include(Camera.Flash);\n  self.include(Camera.Fade);\n  return self;\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Fade'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Camera'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m },
       { type: [32m'see'[39m,
         local: [32m'Camera.Flash'[39m,
         visibility: [32m'Camera.Flash'[39m } ],
    description: 
     { full: [32m'<p>The <code>Fade</code> module provides convenience methods for accessing common Engine.Flash presets.</p>'[39m,
       summary: [32m'<p>The <code>Fade</code> module provides convenience methods for accessing common Engine.Flash presets.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Camera.Fade = function(I, self) {\n  var configureFade;\n  configureFade = function(duration, color, alpha) {\n    I.flashDuration = duration;\n    I.flashCooldown = duration;\n    I.flashColor = Color(color);\n    return I.flashTargetAlpha = alpha;\n  };\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Camera'[39m,
       name: [32m'Fade'[39m,
       string: [32m'Camera.Fade()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A convenient way to set the flash effect instance variables. This provides a shorthand for fading the screen in <br />    from a given color over a specified duration.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.fadeIn()\n# =&gt; Sets the effect variables to their default state. This will the screen to go from black to transparent over the next 30 frames.\n\nengine.fadeIn(\'blue\', 50)\n# =&gt; This effect will start off blue and fade to transparent over 50 frames.\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name fadeIn\n@methodOf Camera#\n@param {Number} [duration=30] How long the effect lasts\n@param {Color} [color="black"] The color to fade from\n</code></pre>'[39m,
       summary: [32m'<p>A convenient way to set the flash effect instance variables. This provides a shorthand for fading the screen in <br />    from a given color over a specified duration.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.fadeIn()\n# =&gt; Sets the effect variables to their default state. This will the screen to go from black to transparent over the next 30 frames.\n\nengine.fadeIn(\'blue\', 50)\n# =&gt; This effect will start off blue and fade to transparent over 50 frames.\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name fadeIn\n@methodOf Camera#\n@param {Number} [duration=30] How long the effect lasts\n@param {Color} [color="black"] The color to fade from\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'fadeIn: function(duration, color) {\n      if (duration == null) duration = 30;\n      if (color == null) color = \'black\';\n      return configureFade(duration, color, 0);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A convenient way to set the flash effect instance variables. This provides a shorthand for fading <br />    the screen to a given color over a specified duration.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncamera.fadeOut()\n# =&gt; Sets the effect variables to their default state. This will the screen to fade from ransparent to black over the next 30 frames.\n\ncamera.fadeOut(\'blue\', 50)\n# =&gt; This effect will start off transparent and change to blue over 50 frames.\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name fadeOut\n@methodOf Camera#\n@param {Number} [duration=30] How long the effect lasts\n@param {Color} [color="transparent"] The color to fade to\n</code></pre>'[39m,
       summary: [32m'<p>A convenient way to set the flash effect instance variables. This provides a shorthand for fading <br />    the screen to a given color over a specified duration.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncamera.fadeOut()\n# =&gt; Sets the effect variables to their default state. This will the screen to fade from ransparent to black over the next 30 frames.\n\ncamera.fadeOut(\'blue\', 50)\n# =&gt; This effect will start off transparent and change to blue over 50 frames.\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name fadeOut\n@methodOf Camera#\n@param {Number} [duration=30] How long the effect lasts\n@param {Color} [color="transparent"] The color to fade to\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'fadeOut: function(duration, color) {\n      if (duration == null) duration = 30;\n      if (color == null) color = \'transparent\';\n      return configureFade(duration, color, 1);\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Flash'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Camera'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the camera'[39m } ],
    description: 
     { full: [32m'<p>The <code>Flash</code> module allows you to flash a color onscreen and then fade to transparent over a time period. <br />This is nice for lightning type effects or to accentuate major game events.</p>'[39m,
       summary: [32m'<p>The <code>Flash</code> module allows you to flash a color onscreen and then fade to transparent over a time period. <br />This is nice for lightning type effects or to accentuate major game events.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Camera.Flash = function(I, self) {\n  var defaultParams;\n  Object.reverseMerge(I, {\n    flashColor: Color(0, 0, 0, 0),\n    flashDuration: 12,\n    flashCooldown: 0,\n    flashTargetAlpha: 0\n  });\n  defaultParams = {\n    color: \'white\',\n    duration: 12,\n    targetAlpha: 0\n  };\n  self.bind(\'afterUpdate\', function() {\n    if (I.flashCooldown > 0) {\n      I.flashColor.a = I.flashColor.a.approach(I.flashTargetAlpha, 1 / I.flashDuration).clamp(0, 1);\n      if (I.flashColor.a < 0.00001) I.flashColor.a = 0;\n      if (I.flashColor.a > 0.9999) I.flashColor.a = 1;\n      return I.flashCooldown = I.flashCooldown.approach(0, 1);\n    }\n  });\n  self.bind(\'flash\', function(canvas) {\n    return canvas.fill(I.flashColor);\n  });\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Camera'[39m,
       name: [32m'Flash'[39m,
       string: [32m'Camera.Flash()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A convenient way to set the flash effect instance variables. Alternatively, you can modify them by hand, but<br />    using Camera#flash is the suggested approach.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncamera.flash()\n# =&gt; Sets the flash effect variables to their default state. This will cause a white flash that will turn transparent in the next 12 frames.\n\ncamera.flash\n  color: \'green\'\n  duration: 30\n# =&gt; This flash effect will start off green and fade to transparent over 30 frames.\n\ncamera.flash\n  color: Color(255, 0, 0, 0)\n  duration: 20\n  targetAlpha: 1\n# =&gt; This flash effect will start off transparent and move toward red over 20 frames \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name flash\n@methodOf Camera#\n@param {Color} [color="white"] The flash color\n@param {Number} [duration=12] How long the effect lasts\n@param {Number} [targetAlpha=0] The alpha value to fade to. By default, this is set to 0, which fades the color to transparent.\n</code></pre>'[39m,
       summary: [32m'<p>A convenient way to set the flash effect instance variables. Alternatively, you can modify them by hand, but<br />    using Camera#flash is the suggested approach.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncamera.flash()\n# =&gt; Sets the flash effect variables to their default state. This will cause a white flash that will turn transparent in the next 12 frames.\n\ncamera.flash\n  color: \'green\'\n  duration: 30\n# =&gt; This flash effect will start off green and fade to transparent over 30 frames.\n\ncamera.flash\n  color: Color(255, 0, 0, 0)\n  duration: 20\n  targetAlpha: 1\n# =&gt; This flash effect will start off transparent and move toward red over 20 frames \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name flash\n@methodOf Camera#\n@param {Color} [color="white"] The flash color\n@param {Number} [duration=12] How long the effect lasts\n@param {Number} [targetAlpha=0] The alpha value to fade to. By default, this is set to 0, which fades the color to transparent.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'flash: function(options) {\n      var color, duration, targetAlpha;\n      if (options == null) options = {};\n      Object.reverseMerge(options, defaultParams);\n      color = options.color, duration = options.duration, targetAlpha = options.targetAlpha;\n      I.flashColor = Color(color);\n      I.flashTargetAlpha = targetAlpha;\n      I.flashCooldown = duration;\n      I.flashDuration = duration;\n      return self;\n    }\n  };\n};\n;\n\nCamera.Rotate = function(I, self) {\n  Object.reverseMerge(I, {\n    rotation: 0\n  });\n  self.transformFilterChain(function(transform) {\n    return transform.rotate(I.rotation);\n  });\n  self.attrAccessor("rotation");\n  return {\n    rotate: function(amount) {\n      return self.rotation(I.rotation + amount);\n    }\n  };\n};\n;\n\nCamera.Shake = function(I, self) {\n  var defaultParams;\n  Object.reverseMerge(I, {\n    shakeIntensity: 20,\n    shakeCooldown: 0\n  });\n  defaultParams = {\n    duration: 10,\n    intensity: 20\n  };\n  self.bind("afterUpdate", function() {\n    return I.shakeCooldown = I.shakeCooldown.approach(0, 1);\n  });\n  self.transformFilterChain(function(transform) {\n    if (I.shakeCooldown > 0) {\n      transform.tx += signedRand(I.shakeIntensity);\n      transform.ty += signedRand(I.shakeIntensity);\n    }\n    return transform;\n  });\n  return {\n    shake: function(options) {\n      var duration, intensity, _ref;\n      if (options == null) options = {};\n      _ref = Object.reverseMerge(options, defaultParams), duration = _ref.duration, intensity = _ref.intensity;\n      I.shakeCooldown = duration * I.zoom;\n      I.shakeIntensity = intensity * I.zoom;\n      return self;\n    }\n  };\n};\n;\n\nCamera.Zoom = function(I, self) {\n  var clampZoom;\n  Object.reverseMerge(I, {\n    maxZoom: 10,\n    minZoom: 0.1,\n    zoom: 1\n  });\n  self.transformFilterChain(function(transform) {\n    return transform.scale(I.zoom, I.zoom);\n  });\n  clampZoom = function(value) {\n    return value.clamp(I.minZoom, I.maxZoom);\n  };\n  return {\n    zoomIn: function(percentage) {\n      return self.zoom(clampZoom(I.zoom * (1 + percentage)));\n    },\n    zoomOut: function(percentage) {\n      return self.zoom(clampZoom(I.zoom * (1 - percentage)));\n    },\n    zoom: function(value) {\n      if (value != null) {\n        I.zoom = clampZoom(value);\n        return self;\n      } else {\n        return I.zoom;\n      }\n    }\n  };\n};\n;\n\nCamera.ZSort = function(I, self) {\n  Object.reverseMerge(I, {\n    zSort: true\n  });\n  self.objectFilterChain(function(objects) {\n    if (I.zSort) {\n      objects.sort(function(a, b) {\n        return a.I.zIndex - b.I.zIndex;\n      });\n    }\n    return objects;\n  });\n  return {};\n};\n;\n\n(function() {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Use this to handle generic rectangular collisions among game object a-la Flixel.</p>\n\n<p>@name Collidable<br />  @module<br />  @constructor</p>'[39m,
       summary: [32m'<p>Use this to handle generic rectangular collisions among game object a-la Flixel.</p>'[39m,
       body: [32m'<p>@name Collidable<br />  @module<br />  @constructor</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var ANY, CEILING, Collidable, DOWN, FLOOR, LEFT, NONE, RIGHT, UP, WALL, _ref, _ref2;\n  Collidable = function(I, self) {\n    Object.reverseMerge(I, {\n      allowCollisions: ANY,\n      immovable: false,\n      touching: NONE,\n      velocity: Point(0, 0),\n      mass: 1,\n      elasticity: 0\n    });\n    self.attrAccessor("immovable", "velocity", "mass", "elasticity");\n    return {\n      solid: function(newSolid) {\n        if (newSolid != null) {\n          if (newSolid) {\n            return I.allowCollisions = ANY;\n          } else {\n            return I.allowCollisions = NONE;\n          }\n        } else {\n          return I.allowCollisions;\n        }\n      }\n    };\n  };\n  (typeof exports !== "undefined" && exports !== null ? exports : this)["Collidable"] = Collidable;'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: { full: [32m''[39m, summary: [32m''[39m, body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'_ref = Object.extend(Collidable, {\n    NONE: 0x0000,\n    LEFT: 0x0001,\n    RIGHT: 0x0010,\n    UP: 0x0100,\n    DOWN: 0x1000\n  }), NONE = _ref.NONE, LEFT = _ref.LEFT, RIGHT = _ref.RIGHT, UP = _ref.UP, DOWN = _ref.DOWN;\n  _ref2 = Object.extend(Collidable, {\n    FLOOR: DOWN,\n    WALL: LEFT | RIGHT,\n    CEILING: UP,\n    ANY: LEFT | RIGHT | UP | DOWN\n  }), ANY = _ref2.ANY, FLOOR = _ref2.FLOOR, WALL = _ref2.WALL, CEILING = _ref2.CEILING;\n  return Object.extend(Collidable, {\n    separate: function(a, b) {\n      var aBounds, aMass, aVelocity, average, bBounds, bMass, bVelocity, deltaVelocity, normal, overlap, pushA, pushB, relativeVelocity, totalMass;\n      if (a.immovable() && b.immovable()) return;\n      aBounds = a.bounds();\n      bBounds = b.bounds();\n      aVelocity = a.velocity();\n      bVelocity = b.velocity();\n      deltaVelocity = aVelocity.subtract(bVelocity);\n      overlap = Point(0, 0);\n      if (Collision.rectangular(aBounds, bBounds)) {\n        if (deltaVelocity.x > 0) {\n          overlap.x = aBounds.x + aBounds.width - bBounds.x;\n          if (!(a.I.allowCollisions & RIGHT) || !(b.I.allowCollisions & LEFT)) {\n            overlap.x = 0;\n          } else {\n            a.I.touching |= RIGHT;\n            b.I.touching |= LEFT;\n          }\n        } else if (deltaVelocity.x < 0) {\n          overlap.x = aBounds.x - bBounds.width - bBounds.x;\n          if (!(a.I.allowCollisions & LEFT) || !(b.I.allowCollisions & RIGHT)) {\n            overlap.x = 0;\n          } else {\n            a.I.touching |= LEFT;\n            b.I.touching |= RIGHT;\n          }\n        }\n        if (deltaVelocity.y > 0) {\n          overlap.y = aBounds.y + aBounds.height - bBounds.y;\n          if (!(a.I.allowCollisions & DOWN) || !(b.I.allowCollisions & UP)) {\n            overlap.y = 0;\n          } else {\n            a.I.touching |= DOWN;\n            b.I.touching |= UP;\n          }\n        } else if (deltaVelocity.y < 0) {\n          overlap.y = aBounds.y - bBounds.height - bBounds.y;\n          if (!(a.I.allowCollisions & UP) || !(b.I.allowCollisions & DOWN)) {\n            overlap.y = 0;\n          } else {\n            a.I.touching |= UP;\n            b.I.touching |= DOWN;\n          }\n        }\n      }\n      if (!overlap.equal(Point.ZERO)) {\n        if (!a.immovable() && !b.immovable()) {\n          a.changePosition(overlap.scale(-0.5));\n          b.changePosition(overlap.scale(+0.5));\n          relativeVelocity = aVelocity.subtract(bVelocity);\n          aMass = a.mass();\n          bMass = b.mass();\n          totalMass = bMass + aMass;\n          normal = overlap.norm();\n          pushA = normal.scale(-2 * (relativeVelocity.dot(normal) * (bMass / totalMass)));\n          pushB = normal.scale(+2 * (relativeVelocity.dot(normal) * (aMass / totalMass)));\n          average = pushA.add(pushB).scale(0.5);\n          pushA.subtract$(average).scale(a.elasticity());\n          pushB.subtract$(average).scale(b.elasticity());\n          a.I.velocity = average.add(pushA);\n          b.I.velocity = average.add(pushB);\n        } else if (!a.immovable()) {\n          a.changePosition(overlap.scale(-1));\n          a.I.velocity = bVelocity.subtract(aVelocity.scale(a.elasticity()));\n        } else if (!b.immovable()) {\n          b.changePosition(overlap);\n          b.I.velocity = aVelocity.subtract(bVelocity.scale(b.elasticity()));\n        }\n        return true;\n      }\n    }\n  });\n})();\n;\n\n(function() {\n  var Collision, collides;\n  collides = function(a, b) {\n    return Collision.rectangular(a.bounds(), b.bounds());\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Collision holds many useful class methods for checking geometric overlap of various objects.</p>\n\n<p>@name Collision<br />  @namespace</p>'[39m,
       summary: [32m'<p>Collision holds many useful class methods for checking geometric overlap of various objects.</p>'[39m,
       body: [32m'<p>@name Collision<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Collision = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Collision holds many useful class methods for checking geometric overlap of various objects.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = engine.add\n  class: "Player"\n  x: 0\n  y: 0\n  width: 10\n  height: 10\n\nenemy = engine.add\n  class: "Enemy"\n  x: 5\n  y: 5\n  width: 10\n  height: 10\n\nenemy2 = engine.add\n  class: "Enemy"\n  x: -5\n  y: -5\n  width: 10\n  height: 10\n\nCollision.collide(player, enemy, (p, e) -&gt; ...)\n# =&gt; callback is called once\n\nCollision.collide(player, [enemy, enemy2], (p, e) -&gt; ...)\n# =&gt; callback is called twice\n\nCollision.collide("Player", "Enemy", (p, e) -&gt; ...)\n# =&gt; callback is also called twice\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collide\n@methodOf Collision\n@param {Object|Array|String} groupA An object or set of objects to check collisions with\n@param {Object|Array|String} groupB An object or set of objects to check collisions with\n@param {Function} callback The callback to call when an object of groupA collides\nwith an object of groupB: (a, b) -&gt;\n@param {Function} [detectionMethod] An optional detection method to determine when two \nobjects are colliding.\n</code></pre>'[39m,
       summary: [32m'<p>Collision holds many useful class methods for checking geometric overlap of various objects.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = engine.add\n  class: "Player"\n  x: 0\n  y: 0\n  width: 10\n  height: 10\n\nenemy = engine.add\n  class: "Enemy"\n  x: 5\n  y: 5\n  width: 10\n  height: 10\n\nenemy2 = engine.add\n  class: "Enemy"\n  x: -5\n  y: -5\n  width: 10\n  height: 10\n\nCollision.collide(player, enemy, (p, e) -&gt; ...)\n# =&gt; callback is called once\n\nCollision.collide(player, [enemy, enemy2], (p, e) -&gt; ...)\n# =&gt; callback is called twice\n\nCollision.collide("Player", "Enemy", (p, e) -&gt; ...)\n# =&gt; callback is also called twice\n&lt;/pre&gt;&lt;/code&gt;\n\n@name collide\n@methodOf Collision\n@param {Object|Array|String} groupA An object or set of objects to check collisions with\n@param {Object|Array|String} groupB An object or set of objects to check collisions with\n@param {Function} callback The callback to call when an object of groupA collides\nwith an object of groupB: (a, b) -&gt;\n@param {Function} [detectionMethod] An optional detection method to determine when two \nobjects are colliding.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'collide: function(groupA, groupB, callback, detectionMethod) {\n      if (detectionMethod == null) detectionMethod = collides;\n      if (Object.isString(groupA)) {\n        groupA = engine.find(groupA);\n      } else {\n        groupA = [].concat(groupA);\n      }\n      if (Object.isString(groupB)) {\n        groupB = engine.find(groupB);\n      } else {\n        groupB = [].concat(groupB);\n      }\n      return groupA.each(function(a) {\n        return groupB.each(function(b) {\n          if (detectionMethod(a, b)) return callback(a, b);\n        });\n      });\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Takes two bounds objects and returns true if they collide (overlap), false otherwise.<br />    Bounds objects have x, y, width and height properties.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject\n  x: 0\n  y: 0\n  width: 10\n  height: 10\n\nenemy = GameObject\n  x: 5\n  y: 5\n  width: 10\n  height: 10\n\nCollision.rectangular(player, enemy)\n# =&gt; true\n\nCollision.rectangular(player, {x: 50, y: 40, width: 30, height: 30})\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rectangular\n@methodOf Collision\n@param {Object} a The first rectangle\n@param {Object} b The second rectangle\n@returns {Boolean} true if the rectangles overlap, false otherwise\n</code></pre>'[39m,
       summary: [32m'<p>Takes two bounds objects and returns true if they collide (overlap), false otherwise.<br />    Bounds objects have x, y, width and height properties.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject\n  x: 0\n  y: 0\n  width: 10\n  height: 10\n\nenemy = GameObject\n  x: 5\n  y: 5\n  width: 10\n  height: 10\n\nCollision.rectangular(player, enemy)\n# =&gt; true\n\nCollision.rectangular(player, {x: 50, y: 40, width: 30, height: 30})\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rectangular\n@methodOf Collision\n@param {Object} a The first rectangle\n@param {Object} b The second rectangle\n@returns {Boolean} true if the rectangles overlap, false otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'rectangular: function(a, b) {\n      return a.x < b.x + b.width && a.x + a.width > b.x && a.y < b.y + b.height && a.y + a.height > b.y;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Takes two circle objects and returns true if they collide (overlap), false otherwise.<br />    Circle objects have x, y, and radius.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject\n  x: 5\n  y: 5\n  radius: 10\n\nenemy = GameObject\n  x: 10\n  y: 10\n  radius: 10\n\nfarEnemy = GameObject\n  x: 500\n  y: 500\n  radius: 30\n\nCollision.circular(player, enemy)\n# =&gt; true\n\nCollision.circular(player, farEnemy)\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name circular\n@methodOf Collision\n@param {Object} a The first circle\n@param {Object} b The second circle\n@returns {Boolean} true is the circles overlap, false otherwise\n</code></pre>'[39m,
       summary: [32m'<p>Takes two circle objects and returns true if they collide (overlap), false otherwise.<br />    Circle objects have x, y, and radius.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject\n  x: 5\n  y: 5\n  radius: 10\n\nenemy = GameObject\n  x: 10\n  y: 10\n  radius: 10\n\nfarEnemy = GameObject\n  x: 500\n  y: 500\n  radius: 30\n\nCollision.circular(player, enemy)\n# =&gt; true\n\nCollision.circular(player, farEnemy)\n# =&gt; false\n&lt;/pre&gt;&lt;/code&gt;\n\n@name circular\n@methodOf Collision\n@param {Object} a The first circle\n@param {Object} b The second circle\n@returns {Boolean} true is the circles overlap, false otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'circular: function(a, b) {\n      var dx, dy, r;\n      r = a.radius + b.radius;\n      dx = b.x - a.x;\n      dy = b.y - a.y;\n      return r * r >= dx * dx + dy * dy;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Detects whether a line intersects a circle.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncircle = engine.add\n  class: "circle"\n  x: 50\n  y: 50\n  radius: 10\n\nCollision.rayCircle(Point(0, 0), Point(1, 0), circle)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rayCircle\n@methodOf Collision\n@param {Point} source The starting position\n@param {Point} direction A vector from the point\n@param {Object} target The circle \n@returns {Boolean} true if the line intersects the circle, false otherwise\n</code></pre>'[39m,
       summary: [32m'<p>Detects whether a line intersects a circle.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncircle = engine.add\n  class: "circle"\n  x: 50\n  y: 50\n  radius: 10\n\nCollision.rayCircle(Point(0, 0), Point(1, 0), circle)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rayCircle\n@methodOf Collision\n@param {Point} source The starting position\n@param {Point} direction A vector from the point\n@param {Object} target The circle \n@returns {Boolean} true if the line intersects the circle, false otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'rayCircle: function(source, direction, target) {\n      var dt, hit, intersection, intersectionToTarget, intersectionToTargetLength, laserToTarget, projection, projectionLength, radius;\n      radius = target.radius();\n      target = target.position();\n      laserToTarget = target.subtract(source);\n      projectionLength = direction.dot(laserToTarget);\n      if (projectionLength < 0) return false;\n      projection = direction.scale(projectionLength);\n      intersection = source.add(projection);\n      intersectionToTarget = target.subtract(intersection);\n      intersectionToTargetLength = intersectionToTarget.length();\n      if (intersectionToTargetLength < radius) hit = true;\n      if (hit) {\n        dt = Math.sqrt(radius * radius - intersectionToTargetLength * intersectionToTargetLength);\n        return hit = direction.scale(projectionLength - dt).add(source);\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Detects whether a line intersects a rectangle.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nrect = engine.add\n  class: "circle"\n  x: 50\n  y: 50\n  width: 20\n  height: 20\n\nCollision.rayRectangle(Point(0, 0), Point(1, 0), rect)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rayRectangle\n@methodOf Collision\n@param {Point} source The starting position\n@param {Point} direction A vector from the point\n@param {Object} target The rectangle\n@returns {Boolean} true if the line intersects the rectangle, false otherwise\n</code></pre>'[39m,
       summary: [32m'<p>Detects whether a line intersects a rectangle.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nrect = engine.add\n  class: "circle"\n  x: 50\n  y: 50\n  width: 20\n  height: 20\n\nCollision.rayRectangle(Point(0, 0), Point(1, 0), rect)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name rayRectangle\n@methodOf Collision\n@param {Point} source The starting position\n@param {Point} direction A vector from the point\n@param {Object} target The rectangle\n@returns {Boolean} true if the line intersects the rectangle, false otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'rayRectangle: function(source, direction, target) {\n      var areaPQ0, areaPQ1, hit, p0, p1, t, tX, tY, xval, xw, yval, yw, _ref, _ref2;\n      if (!((target.xw != null) && (target.yw != null))) {\n        if ((target.width != null) && (target.height != null)) {\n          xw = target.width / 2;\n          yw = target.height / 2;\n          return Collision.rayRectangle(source, direction, {\n            x: target.x + xw,\n            y: target.y + yw,\n            xw: xw,\n            yw: yw\n          });\n        } else {\n          error("Bounds object isn\'t a rectangle");\n          return;\n        }\n      }\n      xw = target.xw;\n      yw = target.yw;\n      if (source.x < target.x) {\n        xval = target.x - xw;\n      } else {\n        xval = target.x + xw;\n      }\n      if (source.y < target.y) {\n        yval = target.y - yw;\n      } else {\n        yval = target.y + yw;\n      }\n      if (direction.x === 0) {\n        p0 = Point(target.x - xw, yval);\n        p1 = Point(target.x + xw, yval);\n        t = (yval - source.y) / direction.y;\n      } else if (direction.y === 0) {\n        p0 = Point(xval, target.y - yw);\n        p1 = Point(xval, target.y + yw);\n        t = (xval - source.x) / direction.x;\n      } else {\n        tX = (xval - source.x) / direction.x;\n        tY = (yval - source.y) / direction.y;\n        if ((tX < tY || ((-xw < (_ref = source.x - target.x) && _ref < xw))) && !((-yw < (_ref2 = source.y - target.y) && _ref2 < yw))) {\n          p0 = Point(target.x - xw, yval);\n          p1 = Point(target.x + xw, yval);\n          t = tY;\n        } else {\n          p0 = Point(xval, target.y - yw);\n          p1 = Point(xval, target.y + yw);\n          t = tX;\n        }\n      }\n      if (t > 0) {\n        areaPQ0 = direction.cross(p0.subtract(source));\n        areaPQ1 = direction.cross(p1.subtract(source));\n        if (areaPQ0 * areaPQ1 < 0) return hit = direction.scale(t).add(source);\n      }\n    }\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Collision"] = Collision;\n})();\n;\nvar __slice = Array.prototype.slice;\n\n(function() {\n  var Color, channelize, hslParser, hslToRgb, hsvToRgb, parseHSL, parseRGB, rgbParser;\n  rgbParser = /^rgba?\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),?\\s*(\\d?\\.?\\d*)?\\)$/;\n  hslParser = /^hsla?\\((\\d{1,3}),\\s*(\\d?\\.?\\d*),\\s*(\\d?\\.?\\d*),?\\s*(\\d?\\.?\\d*)?\\)$/;\n  parseRGB = function(colorString) {\n    var channel, channels, parsedColor;\n    if (!(channels = rgbParser.exec(colorString))) return;\n    parsedColor = (function() {\n      var _i, _len, _ref, _results;\n      _ref = channels.slice(1, 5);\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        channel = _ref[_i];\n        _results.push(parseFloat(channel));\n      }\n      return _results;\n    })();\n    if (isNaN(parsedColor[3])) parsedColor[3] = 1;\n    return parsedColor;\n  };\n  parseHSL = function(colorString) {\n    var channel, channels, parsedColor;\n    if (!(channels = hslParser.exec(colorString))) return;\n    parsedColor = (function() {\n      var _i, _len, _ref, _results;\n      _ref = channels.slice(1, 5);\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        channel = _ref[_i];\n        _results.push(parseFloat(channel));\n      }\n      return _results;\n    })();\n    if (isNaN(parsedColor[3])) parsedColor[3] = 1;\n    return hslToRgb(parsedColor);\n  };\n  hsvToRgb = function(hsv) {\n    var a, b, f, g, h, i, p, q, r, rgb, s, t, v;\n    r = g = b = null;\n    h = hsv[0], s = hsv[1], v = hsv[2], a = hsv[3];\n    if (a == null) a = 1;\n    i = (h / 60).floor();\n    f = h / 60 - i;\n    p = v * (1 - s);\n    q = v * (1 - f * s);\n    t = v * (1 - (1 - f) * s);\n    switch (i % 6) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n    }\n    rgb = [(r * 255).round(), (g * 255).round(), (b * 255).round()];\n    return rgb.concat(a);\n  };\n  hslToRgb = function(hsl) {\n    var a, b, channel, g, h, hueToRgb, l, p, q, r, rgbMap, s;\n    h = hsl[0], s = hsl[1], l = hsl[2], a = hsl[3];\n    h = h % 360;\n    if (a == null) a = 1;\n    r = g = b = null;\n    hueToRgb = function(p, q, hue) {\n      hue = hue.mod(360);\n      if (hue < 60) return p + (q - p) * (hue / 60);\n      if (hue < 180) return q;\n      if (hue < 240) return p + (q - p) * ((240 - hue) / 60);\n      return p;\n    };\n    if (s === 0) {\n      r = g = b = l;\n    } else {\n      q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n      p = 2 * l - q;\n      r = hueToRgb(p, q, h + 120);\n      g = hueToRgb(p, q, h);\n      b = hueToRgb(p, q, h - 120);\n    }\n    rgbMap = (function() {\n      var _i, _len, _ref, _results;\n      _ref = [r, g, b];\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        channel = _ref[_i];\n        _results.push((channel * 255).round());\n      }\n      return _results;\n    })();\n    return rgbMap.concat(a);\n  };\n  channelize = function(color, alpha) {\n    var channel, result;\n    if (color.channels != null) return color.channels();\n    if (Object.isArray(color)) {\n      if (alpha != null) {\n        alpha = parseFloat(alpha);\n      } else if (color[3] != null) {\n        alpha = parseFloat(color[3]);\n      } else {\n        alpha = 1;\n      }\n      result = ((function() {\n        var _i, _len, _ref, _results;\n        _ref = color.slice(0, 3);\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          channel = _ref[_i];\n          _results.push(parseFloat(channel));\n        }\n        return _results;\n      })()).concat(alpha);\n    } else {\n      result = (typeof Color.lookup === "function" ? Color.lookup(color) : void 0) || color.parseHex() || parseRGB(color) || parseHSL(color);\n      if (alpha != null) result[3] = parseFloat(alpha);\n    }\n    return result;\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Create a new color. The constructor is very flexible. It accepts individual r, g, b, a values,<br />  arrays of r, g, b values, hex strings, rgb strings, hsl strings, other Color objects, <br />  and even the named colors from the xkcd survey: <a href=\'http://blog.xkcd.com/2010/05/03/color-survey-results/\'>http://blog.xkcd.com/2010/05/03/color-survey-results/</a>. <br />  If no arguments are given, defaults to transparent.</p>\n\n<p><code class="run"><pre><br />  individualRgb = Color(23, 56, 49, 0.4)</p>\n\n<p>arrayRgb = Color([59, 100, 230])</p>\n\n<p>hex = Color(\'#ff0000\')</p>\n\n<p>rgb = Color(\'rgb(0, 255, 0)\')</p>\n\n<p>hsl = Color(\'hsl(180, 1, 0.5)\')</p>\n\n<p>anotherColor = Color(\'blue\')</p>\n\n<p>Color(anotherColor)<br />  # => a new color with the same r, g, b, and alpha values as <code>anotherColor</code></p>\n\n<p># You have access to all sorts of weird colors.<br />  # We give you all the named colors the browser recognizes<br />  # and the ones from this survey <br />  # <a href=\'http://blog.xkcd.com/2010/05/03/color-survey-results/\'>http://blog.xkcd.com/2010/05/03/color-survey-results/</a><br />  namedBrown = Color(\'Fuzzy Wuzzy Brown\')</p>\n\n<p># Uutput color in Hex format <br />  namedBrown.toHex()<br />  # => \'#c45655\'</p>\n\n<p># Default behavior<br />  transparent = Color()</p>\n\n<p>transparent.toString()<br />  # => \'rgba(0, 0, 0, 0)\' </p>\n\n<p># let\'s print out the colors on a canvas to see what they look like<br />  canvas.font(\'14px Helvetica\')<br />  for color, index in [\'individualRgb\', \'arrayRgb\', \'hex\', \'rgb\', \'hsl\', \'anotherColor\', \'namedBrown\']<br />    canvas.centerText<br />      color: eval(color)<br />      text: color<br />      y: 20 * (index + 1) <br /><br />  </pre></code></p>\n\n<p>@name Color<br />  @param {Array|Number|String|Color} args... An Array, r, g, b values, <br />  a sequence of numbers defining r, g, b values, a hex or hsl string, another Color object, or a named color<br />  @constructor</p>'[39m,
       summary: [32m'<p>Create a new color. The constructor is very flexible. It accepts individual r, g, b, a values,<br />  arrays of r, g, b values, hex strings, rgb strings, hsl strings, other Color objects, <br />  and even the named colors from the xkcd survey: <a href=\'http://blog.xkcd.com/2010/05/03/color-survey-results/\'>http://blog.xkcd.com/2010/05/03/color-survey-results/</a>. <br />  If no arguments are given, defaults to transparent.</p>'[39m,
       body: [32m'<p><code class="run"><pre><br />  individualRgb = Color(23, 56, 49, 0.4)</p>\n\n<p>arrayRgb = Color([59, 100, 230])</p>\n\n<p>hex = Color(\'#ff0000\')</p>\n\n<p>rgb = Color(\'rgb(0, 255, 0)\')</p>\n\n<p>hsl = Color(\'hsl(180, 1, 0.5)\')</p>\n\n<p>anotherColor = Color(\'blue\')</p>\n\n<p>Color(anotherColor)<br />  # => a new color with the same r, g, b, and alpha values as <code>anotherColor</code></p>\n\n<p># You have access to all sorts of weird colors.<br />  # We give you all the named colors the browser recognizes<br />  # and the ones from this survey <br />  # <a href=\'http://blog.xkcd.com/2010/05/03/color-survey-results/\'>http://blog.xkcd.com/2010/05/03/color-survey-results/</a><br />  namedBrown = Color(\'Fuzzy Wuzzy Brown\')</p>\n\n<p># Uutput color in Hex format <br />  namedBrown.toHex()<br />  # => \'#c45655\'</p>\n\n<p># Default behavior<br />  transparent = Color()</p>\n\n<p>transparent.toString()<br />  # => \'rgba(0, 0, 0, 0)\' </p>\n\n<p># let\'s print out the colors on a canvas to see what they look like<br />  canvas.font(\'14px Helvetica\')<br />  for color, index in [\'individualRgb\', \'arrayRgb\', \'hex\', \'rgb\', \'hsl\', \'anotherColor\', \'namedBrown\']<br />    canvas.centerText<br />      color: eval(color)<br />      text: color<br />      y: 20 * (index + 1) <br /><br />  </pre></code></p>\n\n<p>@name Color<br />  @param {Array|Number|String|Color} args... An Array, r, g, b values, <br />  a sequence of numbers defining r, g, b values, a hex or hsl string, another Color object, or a named color<br />  @constructor</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Color = function() {\n    var args, parsedColor;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    parsedColor = (function() {\n      switch (args.length) {\n        case 0:\n          return [0, 0, 0, 0];\n        case 1:\n          return channelize(args.first());\n        case 2:\n          return channelize(args.first(), args.last());\n        default:\n          return channelize(args);\n      }\n    })();\n    if (!parsedColor) throw "" + (args.join(\',\')) + " is an unknown color";\n    return {\n      __proto__: Color.prototype,\n      r: parsedColor[0].round(),\n      g: parsedColor[1].round(),\n      b: parsedColor[2].round(),\n      a: parsedColor[3]\n    };\n  };\n  Color.prototype = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the rgba color channels in an array.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ntransparent =  Color()\n\ntransparent.channels()\n# =&gt; [0, 0, 0, 0]\n\nred = Color("#FF0000")\n\nred.channels()\n# =&gt; [255, 0, 0, 1]\n\nrgb = Color(200, 34, 2)\n\nrgb.channels()\n# =&gt; [200, 34, 2, 1]\n&lt;/pre&gt;&lt;/code&gt;\n\n@name channels\n@methodOf Color#\n\n@returns {Array} Array of r, g, b, and alpha values of the color\n</code></pre>'[39m,
       summary: [32m'<p>Returns the rgba color channels in an array.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ntransparent =  Color()\n\ntransparent.channels()\n# =&gt; [0, 0, 0, 0]\n\nred = Color("#FF0000")\n\nred.channels()\n# =&gt; [255, 0, 0, 1]\n\nrgb = Color(200, 34, 2)\n\nrgb.channels()\n# =&gt; [200, 34, 2, 1]\n&lt;/pre&gt;&lt;/code&gt;\n\n@name channels\n@methodOf Color#\n\n@returns {Array} Array of r, g, b, and alpha values of the color\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'channels: function() {\n      return [this.r, this.g, this.b, this.a];\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color that is its complementary color on the color wheel.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\n\ncyan = red.complement()\n\n# to see what they look like\nfor color, index in [red, cyan]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60         \n&lt;/pre&gt;&lt;/code&gt;\n\n@name complement\n@methodOf Color#\n\n@returns {Color} new color that is a copy of the calling color with its hue shifted by 180 degrees on the color wheel\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color that is its complementary color on the color wheel.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\n\ncyan = red.complement()\n\n# to see what they look like\nfor color, index in [red, cyan]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60         \n&lt;/pre&gt;&lt;/code&gt;\n\n@name complement\n@methodOf Color#\n\n@returns {Color} new color that is a copy of the calling color with its hue shifted by 180 degrees on the color wheel\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'complement: function() {\n      return this.copy().complement$();\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Modifies the calling color to make it the complement of its previous value.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\n\n# modifies red in place to make it into cyan\nred.complement$()\n\nred.toString()\n# =&gt; \'rgba(0, 255, 255, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name complement$\n@methodOf Color#\n\n@returns {Color} the color hue shifted by 180 degrees on the color wheel. Modifies the existing color.\n</code></pre>'[39m,
       summary: [32m'<p>Modifies the calling color to make it the complement of its previous value.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\n\n# modifies red in place to make it into cyan\nred.complement$()\n\nred.toString()\n# =&gt; \'rgba(0, 255, 255, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name complement$\n@methodOf Color#\n\n@returns {Color} the color hue shifted by 180 degrees on the color wheel. Modifies the existing color.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'complement$: function() {\n      return this.shiftHue$(180);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 100, 200)\n\ncopy = color.copy()\n\ncolor == copy\n# =&gt; false\n\ncolor.equal(copy)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name copy\n@methodOf Color#\n\n@returns {Color} A new color. A copy of the calling color\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 100, 200)\n\ncopy = color.copy()\n\ncolor == copy\n# =&gt; false\n\ncolor.equal(copy)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name copy\n@methodOf Color#\n\n@returns {Color} A new color. A copy of the calling color\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'copy: function() {\n      return Color(this.r, this.g, this.b, this.a);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a copy of the calling color darkened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\ndarkGreen = green.darken(0.3)\n\n# to see what they look like\nfor color, index in [green, darkGreen]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60         \n&lt;/pre&gt;&lt;/code&gt;\n\n@name darken\n@methodOf Color#\n@param {Number} amount Amount to darken color by (between 0 - 1)\n\n@returns {Color} A new color. The lightness value is reduced by `amount` from the original.\n</code></pre>'[39m,
       summary: [32m'<p>Returns a copy of the calling color darkened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\ndarkGreen = green.darken(0.3)\n\n# to see what they look like\nfor color, index in [green, darkGreen]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60         \n&lt;/pre&gt;&lt;/code&gt;\n\n@name darken\n@methodOf Color#\n@param {Number} amount Amount to darken color by (between 0 - 1)\n\n@returns {Color} A new color. The lightness value is reduced by `amount` from the original.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'darken: function(amount) {\n      return this.copy().darken$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Modifies the color so that it is darkened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\n# Modifies green to be darkGreen\ngreen.darken$(0.3)\n\ngreen.toString()\n# =&gt; \'rgba(0, 102, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name darken$\n@methodOf Color#\n@param {Number} amount Amount to darken color by (between 0 - 1)\n\n@returns {Color} the color with the lightness value reduced by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>Modifies the color so that it is darkened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\n# Modifies green to be darkGreen\ngreen.darken$(0.3)\n\ngreen.toString()\n# =&gt; \'rgba(0, 102, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name darken$\n@methodOf Color#\n@param {Number} amount Amount to darken color by (between 0 - 1)\n\n@returns {Color} the color with the lightness value reduced by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'darken$: function(amount) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      hsl[2] -= amount;\n      _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color with its saturation reduced by <code>amount</code>.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nblue = Color(0, 0, 255)\n\ndesaturatedBlue = blue.desaturate(0.4)\n\n# to see what they look like\nfor color, index in [blue, desaturatedBlue]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60  \n&lt;/pre&gt;&lt;/code&gt;\n\n@name desaturate\n@methodOf Color#\n@param {Number} amount Amount to reduce color saturation by (between 0 and 1)\n\n@returns {Color} A copy of the color with the saturation value reduced by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color with its saturation reduced by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nblue = Color(0, 0, 255)\n\ndesaturatedBlue = blue.desaturate(0.4)\n\n# to see what they look like\nfor color, index in [blue, desaturatedBlue]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60  \n&lt;/pre&gt;&lt;/code&gt;\n\n@name desaturate\n@methodOf Color#\n@param {Number} amount Amount to reduce color saturation by (between 0 and 1)\n\n@returns {Color} A copy of the color with the saturation value reduced by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'desaturate: function(amount) {\n      return this.copy().desaturate$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The modified color with its saturation reduced by <code>amount</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nblue = Color(0, 0, 255)\n\n# modifies blue to be desaturatedBlue\nblue.desaturate$(0.4)\n\nblue.toString()\n# =&gt; \'rgba(38, 38, 217, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name desaturate$\n@methodOf Color#\n@param {Number} amount Amount to reduce color saturation by (between 0 and 1)\n\n@returns {Color} the color with the saturation value reduced by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>The modified color with its saturation reduced by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nblue = Color(0, 0, 255)\n\n# modifies blue to be desaturatedBlue\nblue.desaturate$(0.4)\n\nblue.toString()\n# =&gt; \'rgba(38, 38, 217, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name desaturate$\n@methodOf Color#\n@param {Number} amount Amount to reduce color saturation by (between 0 and 1)\n\n@returns {Color} the color with the saturation value reduced by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'desaturate$: function(amount) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      hsl[1] -= amount;\n      _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Determine whether two colors are equal. Compares their r, g, b, and alpha values.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nhex = Color(\'#ffff00\')\nrgb = Color(255, 255, 0)\n\nhex == rgb\n# =&gt; false\n\nhex.equal(rgb)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name equal\n@methodOf Color#\n@param {Color} other the color to compare to the calling color\n\n@returns {Boolean} true if the r, g, b, a values of the colors agree, false otherwise\n</code></pre>'[39m,
       summary: [32m'<p>Determine whether two colors are equal. Compares their r, g, b, and alpha values.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nhex = Color(\'#ffff00\')\nrgb = Color(255, 255, 0)\n\nhex == rgb\n# =&gt; false\n\nhex.equal(rgb)\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name equal\n@methodOf Color#\n@param {Color} other the color to compare to the calling color\n\n@returns {Boolean} true if the r, g, b, a values of the colors agree, false otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'equal: function(other) {\n      return other.r === this.r && other.g === this.g && other.b === this.b && other.a === this.a;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color converted to grayscale.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nyellow = Color(255, 255, 0)\n\ngray = yellow.grayscale()\n\n# to see what they look like\nfor color, index in [yellow, gray]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;    \n\n@name grayscale\n@methodOf Color#\n\n@returns {Color} A copy of the calling color converted to grayscale.\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color converted to grayscale.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nyellow = Color(255, 255, 0)\n\ngray = yellow.grayscale()\n\n# to see what they look like\nfor color, index in [yellow, gray]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;    \n\n@name grayscale\n@methodOf Color#\n\n@returns {Color} A copy of the calling color converted to grayscale.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'grayscale: function() {\n      return this.copy().grayscale$();\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color converted to grayscale.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(255, 255, 0)\n\n# modifies color into gray\ncolor.grayscale$()\n\ncolor.toString()\n# =&gt; \'rgba(128, 128, 128, 1)\'\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name grayscale$\n@methodOf Color#\n\n@returns {Color} The calling color converted to grayscale.\n</code></pre>'[39m,
       summary: [32m'<p>The calling color converted to grayscale.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(255, 255, 0)\n\n# modifies color into gray\ncolor.grayscale$()\n\ncolor.toString()\n# =&gt; \'rgba(128, 128, 128, 1)\'\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name grayscale$\n@methodOf Color#\n\n@returns {Color} The calling color converted to grayscale.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'grayscale$: function() {\n      var g, hsl;\n      hsl = this.toHsl();\n      g = (hsl[2] * 255).round();\n      this.r = this.g = this.b = g;\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A getter / setter for the hue value of the color. Passing no argument returns the <br />    current hue value. Passing a value will set the hue to that value and return the color.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\n# modifies the color to be yellow\nmagenta.hue(60)\n\n# to see what it looks like\ncanvas.drawRect\n  color: magenta\n  x: 50 \n  y: 30 \nwidth: 80\n  height: 80 \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name hue\n@methodOf Color#\n@param {Number} [newVal] the new hue value\n\n@returns {Color|Number} returns the color object if you pass a new hue value and returns the hue otherwise\n</code></pre>'[39m,
       summary: [32m'<p>A getter / setter for the hue value of the color. Passing no argument returns the <br />    current hue value. Passing a value will set the hue to that value and return the color.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\n# modifies the color to be yellow\nmagenta.hue(60)\n\n# to see what it looks like\ncanvas.drawRect\n  color: magenta\n  x: 50 \n  y: 30 \nwidth: 80\n  height: 80 \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name hue\n@methodOf Color#\n@param {Number} [newVal] the new hue value\n\n@returns {Color|Number} returns the color object if you pass a new hue value and returns the hue otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'hue: function(newVal) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      if (newVal != null) {\n        hsl[0] = newVal;\n        _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n        return this;\n      } else {\n        return hsl[0];\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A getter / setter for the lightness value of the color. Passing no argument returns the <br />    current lightness value. Passing a value will set the lightness to that value and return the color.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.lightness()\n# =&gt; 0.9\n\n# modifies magenta in place to be lighter\nmagenta.lightness(0.75)\n\n# to see what it looks like\ncanvas.drawRect\n  color: magenta\n  x: 50 \n  y: 30 \n  width: 80\n  height: 80 \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name lightness\n@methodOf Color#\n@param {Number} [newVal] the new lightness value\n\n@returns {Color|Number} returns the color object if you pass a new lightness value and returns the lightness otherwise\n</code></pre>'[39m,
       summary: [32m'<p>A getter / setter for the lightness value of the color. Passing no argument returns the <br />    current lightness value. Passing a value will set the lightness to that value and return the color.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.lightness()\n# =&gt; 0.9\n\n# modifies magenta in place to be lighter\nmagenta.lightness(0.75)\n\n# to see what it looks like\ncanvas.drawRect\n  color: magenta\n  x: 50 \n  y: 30 \n  width: 80\n  height: 80 \n&lt;/pre&gt;&lt;/code&gt;  \n\n@name lightness\n@methodOf Color#\n@param {Number} [newVal] the new lightness value\n\n@returns {Color|Number} returns the color object if you pass a new lightness value and returns the lightness otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'lightness: function(newVal) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      if (newVal != null) {\n        hsl[2] = newVal;\n        _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n        return this;\n      } else {\n        return hsl[2];\n      }\n    },\n    value: function(newVal) {\n      var hsv, _ref;\n      hsv = this.toHsv();\n      if (newVal != null) {\n        hsv[2] = newVal;\n        _ref = hsvToRgb(hsv), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n        return this;\n      } else {\n        return hsv[2];\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color with its hue shifted by <code>degrees</code>. This differs from the hue setter in that it adds to the existing hue value and will wrap around 0 and 360.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\nyellow = magenta.shiftHue(120)\n\n# since magenta\'s hue is 300 we have wrapped\n# around 360 to end up at 60\nyellow.hue()\n# =&gt; 60\n\n# to see what they look like\nfor color, index in [magenta, yellow]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name shiftHue\n@methodOf Color#\n@param {Number} degrees number of degrees to shift the hue on the color wheel.\n\n@returns {Color} A copy of the color with its hue shifted by `degrees`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color with its hue shifted by <code>degrees</code>. This differs from the hue setter in that it adds to the existing hue value and will wrap around 0 and 360.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\nyellow = magenta.shiftHue(120)\n\n# since magenta\'s hue is 300 we have wrapped\n# around 360 to end up at 60\nyellow.hue()\n# =&gt; 60\n\n# to see what they look like\nfor color, index in [magenta, yellow]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name shiftHue\n@methodOf Color#\n@param {Number} degrees number of degrees to shift the hue on the color wheel.\n\n@returns {Color} A copy of the color with its hue shifted by `degrees`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'shiftHue: function(degrees) {\n      return this.copy().shiftHue$(degrees);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color with its hue shifted by <code>degrees</code>. This differs from the hue setter in that it adds to the existing hue value and will wrap around 0 and 360.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\nmagenta.shiftHue$(120)\n\n# since magenta\'s hue is 300 we have wrapped\n# around 360 to end up at 60. Also we have \n# modified magenta in place to become yellow\nmagenta.hue()\n# =&gt; 60\n\nmagenta.toString()\n# =&gt; \'rgba(255, 255, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name shiftHue$\n@methodOf Color#\n@param {Number} degrees number of degrees to shift the hue on the color wheel.\n\n@returns {Color} The color with its hue shifted by `degrees`\n</code></pre>'[39m,
       summary: [32m'<p>The calling color with its hue shifted by <code>degrees</code>. This differs from the hue setter in that it adds to the existing hue value and will wrap around 0 and 360.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.hue()\n# =&gt; 300\n\nmagenta.shiftHue$(120)\n\n# since magenta\'s hue is 300 we have wrapped\n# around 360 to end up at 60. Also we have \n# modified magenta in place to become yellow\nmagenta.hue()\n# =&gt; 60\n\nmagenta.toString()\n# =&gt; \'rgba(255, 255, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name shiftHue$\n@methodOf Color#\n@param {Number} degrees number of degrees to shift the hue on the color wheel.\n\n@returns {Color} The color with its hue shifted by `degrees`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'shiftHue$: function(degrees) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      hsl[0] = (hsl[0] + degrees.round()).mod(360);\n      _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns a copy of the calling color lightened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\nlightGreen = green.lighten(0.3)\n\n# to see what they look like\nfor color, index in [green, lightGreen]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name lighten\n@methodOf Color#\n@param {Number} amount Amount to lighten color by (between 0 to 1)\n\n@returns {Color} A new color. The lightness value is increased by `amount` from the original.\n</code></pre>'[39m,
       summary: [32m'<p>Returns a copy of the calling color lightened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\nlightGreen = green.lighten(0.3)\n\n# to see what they look like\nfor color, index in [green, lightGreen]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name lighten\n@methodOf Color#\n@param {Number} amount Amount to lighten color by (between 0 to 1)\n\n@returns {Color} A new color. The lightness value is increased by `amount` from the original.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'lighten: function(amount) {\n      return this.copy().lighten$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color lightened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\ngreen.lighten$(0.2)\n\n# we have modified green in place\n# to become lightGreen\ngreen.toString()\n# =&gt; \'rgba(102, 255, 102, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name lighten$\n@methodOf Color#\n@param {Number} amount Amount to lighten color by (between 0 - 1)\n\n@returns {Color} The calling color with its lightness value increased by `amount`.\n</code></pre>'[39m,
       summary: [32m'<p>The calling color lightened by <code>amount</code> (Lightness of the color ranges from 0 to 1).</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ngreen = Color(0, 255, 0)\n\ngreen.lighten$(0.2)\n\n# we have modified green in place\n# to become lightGreen\ngreen.toString()\n# =&gt; \'rgba(102, 255, 102, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name lighten$\n@methodOf Color#\n@param {Number} amount Amount to lighten color by (between 0 - 1)\n\n@returns {Color} The calling color with its lightness value increased by `amount`.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'lighten$: function(amount) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      hsl[2] += amount;\n      _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color mixed with <code>other</code> using <code>amount</code> as the <br />    mixing ratio. If amount is not passed, then the colors are mixed evenly.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\nyellow = Color(255, 255, 0)\n\n# With no amount argument the colors are mixed evenly\norange = red.mixWith(yellow)\n\n# With an amount of 0.3 we are mixing the color 30% red and 70% yellow\nsomethingCloseToOrange = red.mixWith(yellow, 0.3)\n\n# to see what they look like\nfor color, index in [red, yellow, orange, somethingCloseToOrange]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * (index % 2))\n    y: 20 + (60 * (if index &gt; 1 then 1 else 0))\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name mixWith\n@methodOf Color#\n@param {Color} other the other color to mix\n@param {Number} [amount] the mixing ratio of the calling color to `other`\n\n@returns {Color} A new color that is a mix of the calling color and `other`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color mixed with <code>other</code> using <code>amount</code> as the <br />    mixing ratio. If amount is not passed, then the colors are mixed evenly.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\nyellow = Color(255, 255, 0)\n\n# With no amount argument the colors are mixed evenly\norange = red.mixWith(yellow)\n\n# With an amount of 0.3 we are mixing the color 30% red and 70% yellow\nsomethingCloseToOrange = red.mixWith(yellow, 0.3)\n\n# to see what they look like\nfor color, index in [red, yellow, orange, somethingCloseToOrange]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * (index % 2))\n    y: 20 + (60 * (if index &gt; 1 then 1 else 0))\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name mixWith\n@methodOf Color#\n@param {Color} other the other color to mix\n@param {Number} [amount] the mixing ratio of the calling color to `other`\n\n@returns {Color} A new color that is a mix of the calling color and `other`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'mixWith: function(other, amount) {\n      return this.copy().mixWith$(other, amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color mixed with <code>other</code> using <code>amount</code> as the <br />    mixing ratio. If amount is not passed, then the colors are mixed evenly.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\nyellow = Color(255, 255, 0)\nanotherRed = Color(255, 0, 0)\n\n# With no amount argument the colors are mixed evenly\nred.mixWith$(yellow)\n\n# We have modified red in place to be orange \nred.toString()\n# =&gt; \'rgba(255, 128, 0, 1)\'    \n\n# With an amount of 0.3 we are mixing the color 30% red and 70% yellow\nanotherRed.mixWith$(yellow, 0.3)\n\n# We have modified `anotherRed` in place to be somethingCloseToOrange \nanotherRed.toString()\n# =&gt; rgba(255, 179, 0, 1)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name mixWith$\n@methodOf Color#\n@param {Color} other the other color to mix\n@param {Number} [amount] the mixing ratio of the calling color to `other`\n\n@returns {Color} The modified calling color after mixing it with `other`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color mixed with <code>other</code> using <code>amount</code> as the <br />    mixing ratio. If amount is not passed, then the colors are mixed evenly.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(255, 0, 0)\nyellow = Color(255, 255, 0)\nanotherRed = Color(255, 0, 0)\n\n# With no amount argument the colors are mixed evenly\nred.mixWith$(yellow)\n\n# We have modified red in place to be orange \nred.toString()\n# =&gt; \'rgba(255, 128, 0, 1)\'    \n\n# With an amount of 0.3 we are mixing the color 30% red and 70% yellow\nanotherRed.mixWith$(yellow, 0.3)\n\n# We have modified `anotherRed` in place to be somethingCloseToOrange \nanotherRed.toString()\n# =&gt; rgba(255, 179, 0, 1)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name mixWith$\n@methodOf Color#\n@param {Color} other the other color to mix\n@param {Number} [amount] the mixing ratio of the calling color to `other`\n\n@returns {Color} The modified calling color after mixing it with `other`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'mixWith$: function(other, amount) {\n      var _ref, _ref2;\n      amount || (amount = 0.5);\n      _ref = [this.r, this.g, this.b, this.a].zip([other.r, other.g, other.b, other.a]).map(function(array) {\n        return (array[0] * amount) + (array[1] * (1 - amount));\n      }), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      _ref2 = [this.r, this.g, this.b].map(function(color) {\n        return color.round();\n      }), this.r = _ref2[0], this.g = _ref2[1], this.b = _ref2[2];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color with its saturation increased by <code>amount</code>.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(50, 50, 200)\n\ncolor.saturation()\n# =&gt; 0.6\n\nsaturatedColor = color.saturate(0.2)\n\nsaturatedColor.saturation()\n# =&gt; 0.8\n\n# to see what they look like\nfor color, index in [color, saturatedColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturate\n@methodOf Color#\n@param {Number} amount the amount to increase saturation by\n\n@returns {Color} A copy of the calling color with its saturation increased by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color with its saturation increased by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(50, 50, 200)\n\ncolor.saturation()\n# =&gt; 0.6\n\nsaturatedColor = color.saturate(0.2)\n\nsaturatedColor.saturation()\n# =&gt; 0.8\n\n# to see what they look like\nfor color, index in [color, saturatedColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60 \n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturate\n@methodOf Color#\n@param {Number} amount the amount to increase saturation by\n\n@returns {Color} A copy of the calling color with its saturation increased by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'saturate: function(amount) {\n      return this.copy().saturate$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color with its saturation increased by <code>amount</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(50, 50, 200)\n\ncolor.saturation()\n# =&gt; 0.6\n\ncolor.saturate$(0.2)\n\n# We have modified color in place and increased its saturation to 0.8\ncolor.saturation()\n# =&gt; 0.8\n\ncolor.toString()\n# =&gt; rgba(25, 25, 225, 1)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturate$\n@methodOf Color#\n@param {Number} amount the amount to increase saturation by\n\n@returns {Color} The calling color with its saturation increased by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>The calling color with its saturation increased by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(50, 50, 200)\n\ncolor.saturation()\n# =&gt; 0.6\n\ncolor.saturate$(0.2)\n\n# We have modified color in place and increased its saturation to 0.8\ncolor.saturation()\n# =&gt; 0.8\n\ncolor.toString()\n# =&gt; rgba(25, 25, 225, 1)\n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturate$\n@methodOf Color#\n@param {Number} amount the amount to increase saturation by\n\n@returns {Color} The calling color with its saturation increased by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'saturate$: function(amount) {\n      var hsl, _ref;\n      hsl = this.toHsl();\n      hsl[1] += amount;\n      _ref = hslToRgb(hsl), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A getter / setter for the saturation value of the color. Passing no argument returns the <br />    current saturation value. Passing a value will set the saturation to that value and return the color.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nyellow = Color(\'hsl(60, 0.5, 0.5)\')\n\nyellow.saturation()\n# =&gt; 0.5\n\nyellow.saturation(0.8)\n\n# to see what it looks like\ncanvas.drawRect\n  color: yellow\n  x: 50 \n  y: 30 \n  width: 80\n  height: 80     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturation\n@methodOf Color#\n@param {Number} [newVal] the new saturation value\n\n@returns {Color|Number} returns the color object if you pass a new saturation value and returns the saturation otherwise\n</code></pre>'[39m,
       summary: [32m'<p>A getter / setter for the saturation value of the color. Passing no argument returns the <br />    current saturation value. Passing a value will set the saturation to that value and return the color.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\nyellow = Color(\'hsl(60, 0.5, 0.5)\')\n\nyellow.saturation()\n# =&gt; 0.5\n\nyellow.saturation(0.8)\n\n# to see what it looks like\ncanvas.drawRect\n  color: yellow\n  x: 50 \n  y: 30 \n  width: 80\n  height: 80     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name saturation\n@methodOf Color#\n@param {Number} [newVal] the new saturation value\n\n@returns {Color|Number} returns the color object if you pass a new saturation value and returns the saturation otherwise\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'saturation: function(newVal, mode) {\n      var hsl, hsv, _ref, _ref2;\n      if (mode === \'hsv\') {\n        hsv = this.toHsv();\n        if (newVal != null) {\n          hsv[1] = newVal;\n          _ref = hsvToRgb(hsv), this.r = _ref[0], this.g = _ref[1], this.b = _ref[2], this.a = _ref[3];\n          return this;\n        } else {\n          return hsv[1];\n        }\n      } else {\n        hsl = this.toHsl();\n        if (newVal != null) {\n          hsl[1] = newVal;\n          _ref2 = hslToRgb(hsl), this.r = _ref2[0], this.g = _ref2[1], this.b = _ref2[2], this.a = _ref2[3];\n          return this;\n        } else {\n          return hsl[1];\n        }\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>returns the Hex representation of the color. Exclude the leading <code>#</code> by passing false. </p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(\'hsl(60, 1, 0.5)\')\n\n# passing nothing will leave the `#` intact\ncolor.toHex()\n# =&gt; \'#ffff00\'\n\n# passing false will remove the `#`\ncolor.toHex(false)\n# =&gt; \'ffff00\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name toHex\n@methodOf Color#\n@param {Boolean} [leadingHash] if passed as false excludes the leading `#` from the string\n\n@returns {String} returns the Hex representation of the color\n</code></pre>'[39m,
       summary: [32m'<p>returns the Hex representation of the color. Exclude the leading <code>#</code> by passing false. </p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(\'hsl(60, 1, 0.5)\')\n\n# passing nothing will leave the `#` intact\ncolor.toHex()\n# =&gt; \'#ffff00\'\n\n# passing false will remove the `#`\ncolor.toHex(false)\n# =&gt; \'ffff00\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name toHex\n@methodOf Color#\n@param {Boolean} [leadingHash] if passed as false excludes the leading `#` from the string\n\n@returns {String} returns the Hex representation of the color\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'toHex: function(leadingHash) {\n      var hexFromNumber, padString;\n      padString = function(hexString) {\n        var pad;\n        if (hexString.length === 1) {\n          pad = "0";\n        } else {\n          pad = "";\n        }\n        return pad + hexString;\n      };\n      hexFromNumber = function(number) {\n        return padString(number.toString(16));\n      };\n      if (leadingHash === false) {\n        return "" + (hexFromNumber(this.r)) + (hexFromNumber(this.g)) + (hexFromNumber(this.b));\n      } else {\n        return "#" + (hexFromNumber(this.r)) + (hexFromNumber(this.g)) + (hexFromNumber(this.b));\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>returns an array of the hue, saturation, lightness, and alpha values of the color. </p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.toHsl()\n# =&gt; [300, 1, 0.5, 1]\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name toHsl\n@methodOf Color#\n\n@returns {Array} An array of the hue, saturation, lightness, and alpha values of the color.\n</code></pre>'[39m,
       summary: [32m'<p>returns an array of the hue, saturation, lightness, and alpha values of the color. </p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nmagenta = Color(255, 0, 255)\n\nmagenta.toHsl()\n# =&gt; [300, 1, 0.5, 1]\n&lt;/pre&gt;&lt;/code&gt;  \n\n@name toHsl\n@methodOf Color#\n\n@returns {Array} An array of the hue, saturation, lightness, and alpha values of the color.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'toHsl: function() {\n      var b, channel, chroma, g, hue, lightness, max, min, r, saturation, _ref, _ref2;\n      _ref = (function() {\n        var _i, _len, _ref, _results;\n        _ref = [this.r, this.g, this.b];\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          channel = _ref[_i];\n          _results.push(channel / 255);\n        }\n        return _results;\n      }).call(this), r = _ref[0], g = _ref[1], b = _ref[2];\n      _ref2 = [r, g, b].extremes(), min = _ref2.min, max = _ref2.max;\n      hue = saturation = lightness = (max + min) / 2;\n      chroma = max - min;\n      if (chroma.abs() < 0.00001) {\n        hue = saturation = 0;\n      } else {\n        saturation = lightness > 0.5 ? chroma / (1 - lightness) : chroma / lightness;\n        saturation /= 2;\n        switch (max) {\n          case r:\n            hue = ((g - b) / chroma) + 0;\n            break;\n          case g:\n            hue = ((b - r) / chroma) + 2;\n            break;\n          case b:\n            hue = ((r - g) / chroma) + 4;\n        }\n        hue = (hue * 60).mod(360);\n      }\n      return [hue, saturation, lightness, this.a];\n    },\n    toHsv: function() {\n      var b, d, g, h, max, min, r, s, v, _ref;\n      r = this.r / 255;\n      g = this.g / 255;\n      b = this.b / 255;\n      _ref = [r, g, b].extremes(), min = _ref.min, max = _ref.max;\n      h = s = v = max;\n      d = max - min;\n      s = (max === 0 ? 0 : d / max);\n      if (max === min) {\n        h = 0;\n      } else {\n        switch (max) {\n          case r:\n            h = (g - b) / d + (g < b ? 6 : 0);\n            break;\n          case g:\n            h = (b - r) / d + 2;\n            break;\n          case b:\n            h = (r - g) / d + 4;\n        }\n        h *= 60;\n      }\n      return [h, s, v];\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>returns string rgba representation of the color. </p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(\'#ff0000\')\n\nred.toString()\n# =&gt; \'rgba(255, 0, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name toString\n@methodOf Color#\n\n@returns {String} The rgba string representation of the color\n</code></pre>'[39m,
       summary: [32m'<p>returns string rgba representation of the color. </p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nred = Color(\'#ff0000\')\n\nred.toString()\n# =&gt; \'rgba(255, 0, 0, 1)\'\n&lt;/pre&gt;&lt;/code&gt;\n\n@name toString\n@methodOf Color#\n\n@returns {String} The rgba string representation of the color\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'toString: function() {\n      return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + this.a + ")";\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color with its alpha reduced by <code>amount</code>.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 1)\n\ncolor.a\n# =&gt; 1\n\ntransparentColor = color.transparentize(0.5)\n\ntransparentColor.a\n# =&gt; 0.5\n\n# to see what they look like\nfor color, index in [color, transparentColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name transparentize\n@methodOf Color#\n\n@returns {Color} A copy of the calling color with its alpha reduced by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color with its alpha reduced by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 1)\n\ncolor.a\n# =&gt; 1\n\ntransparentColor = color.transparentize(0.5)\n\ntransparentColor.a\n# =&gt; 0.5\n\n# to see what they look like\nfor color, index in [color, transparentColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name transparentize\n@methodOf Color#\n\n@returns {Color} A copy of the calling color with its alpha reduced by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'transparentize: function(amount) {\n      return this.copy().transparentize$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color with its alpha reduced by <code>amount</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 1)\n\ncolor.a\n# =&gt; 1\n\n# We modify color in place\ncolor.transparentize$(0.5)\n\ncolor.a\n# =&gt; 0.5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name transparentize$\n@methodOf Color#\n\n@returns {Color} The calling color with its alpha reduced by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>The calling color with its alpha reduced by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 1)\n\ncolor.a\n# =&gt; 1\n\n# We modify color in place\ncolor.transparentize$(0.5)\n\ncolor.a\n# =&gt; 0.5\n&lt;/pre&gt;&lt;/code&gt;\n\n@name transparentize$\n@methodOf Color#\n\n@returns {Color} The calling color with its alpha reduced by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'transparentize$: function(amount) {\n      this.a = (this.a - amount).clamp(0, 1);\n      return this;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A copy of the calling color with its alpha increased by <code>amount</code>.</p>\n\n<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 0.25)\n\ncolor.a\n# =&gt; 0.25\n\nopaqueColor = color.opacify(0.5)\n\nopaqueColor.a\n# =&gt; 0.75\n\n# to see what they look like\nfor color, index in [color, opaqueColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name opacify\n@methodOf Color#\n\n@returns {Color} A copy of the calling color with its alpha increased by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>A copy of the calling color with its alpha increased by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code class="run"&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 0.25)\n\ncolor.a\n# =&gt; 0.25\n\nopaqueColor = color.opacify(0.5)\n\nopaqueColor.a\n# =&gt; 0.75\n\n# to see what they look like\nfor color, index in [color, opaqueColor]\n  canvas.drawRect\n    color: color\n    x: 20 + (60 * index)\n    y: 20 + (60 * index)\n    width: 60\n    height: 60     \n&lt;/pre&gt;&lt;/code&gt;\n\n@name opacify\n@methodOf Color#\n\n@returns {Color} A copy of the calling color with its alpha increased by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'opacify: function(amount) {\n      return this.copy().opacify$(amount);\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The calling color with its alpha increased by <code>amount</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 0)\n\ncolor.a\n# =&gt; 0\n\n# We modify color in place\ncolor.opacify$(0.25)\n\ncolor.a\n# =&gt; 0.25\n&lt;/pre&gt;&lt;/code&gt;\n\n@name opacify$\n@methodOf Color#\n\n@returns {Color} The calling color with its alpha increased by `amount`\n</code></pre>'[39m,
       summary: [32m'<p>The calling color with its alpha increased by <code>amount</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\ncolor = Color(0, 0, 0, 0)\n\ncolor.a\n# =&gt; 0\n\n# We modify color in place\ncolor.opacify$(0.25)\n\ncolor.a\n# =&gt; 0.25\n&lt;/pre&gt;&lt;/code&gt;\n\n@name opacify$\n@methodOf Color#\n\n@returns {Color} The calling color with its alpha increased by `amount`\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'opacify$: function(amount) {\n      this.a = (this.a + amount).clamp(0, 1);\n      return this;\n    }\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>returns a random color.</p>\n\n<p><code><pre><br />  Color.random().toString()<br />  # => \'rgba(213, 144, 202, 1)\'</p>\n\n<p>Color.random().toString()<br />  # => \'rgba(1, 211, 24, 1)\'<br />  </pre></code></p>\n\n<p>@name random<br />  @methodOf Color</p>\n\n<p>@returns {Color} A random color.</p>'[39m,
       summary: [32m'<p>returns a random color.</p>'[39m,
       body: [32m'<p><code><pre><br />  Color.random().toString()<br />  # => \'rgba(213, 144, 202, 1)\'</p>\n\n<p>Color.random().toString()<br />  # => \'rgba(1, 211, 24, 1)\'<br />  </pre></code></p>\n\n<p>@name random<br />  @methodOf Color</p>\n\n<p>@returns {Color} A random color.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Color.random = function() {\n    return Color(rand(256), rand(256), rand(256));\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Color'[39m,
       name: [32m'random'[39m,
       string: [32m'Color.random()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Mix two colors. Behaves just like <code>#mixWith</code> except that you are passing two colors.</p>\n\n<p><code><pre><br />  red = Color(255, 0, 0)<br />  yellow = Color(255, 255, 0)</p>\n\n<p># With no amount argument the colors are mixed evenly<br />  orange = Color.mix(red, yellow)</p>\n\n<p>orange.toString()<br />  # => \'rgba(255, 128, 0, 1)\'    </p>\n\n<p># With an amount of 0.3 we are mixing the color 30% red and 70% yellow<br />  somethingCloseToOrange = Color.mix(red, yellow, 0.3)</p>\n\n<p>somethingCloseToOrange.toString()<br />  # => rgba(255, 179, 0, 1)<br />  </pre></code></p>\n\n<p>@name mix<br />  @methodOf Color<br />  @see Color#mixWith<br />  @param {Color} color1 the first color to mix<br />  @param {Color} color2 the second color to mix<br />  @param {Number} amount the ratio to mix the colors </p>\n\n<p>@returns {Color} A new color that is the two colors mixed at the ratio defined by <code>amount</code></p>'[39m,
       summary: [32m'<p>Mix two colors. Behaves just like <code>#mixWith</code> except that you are passing two colors.</p>'[39m,
       body: [32m'<p><code><pre><br />  red = Color(255, 0, 0)<br />  yellow = Color(255, 255, 0)</p>\n\n<p># With no amount argument the colors are mixed evenly<br />  orange = Color.mix(red, yellow)</p>\n\n<p>orange.toString()<br />  # => \'rgba(255, 128, 0, 1)\'    </p>\n\n<p># With an amount of 0.3 we are mixing the color 30% red and 70% yellow<br />  somethingCloseToOrange = Color.mix(red, yellow, 0.3)</p>\n\n<p>somethingCloseToOrange.toString()<br />  # => rgba(255, 179, 0, 1)<br />  </pre></code></p>\n\n<p>@name mix<br />  @methodOf Color<br />  @see Color#mixWith<br />  @param {Color} color1 the first color to mix<br />  @param {Color} color2 the second color to mix<br />  @param {Number} amount the ratio to mix the colors </p>\n\n<p>@returns {Color} A new color that is the two colors mixed at the ratio defined by <code>amount</code></p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Color.mix = function(color1, color2, amount) {\n    var newColors;\n    amount || (amount = 0.5);\n    newColors = [color1.r, color1.g, color1.b, color1.a].zip([color2.r, color2.g, color2.b, color2.a]).map(function(array) {\n      return (array[0] * amount) + (array[1] * (1 - amount));\n    });\n    return Color(newColors);\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Color"] = Color;\n})();\n;\n\n(function() {\n  var lookup, names, normalizeKey;\n  names = [["000000", "Black"], ["000080", "Navy Blue"], ["0000C8", "Dark Blue"], ["0000FF", "Blue"], ["000741", "Stratos"], ["001B1C", "Swamp"], ["002387", "Resolution Blue"], ["002900", "Deep Fir"], ["002E20", "Burnham"], ["002FA7", "International Klein Blue"], ["003153", "Prussian Blue"], ["003366", "Midnight Blue"], ["003399", "Smalt"], ["003532", "Deep Teal"], ["003E40", "Cyprus"], ["004620", "Kaitoke Green"], ["0047AB", "Cobalt"], ["004816", "Crusoe"], ["004950", "Sherpa Blue"], ["0056A7", "Endeavour"], ["00581A", "Camarone"], ["0066CC", "Science Blue"], ["0066FF", "Blue Ribbon"], ["00755E", "Tropical Rain Forest"], ["0076A3", "Allports"], ["007BA7", "Deep Cerulean"], ["007EC7", "Lochmara"], ["007FFF", "Azure Radiance"], ["008080", "Teal"], ["0095B6", "Bondi Blue"], ["009DC4", "Pacific Blue"], ["00A693", "Persian Green"], ["00A86B", "Jade"], ["00CC99", "Caribbean Green"], ["00CCCC", "Robin\'s Egg Blue"], ["00FF00", "Green"], ["00FF7F", "Spring Green"], ["00FFFF", "Cyan / Aqua"], ["010D1A", "Blue Charcoal"], ["011635", "Midnight"], ["011D13", "Holly"], ["012731", "Daintree"], ["01361C", "Cardin Green"], ["01371A", "County Green"], ["013E62", "Astronaut Blue"], ["013F6A", "Regal Blue"], ["014B43", "Aqua Deep"], ["015E85", "Orient"], ["016162", "Blue Stone"], ["016D39", "Fun Green"], ["01796F", "Pine Green"], ["017987", "Blue Lagoon"], ["01826B", "Deep Sea"], ["01A368", "Green Haze"], ["022D15", "English Holly"], ["02402C", "Sherwood Green"], ["02478E", "Congress Blue"], ["024E46", "Evening Sea"], ["026395", "Bahama Blue"], ["02866F", "Observatory"], ["02A4D3", "Cerulean"], ["03163C", "Tangaroa"], ["032B52", "Green Vogue"], ["036A6E", "Mosque"], ["041004", "Midnight Moss"], ["041322", "Black Pearl"], ["042E4C", "Blue Whale"], ["044022", "Zuccini"], ["044259", "Teal Blue"], ["051040", "Deep Cove"], ["051657", "Gulf Blue"], ["055989", "Venice Blue"], ["056F57", "Watercourse"], ["062A78", "Catalina Blue"], ["063537", "Tiber"], ["069B81", "Gossamer"], ["06A189", "Niagara"], ["073A50", "Tarawera"], ["080110", "Jaguar"], ["081910", "Black Bean"], ["082567", "Deep Sapphire"], ["088370", "Elf Green"], ["08E8DE", "Bright Turquoise"], ["092256", "Downriver"], ["09230F", "Palm Green"], ["09255D", "Madison"], ["093624", "Bottle Green"], ["095859", "Deep Sea Green"], ["097F4B", "Salem"], ["0A001C", "Black Russian"], ["0A480D", "Dark Fern"], ["0A6906", "Japanese Laurel"], ["0A6F75", "Atoll"], ["0B0B0B", "Cod Gray"], ["0B0F08", "Marshland"], ["0B1107", "Gordons Green"], ["0B1304", "Black Forest"], ["0B6207", "San Felix"], ["0BDA51", "Malachite"], ["0C0B1D", "Ebony"], ["0C0D0F", "Woodsmoke"], ["0C1911", "Racing Green"], ["0C7A79", "Surfie Green"], ["0C8990", "Blue Chill"], ["0D0332", "Black Rock"], ["0D1117", "Bunker"], ["0D1C19", "Aztec"], ["0D2E1C", "Bush"], ["0E0E18", "Cinder"], ["0E2A30", "Firefly"], ["0F2D9E", "Torea Bay"], ["10121D", "Vulcan"], ["101405", "Green Waterloo"], ["105852", "Eden"], ["110C6C", "Arapawa"], ["120A8F", "Ultramarine"], ["123447", "Elephant"], ["126B40", "Jewel"], ["130000", "Diesel"], ["130A06", "Asphalt"], ["13264D", "Blue Zodiac"], ["134F19", "Parsley"], ["140600", "Nero"], ["1450AA", "Tory Blue"], ["151F4C", "Bunting"], ["1560BD", "Denim"], ["15736B", "Genoa"], ["161928", "Mirage"], ["161D10", "Hunter Green"], ["162A40", "Big Stone"], ["163222", "Celtic"], ["16322C", "Timber Green"], ["163531", "Gable Green"], ["171F04", "Pine Tree"], ["175579", "Chathams Blue"], ["182D09", "Deep Forest Green"], ["18587A", "Blumine"], ["19330E", "Palm Leaf"], ["193751", "Nile Blue"], ["1959A8", "Fun Blue"], ["1A1A68", "Lucky Point"], ["1AB385", "Mountain Meadow"], ["1B0245", "Tolopea"], ["1B1035", "Haiti"], ["1B127B", "Deep Koamaru"], ["1B1404", "Acadia"], ["1B2F11", "Seaweed"], ["1B3162", "Biscay"], ["1B659D", "Matisse"], ["1C1208", "Crowshead"], ["1C1E13", "Rangoon Green"], ["1C39BB", "Persian Blue"], ["1C402E", "Everglade"], ["1C7C7D", "Elm"], ["1D6142", "Green Pea"], ["1E0F04", "Creole"], ["1E1609", "Karaka"], ["1E1708", "El Paso"], ["1E385B", "Cello"], ["1E433C", "Te Papa Green"], ["1E90FF", "Dodger Blue"], ["1E9AB0", "Eastern Blue"], ["1F120F", "Night Rider"], ["1FC2C2", "Java"], ["20208D", "Jacksons Purple"], ["202E54", "Cloud Burst"], ["204852", "Blue Dianne"], ["211A0E", "Eternity"], ["220878", "Deep Blue"], ["228B22", "Forest Green"], ["233418", "Mallard"], ["240A40", "Violet"], ["240C02", "Kilamanjaro"], ["242A1D", "Log Cabin"], ["242E16", "Black Olive"], ["24500F", "Green House"], ["251607", "Graphite"], ["251706", "Cannon Black"], ["251F4F", "Port Gore"], ["25272C", "Shark"], ["25311C", "Green Kelp"], ["2596D1", "Curious Blue"], ["260368", "Paua"], ["26056A", "Paris M"], ["261105", "Wood Bark"], ["261414", "Gondola"], ["262335", "Steel Gray"], ["26283B", "Ebony Clay"], ["273A81", "Bay of Many"], ["27504B", "Plantation"], ["278A5B", "Eucalyptus"], ["281E15", "Oil"], ["283A77", "Astronaut"], ["286ACD", "Mariner"], ["290C5E", "Violent Violet"], ["292130", "Bastille"], ["292319", "Zeus"], ["292937", "Charade"], ["297B9A", "Jelly Bean"], ["29AB87", "Jungle Green"], ["2A0359", "Cherry Pie"], ["2A140E", "Coffee Bean"], ["2A2630", "Baltic Sea"], ["2A380B", "Turtle Green"], ["2A52BE", "Cerulean Blue"], ["2B0202", "Sepia Black"], ["2B194F", "Valhalla"], ["2B3228", "Heavy Metal"], ["2C0E8C", "Blue Gem"], ["2C1632", "Revolver"], ["2C2133", "Bleached Cedar"], ["2C8C84", "Lochinvar"], ["2D2510", "Mikado"], ["2D383A", "Outer Space"], ["2D569B", "St Tropaz"], ["2E0329", "Jacaranda"], ["2E1905", "Jacko Bean"], ["2E3222", "Rangitoto"], ["2E3F62", "Rhino"], ["2E8B57", "Sea Green"], ["2EBFD4", "Scooter"], ["2F270E", "Onion"], ["2F3CB3", "Governor Bay"], ["2F519E", "Sapphire"], ["2F5A57", "Spectra"], ["2F6168", "Casal"], ["300529", "Melanzane"], ["301F1E", "Cocoa Brown"], ["302A0F", "Woodrush"], ["304B6A", "San Juan"], ["30D5C8", "Turquoise"], ["311C17", "Eclipse"], ["314459", "Pickled Bluewood"], ["315BA1", "Azure"], ["31728D", "Calypso"], ["317D82", "Paradiso"], ["32127A", "Persian Indigo"], ["32293A", "Blackcurrant"], ["323232", "Mine Shaft"], ["325D52", "Stromboli"], ["327C14", "Bilbao"], ["327DA0", "Astral"], ["33036B", "Christalle"], ["33292F", "Thunder"], ["33CC99", "Shamrock"], ["341515", "Tamarind"], ["350036", "Mardi Gras"], ["350E42", "Valentino"], ["350E57", "Jagger"], ["353542", "Tuna"], ["354E8C", "Chambray"], ["363050", "Martinique"], ["363534", "Tuatara"], ["363C0D", "Waiouru"], ["36747D", "Ming"], ["368716", "La Palma"], ["370202", "Chocolate"], ["371D09", "Clinker"], ["37290E", "Brown Tumbleweed"], ["373021", "Birch"], ["377475", "Oracle"], ["380474", "Blue Diamond"], ["381A51", "Grape"], ["383533", "Dune"], ["384555", "Oxford Blue"], ["384910", "Clover"], ["394851", "Limed Spruce"], ["396413", "Dell"], ["3A0020", "Toledo"], ["3A2010", "Sambuca"], ["3A2A6A", "Jacarta"], ["3A686C", "William"], ["3A6A47", "Killarney"], ["3AB09E", "Keppel"], ["3B000B", "Temptress"], ["3B0910", "Aubergine"], ["3B1F1F", "Jon"], ["3B2820", "Treehouse"], ["3B7A57", "Amazon"], ["3B91B4", "Boston Blue"], ["3C0878", "Windsor"], ["3C1206", "Rebel"], ["3C1F76", "Meteorite"], ["3C2005", "Dark Ebony"], ["3C3910", "Camouflage"], ["3C4151", "Bright Gray"], ["3C4443", "Cape Cod"], ["3C493A", "Lunar Green"], ["3D0C02", "Bean  "], ["3D2B1F", "Bistre"], ["3D7D52", "Goblin"], ["3E0480", "Kingfisher Daisy"], ["3E1C14", "Cedar"], ["3E2B23", "English Walnut"], ["3E2C1C", "Black Marlin"], ["3E3A44", "Ship Gray"], ["3EABBF", "Pelorous"], ["3F2109", "Bronze"], ["3F2500", "Cola"], ["3F3002", "Madras"], ["3F307F", "Minsk"], ["3F4C3A", "Cabbage Pont"], ["3F583B", "Tom Thumb"], ["3F5D53", "Mineral Green"], ["3FC1AA", "Puerto Rico"], ["3FFF00", "Harlequin"], ["401801", "Brown Pod"], ["40291D", "Cork"], ["403B38", "Masala"], ["403D19", "Thatch Green"], ["405169", "Fiord"], ["40826D", "Viridian"], ["40A860", "Chateau Green"], ["410056", "Ripe Plum"], ["411F10", "Paco"], ["412010", "Deep Oak"], ["413C37", "Merlin"], ["414257", "Gun Powder"], ["414C7D", "East Bay"], ["4169E1", "Royal Blue"], ["41AA78", "Ocean Green"], ["420303", "Burnt Maroon"], ["423921", "Lisbon Brown"], ["427977", "Faded Jade"], ["431560", "Scarlet Gum"], ["433120", "Iroko"], ["433E37", "Armadillo"], ["434C59", "River Bed"], ["436A0D", "Green Leaf"], ["44012D", "Barossa"], ["441D00", "Morocco Brown"], ["444954", "Mako"], ["454936", "Kelp"], ["456CAC", "San Marino"], ["45B1E8", "Picton Blue"], ["460B41", "Loulou"], ["462425", "Crater Brown"], ["465945", "Gray Asparagus"], ["4682B4", "Steel Blue"], ["480404", "Rustic Red"], ["480607", "Bulgarian Rose"], ["480656", "Clairvoyant"], ["481C1C", "Cocoa Bean"], ["483131", "Woody Brown"], ["483C32", "Taupe"], ["49170C", "Van Cleef"], ["492615", "Brown Derby"], ["49371B", "Metallic Bronze"], ["495400", "Verdun Green"], ["496679", "Blue Bayoux"], ["497183", "Bismark"], ["4A2A04", "Bracken"], ["4A3004", "Deep Bronze"], ["4A3C30", "Mondo"], ["4A4244", "Tundora"], ["4A444B", "Gravel"], ["4A4E5A", "Trout"], ["4B0082", "Pigment Indigo"], ["4B5D52", "Nandor"], ["4C3024", "Saddle"], ["4C4F56", "Abbey"], ["4D0135", "Blackberry"], ["4D0A18", "Cab Sav"], ["4D1E01", "Indian Tan"], ["4D282D", "Cowboy"], ["4D282E", "Livid Brown"], ["4D3833", "Rock"], ["4D3D14", "Punga"], ["4D400F", "Bronzetone"], ["4D5328", "Woodland"], ["4E0606", "Mahogany"], ["4E2A5A", "Bossanova"], ["4E3B41", "Matterhorn"], ["4E420C", "Bronze Olive"], ["4E4562", "Mulled Wine"], ["4E6649", "Axolotl"], ["4E7F9E", "Wedgewood"], ["4EABD1", "Shakespeare"], ["4F1C70", "Honey Flower"], ["4F2398", "Daisy Bush"], ["4F69C6", "Indigo"], ["4F7942", "Fern Green"], ["4F9D5D", "Fruit Salad"], ["4FA83D", "Apple"], ["504351", "Mortar"], ["507096", "Kashmir Blue"], ["507672", "Cutty Sark"], ["50C878", "Emerald"], ["514649", "Emperor"], ["516E3D", "Chalet Green"], ["517C66", "Como"], ["51808F", "Smalt Blue"], ["52001F", "Castro"], ["520C17", "Maroon Oak"], ["523C94", "Gigas"], ["533455", "Voodoo"], ["534491", "Victoria"], ["53824B", "Hippie Green"], ["541012", "Heath"], ["544333", "Judge Gray"], ["54534D", "Fuscous Gray"], ["549019", "Vida Loca"], ["55280C", "Cioccolato"], ["555B10", "Saratoga"], ["556D56", "Finlandia"], ["5590D9", "Havelock Blue"], ["56B4BE", "Fountain Blue"], ["578363", "Spring Leaves"], ["583401", "Saddle Brown"], ["585562", "Scarpa Flow"], ["587156", "Cactus"], ["589AAF", "Hippie Blue"], ["591D35", "Wine Berry"], ["592804", "Brown Bramble"], ["593737", "Congo Brown"], ["594433", "Millbrook"], ["5A6E9C", "Waikawa Gray"], ["5A87A0", "Horizon"], ["5B3013", "Jambalaya"], ["5C0120", "Bordeaux"], ["5C0536", "Mulberry Wood"], ["5C2E01", "Carnaby Tan"], ["5C5D75", "Comet"], ["5D1E0F", "Redwood"], ["5D4C51", "Don Juan"], ["5D5C58", "Chicago"], ["5D5E37", "Verdigris"], ["5D7747", "Dingley"], ["5DA19F", "Breaker Bay"], ["5E483E", "Kabul"], ["5E5D3B", "Hemlock"], ["5F3D26", "Irish Coffee"], ["5F5F6E", "Mid Gray"], ["5F6672", "Shuttle Gray"], ["5FA777", "Aqua Forest"], ["5FB3AC", "Tradewind"], ["604913", "Horses Neck"], ["605B73", "Smoky"], ["606E68", "Corduroy"], ["6093D1", "Danube"], ["612718", "Espresso"], ["614051", "Eggplant"], ["615D30", "Costa Del Sol"], ["61845F", "Glade Green"], ["622F30", "Buccaneer"], ["623F2D", "Quincy"], ["624E9A", "Butterfly Bush"], ["625119", "West Coast"], ["626649", "Finch"], ["639A8F", "Patina"], ["63B76C", "Fern"], ["6456B7", "Blue Violet"], ["646077", "Dolphin"], ["646463", "Storm Dust"], ["646A54", "Siam"], ["646E75", "Nevada"], ["6495ED", "Cornflower Blue"], ["64CCDB", "Viking"], ["65000B", "Rosewood"], ["651A14", "Cherrywood"], ["652DC1", "Purple Heart"], ["657220", "Fern Frond"], ["65745D", "Willow Grove"], ["65869F", "Hoki"], ["660045", "Pompadour"], ["660099", "Purple"], ["66023C", "Tyrian Purple"], ["661010", "Dark Tan"], ["66B58F", "Silver Tree"], ["66FF00", "Bright Green"], ["66FF66", "Screamin\' Green"], ["67032D", "Black Rose"], ["675FA6", "Scampi"], ["676662", "Ironside Gray"], ["678975", "Viridian Green"], ["67A712", "Christi"], ["683600", "Nutmeg Wood Finish"], ["685558", "Zambezi"], ["685E6E", "Salt Box"], ["692545", "Tawny Port"], ["692D54", "Finn"], ["695F62", "Scorpion"], ["697E9A", "Lynch"], ["6A442E", "Spice"], ["6A5D1B", "Himalaya"], ["6A6051", "Soya Bean"], ["6B2A14", "Hairy Heath"], ["6B3FA0", "Royal Purple"], ["6B4E31", "Shingle Fawn"], ["6B5755", "Dorado"], ["6B8BA2", "Bermuda Gray"], ["6B8E23", "Olive Drab"], ["6C3082", "Eminence"], ["6CDAE7", "Turquoise Blue"], ["6D0101", "Lonestar"], ["6D5E54", "Pine Cone"], ["6D6C6C", "Dove Gray"], ["6D9292", "Juniper"], ["6D92A1", "Gothic"], ["6E0902", "Red Oxide"], ["6E1D14", "Moccaccino"], ["6E4826", "Pickled Bean"], ["6E4B26", "Dallas"], ["6E6D57", "Kokoda"], ["6E7783", "Pale Sky"], ["6F440C", "Cafe Royale"], ["6F6A61", "Flint"], ["6F8E63", "Highland"], ["6F9D02", "Limeade"], ["6FD0C5", "Downy"], ["701C1C", "Persian Plum"], ["704214", "Sepia"], ["704A07", "Antique Bronze"], ["704F50", "Ferra"], ["706555", "Coffee"], ["708090", "Slate Gray"], ["711A00", "Cedar Wood Finish"], ["71291D", "Metallic Copper"], ["714693", "Affair"], ["714AB2", "Studio"], ["715D47", "Tobacco Brown"], ["716338", "Yellow Metal"], ["716B56", "Peat"], ["716E10", "Olivetone"], ["717486", "Storm Gray"], ["718080", "Sirocco"], ["71D9E2", "Aquamarine Blue"], ["72010F", "Venetian Red"], ["724A2F", "Old Copper"], ["726D4E", "Go Ben"], ["727B89", "Raven"], ["731E8F", "Seance"], ["734A12", "Raw Umber"], ["736C9F", "Kimberly"], ["736D58", "Crocodile"], ["737829", "Crete"], ["738678", "Xanadu"], ["74640D", "Spicy Mustard"], ["747D63", "Limed Ash"], ["747D83", "Rolling Stone"], ["748881", "Blue Smoke"], ["749378", "Laurel"], ["74C365", "Mantis"], ["755A57", "Russett"], ["7563A8", "Deluge"], ["76395D", "Cosmic"], ["7666C6", "Blue Marguerite"], ["76BD17", "Lima"], ["76D7EA", "Sky Blue"], ["770F05", "Dark Burgundy"], ["771F1F", "Crown of Thorns"], ["773F1A", "Walnut"], ["776F61", "Pablo"], ["778120", "Pacifika"], ["779E86", "Oxley"], ["77DD77", "Pastel Green"], ["780109", "Japanese Maple"], ["782D19", "Mocha"], ["782F16", "Peanut"], ["78866B", "Camouflage Green"], ["788A25", "Wasabi"], ["788BBA", "Ship Cove"], ["78A39C", "Sea Nymph"], ["795D4C", "Roman Coffee"], ["796878", "Old Lavender"], ["796989", "Rum"], ["796A78", "Fedora"], ["796D62", "Sandstone"], ["79DEEC", "Spray"], ["7A013A", "Siren"], ["7A58C1", "Fuchsia Blue"], ["7A7A7A", "Boulder"], ["7A89B8", "Wild Blue Yonder"], ["7AC488", "De York"], ["7B3801", "Red Beech"], ["7B3F00", "Cinnamon"], ["7B6608", "Yukon Gold"], ["7B7874", "Tapa"], ["7B7C94", "Waterloo "], ["7B8265", "Flax Smoke"], ["7B9F80", "Amulet"], ["7BA05B", "Asparagus"], ["7C1C05", "Kenyan Copper"], ["7C7631", "Pesto"], ["7C778A", "Topaz"], ["7C7B7A", "Concord"], ["7C7B82", "Jumbo"], ["7C881A", "Trendy Green"], ["7CA1A6", "Gumbo"], ["7CB0A1", "Acapulco"], ["7CB7BB", "Neptune"], ["7D2C14", "Pueblo"], ["7DA98D", "Bay Leaf"], ["7DC8F7", "Malibu"], ["7DD8C6", "Bermuda"], ["7E3A15", "Copper Canyon"], ["7F1734", "Claret"], ["7F3A02", "Peru Tan"], ["7F626D", "Falcon"], ["7F7589", "Mobster"], ["7F76D3", "Moody Blue"], ["7FFF00", "Chartreuse"], ["7FFFD4", "Aquamarine"], ["800000", "Maroon"], ["800B47", "Rose Bud Cherry"], ["801818", "Falu Red"], ["80341F", "Red Robin"], ["803790", "Vivid Violet"], ["80461B", "Russet"], ["807E79", "Friar Gray"], ["808000", "Olive"], ["808080", "Gray"], ["80B3AE", "Gulf Stream"], ["80B3C4", "Glacier"], ["80CCEA", "Seagull"], ["81422C", "Nutmeg"], ["816E71", "Spicy Pink"], ["817377", "Empress"], ["819885", "Spanish Green"], ["826F65", "Sand Dune"], ["828685", "Gunsmoke"], ["828F72", "Battleship Gray"], ["831923", "Merlot"], ["837050", "Shadow"], ["83AA5D", "Chelsea Cucumber"], ["83D0C6", "Monte Carlo"], ["843179", "Plum"], ["84A0A0", "Granny Smith"], ["8581D9", "Chetwode Blue"], ["858470", "Bandicoot"], ["859FAF", "Bali Hai"], ["85C4CC", "Half Baked"], ["860111", "Red Devil"], ["863C3C", "Lotus"], ["86483C", "Ironstone"], ["864D1E", "Bull Shot"], ["86560A", "Rusty Nail"], ["868974", "Bitter"], ["86949F", "Regent Gray"], ["871550", "Disco"], ["87756E", "Americano"], ["877C7B", "Hurricane"], ["878D91", "Oslo Gray"], ["87AB39", "Sushi"], ["885342", "Spicy Mix"], ["886221", "Kumera"], ["888387", "Suva Gray"], ["888D65", "Avocado"], ["893456", "Camelot"], ["893843", "Solid Pink"], ["894367", "Cannon Pink"], ["897D6D", "Makara"], ["8A3324", "Burnt Umber"], ["8A73D6", "True V"], ["8A8360", "Clay Creek"], ["8A8389", "Monsoon"], ["8A8F8A", "Stack"], ["8AB9F1", "Jordy Blue"], ["8B00FF", "Electric Violet"], ["8B0723", "Monarch"], ["8B6B0B", "Corn Harvest"], ["8B8470", "Olive Haze"], ["8B847E", "Schooner"], ["8B8680", "Natural Gray"], ["8B9C90", "Mantle"], ["8B9FEE", "Portage"], ["8BA690", "Envy"], ["8BA9A5", "Cascade"], ["8BE6D8", "Riptide"], ["8C055E", "Cardinal Pink"], ["8C472F", "Mule Fawn"], ["8C5738", "Potters Clay"], ["8C6495", "Trendy Pink"], ["8D0226", "Paprika"], ["8D3D38", "Sanguine Brown"], ["8D3F3F", "Tosca"], ["8D7662", "Cement"], ["8D8974", "Granite Green"], ["8D90A1", "Manatee"], ["8DA8CC", "Polo Blue"], ["8E0000", "Red Berry"], ["8E4D1E", "Rope"], ["8E6F70", "Opium"], ["8E775E", "Domino"], ["8E8190", "Mamba"], ["8EABC1", "Nepal"], ["8F021C", "Pohutukawa"], ["8F3E33", "El Salva"], ["8F4B0E", "Korma"], ["8F8176", "Squirrel"], ["8FD6B4", "Vista Blue"], ["900020", "Burgundy"], ["901E1E", "Old Brick"], ["907874", "Hemp"], ["907B71", "Almond Frost"], ["908D39", "Sycamore"], ["92000A", "Sangria"], ["924321", "Cumin"], ["926F5B", "Beaver"], ["928573", "Stonewall"], ["928590", "Venus"], ["9370DB", "Medium Purple"], ["93CCEA", "Cornflower"], ["93DFB8", "Algae Green"], ["944747", "Copper Rust"], ["948771", "Arrowtown"], ["950015", "Scarlett"], ["956387", "Strikemaster"], ["959396", "Mountain Mist"], ["960018", "Carmine"], ["964B00", "Brown"], ["967059", "Leather"], ["9678B6", "Purple Mountain\'s Majesty"], ["967BB6", "Lavender Purple"], ["96A8A1", "Pewter"], ["96BBAB", "Summer Green"], ["97605D", "Au Chico"], ["9771B5", "Wisteria"], ["97CD2D", "Atlantis"], ["983D61", "Vin Rouge"], ["9874D3", "Lilac Bush"], ["98777B", "Bazaar"], ["98811B", "Hacienda"], ["988D77", "Pale Oyster"], ["98FF98", "Mint Green"], ["990066", "Fresh Eggplant"], ["991199", "Violet Eggplant"], ["991613", "Tamarillo"], ["991B07", "Totem Pole"], ["996666", "Copper Rose"], ["9966CC", "Amethyst"], ["997A8D", "Mountbatten Pink"], ["9999CC", "Blue Bell"], ["9A3820", "Prairie Sand"], ["9A6E61", "Toast"], ["9A9577", "Gurkha"], ["9AB973", "Olivine"], ["9AC2B8", "Shadow Green"], ["9B4703", "Oregon"], ["9B9E8F", "Lemon Grass"], ["9C3336", "Stiletto"], ["9D5616", "Hawaiian Tan"], ["9DACB7", "Gull Gray"], ["9DC209", "Pistachio"], ["9DE093", "Granny Smith Apple"], ["9DE5FF", "Anakiwa"], ["9E5302", "Chelsea Gem"], ["9E5B40", "Sepia Skin"], ["9EA587", "Sage"], ["9EA91F", "Citron"], ["9EB1CD", "Rock Blue"], ["9EDEE0", "Morning Glory"], ["9F381D", "Cognac"], ["9F821C", "Reef Gold"], ["9F9F9C", "Star Dust"], ["9FA0B1", "Santas Gray"], ["9FD7D3", "Sinbad"], ["9FDD8C", "Feijoa"], ["A02712", "Tabasco"], ["A1750D", "Buttered Rum"], ["A1ADB5", "Hit Gray"], ["A1C50A", "Citrus"], ["A1DAD7", "Aqua Island"], ["A1E9DE", "Water Leaf"], ["A2006D", "Flirt"], ["A23B6C", "Rouge"], ["A26645", "Cape Palliser"], ["A2AAB3", "Gray Chateau"], ["A2AEAB", "Edward"], ["A3807B", "Pharlap"], ["A397B4", "Amethyst Smoke"], ["A3E3ED", "Blizzard Blue"], ["A4A49D", "Delta"], ["A4A6D3", "Wistful"], ["A4AF6E", "Green Smoke"], ["A50B5E", "Jazzberry Jam"], ["A59B91", "Zorba"], ["A5CB0C", "Bahia"], ["A62F20", "Roof Terracotta"], ["A65529", "Paarl"], ["A68B5B", "Barley Corn"], ["A69279", "Donkey Brown"], ["A6A29A", "Dawn"], ["A72525", "Mexican Red"], ["A7882C", "Luxor Gold"], ["A85307", "Rich Gold"], ["A86515", "Reno Sand"], ["A86B6B", "Coral Tree"], ["A8989B", "Dusty Gray"], ["A899E6", "Dull Lavender"], ["A8A589", "Tallow"], ["A8AE9C", "Bud"], ["A8AF8E", "Locust"], ["A8BD9F", "Norway"], ["A8E3BD", "Chinook"], ["A9A491", "Gray Olive"], ["A9ACB6", "Aluminium"], ["A9B2C3", "Cadet Blue"], ["A9B497", "Schist"], ["A9BDBF", "Tower Gray"], ["A9BEF2", "Perano"], ["A9C6C2", "Opal"], ["AA375A", "Night Shadz"], ["AA4203", "Fire"], ["AA8B5B", "Muesli"], ["AA8D6F", "Sandal"], ["AAA5A9", "Shady Lady"], ["AAA9CD", "Logan"], ["AAABB7", "Spun Pearl"], ["AAD6E6", "Regent St Blue"], ["AAF0D1", "Magic Mint"], ["AB0563", "Lipstick"], ["AB3472", "Royal Heath"], ["AB917A", "Sandrift"], ["ABA0D9", "Cold Purple"], ["ABA196", "Bronco"], ["AC8A56", "Limed Oak"], ["AC91CE", "East Side"], ["AC9E22", "Lemon Ginger"], ["ACA494", "Napa"], ["ACA586", "Hillary"], ["ACA59F", "Cloudy"], ["ACACAC", "Silver Chalice"], ["ACB78E", "Swamp Green"], ["ACCBB1", "Spring Rain"], ["ACDD4D", "Conifer"], ["ACE1AF", "Celadon"], ["AD781B", "Mandalay"], ["ADBED1", "Casper"], ["ADDFAD", "Moss Green"], ["ADE6C4", "Padua"], ["ADFF2F", "Green Yellow"], ["AE4560", "Hippie Pink"], ["AE6020", "Desert"], ["AE809E", "Bouquet"], ["AF4035", "Medium Carmine"], ["AF4D43", "Apple Blossom"], ["AF593E", "Brown Rust"], ["AF8751", "Driftwood"], ["AF8F2C", "Alpine"], ["AF9F1C", "Lucky"], ["AFA09E", "Martini"], ["AFB1B8", "Bombay"], ["AFBDD9", "Pigeon Post"], ["B04C6A", "Cadillac"], ["B05D54", "Matrix"], ["B05E81", "Tapestry"], ["B06608", "Mai Tai"], ["B09A95", "Del Rio"], ["B0E0E6", "Powder Blue"], ["B0E313", "Inch Worm"], ["B10000", "Bright Red"], ["B14A0B", "Vesuvius"], ["B1610B", "Pumpkin Skin"], ["B16D52", "Santa Fe"], ["B19461", "Teak"], ["B1E2C1", "Fringy Flower"], ["B1F4E7", "Ice Cold"], ["B20931", "Shiraz"], ["B2A1EA", "Biloba Flower"], ["B32D29", "Tall Poppy"], ["B35213", "Fiery Orange"], ["B38007", "Hot Toddy"], ["B3AF95", "Taupe Gray"], ["B3C110", "La Rioja"], ["B43332", "Well Read"], ["B44668", "Blush"], ["B4CFD3", "Jungle Mist"], ["B57281", "Turkish Rose"], ["B57EDC", "Lavender"], ["B5A27F", "Mongoose"], ["B5B35C", "Olive Green"], ["B5D2CE", "Jet Stream"], ["B5ECDF", "Cruise"], ["B6316C", "Hibiscus"], ["B69D98", "Thatch"], ["B6B095", "Heathered Gray"], ["B6BAA4", "Eagle"], ["B6D1EA", "Spindle"], ["B6D3BF", "Gum Leaf"], ["B7410E", "Rust"], ["B78E5C", "Muddy Waters"], ["B7A214", "Sahara"], ["B7A458", "Husk"], ["B7B1B1", "Nobel"], ["B7C3D0", "Heather"], ["B7F0BE", "Madang"], ["B81104", "Milano Red"], ["B87333", "Copper"], ["B8B56A", "Gimblet"], ["B8C1B1", "Green Spring"], ["B8C25D", "Celery"], ["B8E0F9", "Sail"], ["B94E48", "Chestnut"], ["B95140", "Crail"], ["B98D28", "Marigold"], ["B9C46A", "Wild Willow"], ["B9C8AC", "Rainee"], ["BA0101", "Guardsman Red"], ["BA450C", "Rock Spray"], ["BA6F1E", "Bourbon"], ["BA7F03", "Pirate Gold"], ["BAB1A2", "Nomad"], ["BAC7C9", "Submarine"], ["BAEEF9", "Charlotte"], ["BB3385", "Medium Red Violet"], ["BB8983", "Brandy Rose"], ["BBD009", "Rio Grande"], ["BBD7C1", "Surf"], ["BCC9C2", "Powder Ash"], ["BD5E2E", "Tuscany"], ["BD978E", "Quicksand"], ["BDB1A8", "Silk"], ["BDB2A1", "Malta"], ["BDB3C7", "Chatelle"], ["BDBBD7", "Lavender Gray"], ["BDBDC6", "French Gray"], ["BDC8B3", "Clay Ash"], ["BDC9CE", "Loblolly"], ["BDEDFD", "French Pass"], ["BEA6C3", "London Hue"], ["BEB5B7", "Pink Swan"], ["BEDE0D", "Fuego"], ["BF5500", "Rose of Sharon"], ["BFB8B0", "Tide"], ["BFBED8", "Blue Haze"], ["BFC1C2", "Silver Sand"], ["BFC921", "Key Lime Pie"], ["BFDBE2", "Ziggurat"], ["BFFF00", "Lime"], ["C02B18", "Thunderbird"], ["C04737", "Mojo"], ["C08081", "Old Rose"], ["C0C0C0", "Silver"], ["C0D3B9", "Pale Leaf"], ["C0D8B6", "Pixie Green"], ["C1440E", "Tia Maria"], ["C154C1", "Fuchsia Pink"], ["C1A004", "Buddha Gold"], ["C1B7A4", "Bison Hide"], ["C1BAB0", "Tea"], ["C1BECD", "Gray Suit"], ["C1D7B0", "Sprout"], ["C1F07C", "Sulu"], ["C26B03", "Indochine"], ["C2955D", "Twine"], ["C2BDB6", "Cotton Seed"], ["C2CAC4", "Pumice"], ["C2E8E5", "Jagged Ice"], ["C32148", "Maroon Flush"], ["C3B091", "Indian Khaki"], ["C3BFC1", "Pale Slate"], ["C3C3BD", "Gray Nickel"], ["C3CDE6", "Periwinkle Gray"], ["C3D1D1", "Tiara"], ["C3DDF9", "Tropical Blue"], ["C41E3A", "Cardinal"], ["C45655", "Fuzzy Wuzzy Brown"], ["C45719", "Orange Roughy"], ["C4C4BC", "Mist Gray"], ["C4D0B0", "Coriander"], ["C4F4EB", "Mint Tulip"], ["C54B8C", "Mulberry"], ["C59922", "Nugget"], ["C5994B", "Tussock"], ["C5DBCA", "Sea Mist"], ["C5E17A", "Yellow Green"], ["C62D42", "Brick Red"], ["C6726B", "Contessa"], ["C69191", "Oriental Pink"], ["C6A84B", "Roti"], ["C6C3B5", "Ash"], ["C6C8BD", "Kangaroo"], ["C6E610", "Las Palmas"], ["C7031E", "Monza"], ["C71585", "Red Violet"], ["C7BCA2", "Coral Reef"], ["C7C1FF", "Melrose"], ["C7C4BF", "Cloud"], ["C7C9D5", "Ghost"], ["C7CD90", "Pine Glade"], ["C7DDE5", "Botticelli"], ["C88A65", "Antique Brass"], ["C8A2C8", "Lilac"], ["C8A528", "Hokey Pokey"], ["C8AABF", "Lily"], ["C8B568", "Laser"], ["C8E3D7", "Edgewater"], ["C96323", "Piper"], ["C99415", "Pizza"], ["C9A0DC", "Light Wisteria"], ["C9B29B", "Rodeo Dust"], ["C9B35B", "Sundance"], ["C9B93B", "Earls Green"], ["C9C0BB", "Silver Rust"], ["C9D9D2", "Conch"], ["C9FFA2", "Reef"], ["C9FFE5", "Aero Blue"], ["CA3435", "Flush Mahogany"], ["CABB48", "Turmeric"], ["CADCD4", "Paris White"], ["CAE00D", "Bitter Lemon"], ["CAE6DA", "Skeptic"], ["CB8FA9", "Viola"], ["CBCAB6", "Foggy Gray"], ["CBD3B0", "Green Mist"], ["CBDBD6", "Nebula"], ["CC3333", "Persian Red"], ["CC5500", "Burnt Orange"], ["CC7722", "Ochre"], ["CC8899", "Puce"], ["CCCAA8", "Thistle Green"], ["CCCCFF", "Periwinkle"], ["CCFF00", "Electric Lime"], ["CD5700", "Tenn"], ["CD5C5C", "Chestnut Rose"], ["CD8429", "Brandy Punch"], ["CDF4FF", "Onahau"], ["CEB98F", "Sorrell Brown"], ["CEBABA", "Cold Turkey"], ["CEC291", "Yuma"], ["CEC7A7", "Chino"], ["CFA39D", "Eunry"], ["CFB53B", "Old Gold"], ["CFDCCF", "Tasman"], ["CFE5D2", "Surf Crest"], ["CFF9F3", "Humming Bird"], ["CFFAF4", "Scandal"], ["D05F04", "Red Stage"], ["D06DA1", "Hopbush"], ["D07D12", "Meteor"], ["D0BEF8", "Perfume"], ["D0C0E5", "Prelude"], ["D0F0C0", "Tea Green"], ["D18F1B", "Geebung"], ["D1BEA8", "Vanilla"], ["D1C6B4", "Soft Amber"], ["D1D2CA", "Celeste"], ["D1D2DD", "Mischka"], ["D1E231", "Pear"], ["D2691E", "Hot Cinnamon"], ["D27D46", "Raw Sienna"], ["D29EAA", "Careys Pink"], ["D2B48C", "Tan"], ["D2DA97", "Deco"], ["D2F6DE", "Blue Romance"], ["D2F8B0", "Gossip"], ["D3CBBA", "Sisal"], ["D3CDC5", "Swirl"], ["D47494", "Charm"], ["D4B6AF", "Clam Shell"], ["D4BF8D", "Straw"], ["D4C4A8", "Akaroa"], ["D4CD16", "Bird Flower"], ["D4D7D9", "Iron"], ["D4DFE2", "Geyser"], ["D4E2FC", "Hawkes Blue"], ["D54600", "Grenadier"], ["D591A4", "Can Can"], ["D59A6F", "Whiskey"], ["D5D195", "Winter Hazel"], ["D5F6E3", "Granny Apple"], ["D69188", "My Pink"], ["D6C562", "Tacha"], ["D6CEF6", "Moon Raker"], ["D6D6D1", "Quill Gray"], ["D6FFDB", "Snowy Mint"], ["D7837F", "New York Pink"], ["D7C498", "Pavlova"], ["D7D0FF", "Fog"], ["D84437", "Valencia"], ["D87C63", "Japonica"], ["D8BFD8", "Thistle"], ["D8C2D5", "Maverick"], ["D8FCFA", "Foam"], ["D94972", "Cabaret"], ["D99376", "Burning Sand"], ["D9B99B", "Cameo"], ["D9D6CF", "Timberwolf"], ["D9DCC1", "Tana"], ["D9E4F5", "Link Water"], ["D9F7FF", "Mabel"], ["DA3287", "Cerise"], ["DA5B38", "Flame Pea"], ["DA6304", "Bamboo"], ["DA6A41", "Red Damask"], ["DA70D6", "Orchid"], ["DA8A67", "Copperfield"], ["DAA520", "Golden Grass"], ["DAECD6", "Zanah"], ["DAF4F0", "Iceberg"], ["DAFAFF", "Oyster Bay"], ["DB5079", "Cranberry"], ["DB9690", "Petite Orchid"], ["DB995E", "Di Serria"], ["DBDBDB", "Alto"], ["DBFFF8", "Frosted Mint"], ["DC143C", "Crimson"], ["DC4333", "Punch"], ["DCB20C", "Galliano"], ["DCB4BC", "Blossom"], ["DCD747", "Wattle"], ["DCD9D2", "Westar"], ["DCDDCC", "Moon Mist"], ["DCEDB4", "Caper"], ["DCF0EA", "Swans Down"], ["DDD6D5", "Swiss Coffee"], ["DDF9F1", "White Ice"], ["DE3163", "Cerise Red"], ["DE6360", "Roman"], ["DEA681", "Tumbleweed"], ["DEBA13", "Gold Tips"], ["DEC196", "Brandy"], ["DECBC6", "Wafer"], ["DED4A4", "Sapling"], ["DED717", "Barberry"], ["DEE5C0", "Beryl Green"], ["DEF5FF", "Pattens Blue"], ["DF73FF", "Heliotrope"], ["DFBE6F", "Apache"], ["DFCD6F", "Chenin"], ["DFCFDB", "Lola"], ["DFECDA", "Willow Brook"], ["DFFF00", "Chartreuse Yellow"], ["E0B0FF", "Mauve"], ["E0B646", "Anzac"], ["E0B974", "Harvest Gold"], ["E0C095", "Calico"], ["E0FFFF", "Baby Blue"], ["E16865", "Sunglo"], ["E1BC64", "Equator"], ["E1C0C8", "Pink Flare"], ["E1E6D6", "Periglacial Blue"], ["E1EAD4", "Kidnapper"], ["E1F6E8", "Tara"], ["E25465", "Mandy"], ["E2725B", "Terracotta"], ["E28913", "Golden Bell"], ["E292C0", "Shocking"], ["E29418", "Dixie"], ["E29CD2", "Light Orchid"], ["E2D8ED", "Snuff"], ["E2EBED", "Mystic"], ["E2F3EC", "Apple Green"], ["E30B5C", "Razzmatazz"], ["E32636", "Alizarin Crimson"], ["E34234", "Cinnabar"], ["E3BEBE", "Cavern Pink"], ["E3F5E1", "Peppermint"], ["E3F988", "Mindaro"], ["E47698", "Deep Blush"], ["E49B0F", "Gamboge"], ["E4C2D5", "Melanie"], ["E4CFDE", "Twilight"], ["E4D1C0", "Bone"], ["E4D422", "Sunflower"], ["E4D5B7", "Grain Brown"], ["E4D69B", "Zombie"], ["E4F6E7", "Frostee"], ["E4FFD1", "Snow Flurry"], ["E52B50", "Amaranth"], ["E5841B", "Zest"], ["E5CCC9", "Dust Storm"], ["E5D7BD", "Stark White"], ["E5D8AF", "Hampton"], ["E5E0E1", "Bon Jour"], ["E5E5E5", "Mercury"], ["E5F9F6", "Polar"], ["E64E03", "Trinidad"], ["E6BE8A", "Gold Sand"], ["E6BEA5", "Cashmere"], ["E6D7B9", "Double Spanish White"], ["E6E4D4", "Satin Linen"], ["E6F2EA", "Harp"], ["E6F8F3", "Off Green"], ["E6FFE9", "Hint of Green"], ["E6FFFF", "Tranquil"], ["E77200", "Mango Tango"], ["E7730A", "Christine"], ["E79F8C", "Tonys Pink"], ["E79FC4", "Kobi"], ["E7BCB4", "Rose Fog"], ["E7BF05", "Corn"], ["E7CD8C", "Putty"], ["E7ECE6", "Gray Nurse"], ["E7F8FF", "Lily White"], ["E7FEFF", "Bubbles"], ["E89928", "Fire Bush"], ["E8B9B3", "Shilo"], ["E8E0D5", "Pearl Bush"], ["E8EBE0", "Green White"], ["E8F1D4", "Chrome White"], ["E8F2EB", "Gin"], ["E8F5F2", "Aqua Squeeze"], ["E96E00", "Clementine"], ["E97451", "Burnt Sienna"], ["E97C07", "Tahiti Gold"], ["E9CECD", "Oyster Pink"], ["E9D75A", "Confetti"], ["E9E3E3", "Ebb"], ["E9F8ED", "Ottoman"], ["E9FFFD", "Clear Day"], ["EA88A8", "Carissma"], ["EAAE69", "Porsche"], ["EAB33B", "Tulip Tree"], ["EAC674", "Rob Roy"], ["EADAB8", "Raffia"], ["EAE8D4", "White Rock"], ["EAF6EE", "Panache"], ["EAF6FF", "Solitude"], ["EAF9F5", "Aqua Spring"], ["EAFFFE", "Dew"], ["EB9373", "Apricot"], ["EBC2AF", "Zinnwaldite"], ["ECA927", "Fuel Yellow"], ["ECC54E", "Ronchi"], ["ECC7EE", "French Lilac"], ["ECCDB9", "Just Right"], ["ECE090", "Wild Rice"], ["ECEBBD", "Fall Green"], ["ECEBCE", "Aths Special"], ["ECF245", "Starship"], ["ED0A3F", "Red Ribbon"], ["ED7A1C", "Tango"], ["ED9121", "Carrot Orange"], ["ED989E", "Sea Pink"], ["EDB381", "Tacao"], ["EDC9AF", "Desert Sand"], ["EDCDAB", "Pancho"], ["EDDCB1", "Chamois"], ["EDEA99", "Primrose"], ["EDF5DD", "Frost"], ["EDF5F5", "Aqua Haze"], ["EDF6FF", "Zumthor"], ["EDF9F1", "Narvik"], ["EDFC84", "Honeysuckle"], ["EE82EE", "Lavender Magenta"], ["EEC1BE", "Beauty Bush"], ["EED794", "Chalky"], ["EED9C4", "Almond"], ["EEDC82", "Flax"], ["EEDEDA", "Bizarre"], ["EEE3AD", "Double Colonial White"], ["EEEEE8", "Cararra"], ["EEEF78", "Manz"], ["EEF0C8", "Tahuna Sands"], ["EEF0F3", "Athens Gray"], ["EEF3C3", "Tusk"], ["EEF4DE", "Loafer"], ["EEF6F7", "Catskill White"], ["EEFDFF", "Twilight Blue"], ["EEFF9A", "Jonquil"], ["EEFFE2", "Rice Flower"], ["EF863F", "Jaffa"], ["EFEFEF", "Gallery"], ["EFF2F3", "Porcelain"], ["F091A9", "Mauvelous"], ["F0D52D", "Golden Dream"], ["F0DB7D", "Golden Sand"], ["F0DC82", "Buff"], ["F0E2EC", "Prim"], ["F0E68C", "Khaki"], ["F0EEFD", "Selago"], ["F0EEFF", "Titan White"], ["F0F8FF", "Alice Blue"], ["F0FCEA", "Feta"], ["F18200", "Gold Drop"], ["F19BAB", "Wewak"], ["F1E788", "Sahara Sand"], ["F1E9D2", "Parchment"], ["F1E9FF", "Blue Chalk"], ["F1EEC1", "Mint Julep"], ["F1F1F1", "Seashell"], ["F1F7F2", "Saltpan"], ["F1FFAD", "Tidal"], ["F1FFC8", "Chiffon"], ["F2552A", "Flamingo"], ["F28500", "Tangerine"], ["F2C3B2", "Mandys Pink"], ["F2F2F2", "Concrete"], ["F2FAFA", "Black Squeeze"], ["F34723", "Pomegranate"], ["F3AD16", "Buttercup"], ["F3D69D", "New Orleans"], ["F3D9DF", "Vanilla Ice"], ["F3E7BB", "Sidecar"], ["F3E9E5", "Dawn Pink"], ["F3EDCF", "Wheatfield"], ["F3FB62", "Canary"], ["F3FBD4", "Orinoco"], ["F3FFD8", "Carla"], ["F400A1", "Hollywood Cerise"], ["F4A460", "Sandy brown"], ["F4C430", "Saffron"], ["F4D81C", "Ripe Lemon"], ["F4EBD3", "Janna"], ["F4F2EE", "Pampas"], ["F4F4F4", "Wild Sand"], ["F4F8FF", "Zircon"], ["F57584", "Froly"], ["F5C85C", "Cream Can"], ["F5C999", "Manhattan"], ["F5D5A0", "Maize"], ["F5DEB3", "Wheat"], ["F5E7A2", "Sandwisp"], ["F5E7E2", "Pot Pourri"], ["F5E9D3", "Albescent White"], ["F5EDEF", "Soft Peach"], ["F5F3E5", "Ecru White"], ["F5F5DC", "Beige"], ["F5FB3D", "Golden Fizz"], ["F5FFBE", "Australian Mint"], ["F64A8A", "French Rose"], ["F653A6", "Brilliant Rose"], ["F6A4C9", "Illusion"], ["F6F0E6", "Merino"], ["F6F7F7", "Black Haze"], ["F6FFDC", "Spring Sun"], ["F7468A", "Violet Red"], ["F77703", "Chilean Fire"], ["F77FBE", "Persian Pink"], ["F7B668", "Rajah"], ["F7C8DA", "Azalea"], ["F7DBE6", "We Peep"], ["F7F2E1", "Quarter Spanish White"], ["F7F5FA", "Whisper"], ["F7FAF7", "Snow Drift"], ["F8B853", "Casablanca"], ["F8C3DF", "Chantilly"], ["F8D9E9", "Cherub"], ["F8DB9D", "Marzipan"], ["F8DD5C", "Energy Yellow"], ["F8E4BF", "Givry"], ["F8F0E8", "White Linen"], ["F8F4FF", "Magnolia"], ["F8F6F1", "Spring Wood"], ["F8F7DC", "Coconut Cream"], ["F8F7FC", "White Lilac"], ["F8F8F7", "Desert Storm"], ["F8F99C", "Texas"], ["F8FACD", "Corn Field"], ["F8FDD3", "Mimosa"], ["F95A61", "Carnation"], ["F9BF58", "Saffron Mango"], ["F9E0ED", "Carousel Pink"], ["F9E4BC", "Dairy Cream"], ["F9E663", "Portica"], ["F9E6F4", "Underage Pink"], ["F9EAF3", "Amour"], ["F9F8E4", "Rum Swizzle"], ["F9FF8B", "Dolly"], ["F9FFF6", "Sugar Cane"], ["FA7814", "Ecstasy"], ["FA9D5A", "Tan Hide"], ["FAD3A2", "Corvette"], ["FADFAD", "Peach Yellow"], ["FAE600", "Turbo"], ["FAEAB9", "Astra"], ["FAECCC", "Champagne"], ["FAF0E6", "Linen"], ["FAF3F0", "Fantasy"], ["FAF7D6", "Citrine White"], ["FAFAFA", "Alabaster"], ["FAFDE4", "Hint of Yellow"], ["FAFFA4", "Milan"], ["FB607F", "Brink Pink"], ["FB8989", "Geraldine"], ["FBA0E3", "Lavender Rose"], ["FBA129", "Sea Buckthorn"], ["FBAC13", "Sun"], ["FBAED2", "Lavender Pink"], ["FBB2A3", "Rose Bud"], ["FBBEDA", "Cupid"], ["FBCCE7", "Classic Rose"], ["FBCEB1", "Apricot Peach"], ["FBE7B2", "Banana Mania"], ["FBE870", "Marigold Yellow"], ["FBE96C", "Festival"], ["FBEA8C", "Sweet Corn"], ["FBEC5D", "Candy Corn"], ["FBF9F9", "Hint of Red"], ["FBFFBA", "Shalimar"], ["FC0FC0", "Shocking Pink"], ["FC80A5", "Tickle Me Pink"], ["FC9C1D", "Tree Poppy"], ["FCC01E", "Lightning Yellow"], ["FCD667", "Goldenrod"], ["FCD917", "Candlelight"], ["FCDA98", "Cherokee"], ["FCF4D0", "Double Pearl Lusta"], ["FCF4DC", "Pearl Lusta"], ["FCF8F7", "Vista White"], ["FCFBF3", "Bianca"], ["FCFEDA", "Moon Glow"], ["FCFFE7", "China Ivory"], ["FCFFF9", "Ceramic"], ["FD0E35", "Torch Red"], ["FD5B78", "Wild Watermelon"], ["FD7B33", "Crusta"], ["FD7C07", "Sorbus"], ["FD9FA2", "Sweet Pink"], ["FDD5B1", "Light Apricot"], ["FDD7E4", "Pig Pink"], ["FDE1DC", "Cinderella"], ["FDE295", "Golden Glow"], ["FDE910", "Lemon"], ["FDF5E6", "Old Lace"], ["FDF6D3", "Half Colonial White"], ["FDF7AD", "Drover"], ["FDFEB8", "Pale Prim"], ["FDFFD5", "Cumulus"], ["FE28A2", "Persian Rose"], ["FE4C40", "Sunset Orange"], ["FE6F5E", "Bittersweet"], ["FE9D04", "California"], ["FEA904", "Yellow Sea"], ["FEBAAD", "Melon"], ["FED33C", "Bright Sun"], ["FED85D", "Dandelion"], ["FEDB8D", "Salomie"], ["FEE5AC", "Cape Honey"], ["FEEBF3", "Remy"], ["FEEFCE", "Oasis"], ["FEF0EC", "Bridesmaid"], ["FEF2C7", "Beeswax"], ["FEF3D8", "Bleach White"], ["FEF4CC", "Pipi"], ["FEF4DB", "Half Spanish White"], ["FEF4F8", "Wisp Pink"], ["FEF5F1", "Provincial Pink"], ["FEF7DE", "Half Dutch White"], ["FEF8E2", "Solitaire"], ["FEF8FF", "White Pointer"], ["FEF9E3", "Off Yellow"], ["FEFCED", "Orange White"], ["FF0000", "Red"], ["FF007F", "Rose"], ["FF00CC", "Purple Pizzazz"], ["FF00FF", "Magenta / Fuchsia"], ["FF2400", "Scarlet"], ["FF3399", "Wild Strawberry"], ["FF33CC", "Razzle Dazzle Rose"], ["FF355E", "Radical Red"], ["FF3F34", "Red Orange"], ["FF4040", "Coral Red"], ["FF4D00", "Vermilion"], ["FF4F00", "International Orange"], ["FF6037", "Outrageous Orange"], ["FF6600", "Blaze Orange"], ["FF66FF", "Pink Flamingo"], ["FF681F", "Orange"], ["FF69B4", "Hot Pink"], ["FF6B53", "Persimmon"], ["FF6FFF", "Blush Pink"], ["FF7034", "Burning Orange"], ["FF7518", "Pumpkin"], ["FF7D07", "Flamenco"], ["FF7F00", "Flush Orange"], ["FF7F50", "Coral"], ["FF8C69", "Salmon"], ["FF9000", "Pizazz"], ["FF910F", "West Side"], ["FF91A4", "Pink Salmon"], ["FF9933", "Neon Carrot"], ["FF9966", "Atomic Tangerine"], ["FF9980", "Vivid Tangerine"], ["FF9E2C", "Sunshade"], ["FFA000", "Orange Peel"], ["FFA194", "Mona Lisa"], ["FFA500", "Web Orange"], ["FFA6C9", "Carnation Pink"], ["FFAB81", "Hit Pink"], ["FFAE42", "Yellow Orange"], ["FFB0AC", "Cornflower Lilac"], ["FFB1B3", "Sundown"], ["FFB31F", "My Sin"], ["FFB555", "Texas Rose"], ["FFB7D5", "Cotton Candy"], ["FFB97B", "Macaroni and Cheese"], ["FFBA00", "Selective Yellow"], ["FFBD5F", "Koromiko"], ["FFBF00", "Amber"], ["FFC0A8", "Wax Flower"], ["FFC0CB", "Pink"], ["FFC3C0", "Your Pink"], ["FFC901", "Supernova"], ["FFCBA4", "Flesh"], ["FFCC33", "Sunglow"], ["FFCC5C", "Golden Tainoi"], ["FFCC99", "Peach Orange"], ["FFCD8C", "Chardonnay"], ["FFD1DC", "Pastel Pink"], ["FFD2B7", "Romantic"], ["FFD38C", "Grandis"], ["FFD700", "Gold"], ["FFD800", "School bus Yellow"], ["FFD8D9", "Cosmos"], ["FFDB58", "Mustard"], ["FFDCD6", "Peach Schnapps"], ["FFDDAF", "Caramel"], ["FFDDCD", "Tuft Bush"], ["FFDDCF", "Watusi"], ["FFDDF4", "Pink Lace"], ["FFDEAD", "Navajo White"], ["FFDEB3", "Frangipani"], ["FFE1DF", "Pippin"], ["FFE1F2", "Pale Rose"], ["FFE2C5", "Negroni"], ["FFE5A0", "Cream Brulee"], ["FFE5B4", "Peach"], ["FFE6C7", "Tequila"], ["FFE772", "Kournikova"], ["FFEAC8", "Sandy Beach"], ["FFEAD4", "Karry"], ["FFEC13", "Broom"], ["FFEDBC", "Colonial White"], ["FFEED8", "Derby"], ["FFEFA1", "Vis Vis"], ["FFEFC1", "Egg White"], ["FFEFD5", "Papaya Whip"], ["FFEFEC", "Fair Pink"], ["FFF0DB", "Peach Cream"], ["FFF0F5", "Lavender blush"], ["FFF14F", "Gorse"], ["FFF1B5", "Buttermilk"], ["FFF1D8", "Pink Lady"], ["FFF1EE", "Forget Me Not"], ["FFF1F9", "Tutu"], ["FFF39D", "Picasso"], ["FFF3F1", "Chardon"], ["FFF46E", "Paris Daisy"], ["FFF4CE", "Barley White"], ["FFF4DD", "Egg Sour"], ["FFF4E0", "Sazerac"], ["FFF4E8", "Serenade"], ["FFF4F3", "Chablis"], ["FFF5EE", "Seashell Peach"], ["FFF5F3", "Sauvignon"], ["FFF6D4", "Milk Punch"], ["FFF6DF", "Varden"], ["FFF6F5", "Rose White"], ["FFF8D1", "Baja White"], ["FFF9E2", "Gin Fizz"], ["FFF9E6", "Early Dawn"], ["FFFACD", "Lemon Chiffon"], ["FFFAF4", "Bridal Heath"], ["FFFBDC", "Scotch Mist"], ["FFFBF9", "Soapstone"], ["FFFC99", "Witch Haze"], ["FFFCEA", "Buttery White"], ["FFFCEE", "Island Spice"], ["FFFDD0", "Cream"], ["FFFDE6", "Chilean Heath"], ["FFFDE8", "Travertine"], ["FFFDF3", "Orchid White"], ["FFFDF4", "Quarter Pearl Lusta"], ["FFFEE1", "Half and Half"], ["FFFEEC", "Apricot White"], ["FFFEF0", "Rice Cake"], ["FFFEF6", "Black White"], ["FFFEFD", "Romance"], ["FFFF00", "Yellow"], ["FFFF66", "Laser Lemon"], ["FFFF99", "Pale Canary"], ["FFFFB4", "Portafino"], ["FFFFF0", "Ivory"], ["FFFFFF", "White"], ["acc2d9", "cloudy blue"], ["56ae57", "dark pastel green"], ["b2996e", "dust"], ["a8ff04", "electric lime"], ["69d84f", "fresh green"], ["894585", "light eggplant"], ["70b23f", "nasty green"], ["d4ffff", "really light blue"], ["65ab7c", "tea"], ["952e8f", "warm purple"], ["fcfc81", "yellowish tan"], ["a5a391", "cement"], ["388004", "dark grass green"], ["4c9085", "dusty teal"], ["5e9b8a", "grey teal"], ["efb435", "macaroni and cheese"], ["d99b82", "pinkish tan"], ["0a5f38", "spruce"], ["0c06f7", "strong blue"], ["61de2a", "toxic green"], ["3778bf", "windows blue"], ["2242c7", "blue blue"], ["533cc6", "blue with a hint of purple"], ["9bb53c", "booger"], ["05ffa6", "bright sea green"], ["1f6357", "dark green blue"], ["017374", "deep turquoise"], ["0cb577", "green teal"], ["ff0789", "strong pink"], ["afa88b", "bland"], ["08787f", "deep aqua"], ["dd85d7", "lavender pink"], ["a6c875", "light moss green"], ["a7ffb5", "light seafoam green"], ["c2b709", "olive yellow"], ["e78ea5", "pig pink"], ["966ebd", "deep lilac"], ["ccad60", "desert"], ["ac86a8", "dusty lavender"], ["947e94", "purpley grey"], ["983fb2", "purply"], ["ff63e9", "candy pink"], ["b2fba5", "light pastel green"], ["63b365", "boring green"], ["8ee53f", "kiwi green"], ["b7e1a1", "light grey green"], ["ff6f52", "orange pink"], ["bdf8a3", "tea green"], ["d3b683", "very light brown"], ["fffcc4", "egg shell"], ["430541", "eggplant purple"], ["ffb2d0", "powder pink"], ["997570", "reddish grey"], ["ad900d", "baby shit brown"], ["c48efd", "liliac"], ["507b9c", "stormy blue"], ["7d7103", "ugly brown"], ["fffd78", "custard"], ["da467d", "darkish pink"], ["410200", "deep brown"], ["c9d179", "greenish beige"], ["fffa86", "manilla"], ["5684ae", "off blue"], ["6b7c85", "battleship grey"], ["6f6c0a", "browny green"], ["7e4071", "bruise"], ["009337", "kelley green"], ["d0e429", "sickly yellow"], ["fff917", "sunny yellow"], ["1d5dec", "azul"], ["054907", "darkgreen"], ["b5ce08", "green/yellow"], ["8fb67b", "lichen"], ["c8ffb0", "light light green"], ["fdde6c", "pale gold"], ["ffdf22", "sun yellow"], ["a9be70", "tan green"], ["6832e3", "burple"], ["fdb147", "butterscotch"], ["c7ac7d", "toupe"], ["fff39a", "dark cream"], ["850e04", "indian red"], ["efc0fe", "light lavendar"], ["40fd14", "poison green"], ["b6c406", "baby puke green"], ["9dff00", "bright yellow green"], ["3c4142", "charcoal grey"], ["f2ab15", "squash"], ["ac4f06", "cinnamon"], ["c4fe82", "light pea green"], ["2cfa1f", "radioactive green"], ["9a6200", "raw sienna"], ["ca9bf7", "baby purple"], ["875f42", "cocoa"], ["3a2efe", "light royal blue"], ["fd8d49", "orangeish"], ["8b3103", "rust brown"], ["cba560", "sand brown"], ["698339", "swamp"], ["0cdc73", "tealish green"], ["b75203", "burnt siena"], ["7f8f4e", "camo"], ["26538d", "dusk blue"], ["63a950", "fern"], ["c87f89", "old rose"], ["b1fc99", "pale light green"], ["ff9a8a", "peachy pink"], ["f6688e", "rosy pink"], ["76fda8", "light bluish green"], ["53fe5c", "light bright green"], ["4efd54", "light neon green"], ["a0febf", "light seafoam"], ["7bf2da", "tiffany blue"], ["bcf5a6", "washed out green"], ["ca6b02", "browny orange"], ["107ab0", "nice blue"], ["2138ab", "sapphire"], ["719f91", "greyish teal"], ["fdb915", "orangey yellow"], ["fefcaf", "parchment"], ["fcf679", "straw"], ["1d0200", "very dark brown"], ["cb6843", "terracota"], ["31668a", "ugly blue"], ["247afd", "clear blue"], ["ffffb6", "creme"], ["90fda9", "foam green"], ["86a17d", "grey/green"], ["fddc5c", "light gold"], ["78d1b6", "seafoam blue"], ["13bbaf", "topaz"], ["fb5ffc", "violet pink"], ["20f986", "wintergreen"], ["ffe36e", "yellow tan"], ["9d0759", "dark fuchsia"], ["3a18b1", "indigo blue"], ["c2ff89", "light yellowish green"], ["d767ad", "pale magenta"], ["720058", "rich purple"], ["ffda03", "sunflower yellow"], ["01c08d", "green/blue"], ["ac7434", "leather"], ["014600", "racing green"], ["9900fa", "vivid purple"], ["02066f", "dark royal blue"], ["8e7618", "hazel"], ["d1768f", "muted pink"], ["96b403", "booger green"], ["fdff63", "canary"], ["95a3a6", "cool grey"], ["7f684e", "dark taupe"], ["751973", "darkish purple"], ["089404", "true green"], ["ff6163", "coral pink"], ["598556", "dark sage"], ["214761", "dark slate blue"], ["3c73a8", "flat blue"], ["ba9e88", "mushroom"], ["021bf9", "rich blue"], ["734a65", "dirty purple"], ["23c48b", "greenblue"], ["8fae22", "icky green"], ["e6f2a2", "light khaki"], ["4b57db", "warm blue"], ["d90166", "dark hot pink"], ["015482", "deep sea blue"], ["9d0216", "carmine"], ["728f02", "dark yellow green"], ["ffe5ad", "pale peach"], ["4e0550", "plum purple"], ["f9bc08", "golden rod"], ["ff073a", "neon red"], ["c77986", "old pink"], ["d6fffe", "very pale blue"], ["fe4b03", "blood orange"], ["fd5956", "grapefruit"], ["fce166", "sand yellow"], ["b2713d", "clay brown"], ["1f3b4d", "dark blue grey"], ["699d4c", "flat green"], ["56fca2", "light green blue"], ["fb5581", "warm pink"], ["3e82fc", "dodger blue"], ["a0bf16", "gross green"], ["d6fffa", "ice"], ["4f738e", "metallic blue"], ["ffb19a", "pale salmon"], ["5c8b15", "sap green"], ["54ac68", "algae"], ["89a0b0", "bluey grey"], ["7ea07a", "greeny grey"], ["1bfc06", "highlighter green"], ["cafffb", "light light blue"], ["b6ffbb", "light mint"], ["a75e09", "raw umber"], ["152eff", "vivid blue"], ["8d5eb7", "deep lavender"], ["5f9e8f", "dull teal"], ["63f7b4", "light greenish blue"], ["606602", "mud green"], ["fc86aa", "pinky"], ["8c0034", "red wine"], ["758000", "shit green"], ["ab7e4c", "tan brown"], ["030764", "darkblue"], ["fe86a4", "rosa"], ["d5174e", "lipstick"], ["fed0fc", "pale mauve"], ["680018", "claret"], ["fedf08", "dandelion"], ["fe420f", "orangered"], ["6f7c00", "poop green"], ["ca0147", "ruby"], ["1b2431", "dark"], ["00fbb0", "greenish turquoise"], ["db5856", "pastel red"], ["ddd618", "piss yellow"], ["41fdfe", "bright cyan"], ["cf524e", "dark coral"], ["21c36f", "algae green"], ["a90308", "darkish red"], ["6e1005", "reddy brown"], ["fe828c", "blush pink"], ["4b6113", "camouflage green"], ["4da409", "lawn green"], ["beae8a", "putty"], ["0339f8", "vibrant blue"], ["a88f59", "dark sand"], ["5d21d0", "purple/blue"], ["feb209", "saffron"], ["4e518b", "twilight"], ["964e02", "warm brown"], ["85a3b2", "bluegrey"], ["ff69af", "bubble gum pink"], ["c3fbf4", "duck egg blue"], ["2afeb7", "greenish cyan"], ["005f6a", "petrol"], ["0c1793", "royal"], ["ffff81", "butter"], ["f0833a", "dusty orange"], ["f1f33f", "off yellow"], ["b1d27b", "pale olive green"], ["fc824a", "orangish"], ["71aa34", "leaf"], ["b7c9e2", "light blue grey"], ["4b0101", "dried blood"], ["a552e6", "lightish purple"], ["af2f0d", "rusty red"], ["8b88f8", "lavender blue"], ["9af764", "light grass green"], ["a6fbb2", "light mint green"], ["ffc512", "sunflower"], ["750851", "velvet"], ["c14a09", "brick orange"], ["fe2f4a", "lightish red"], ["0203e2", "pure blue"], ["0a437a", "twilight blue"], ["a50055", "violet red"], ["ae8b0c", "yellowy brown"], ["fd798f", "carnation"], ["bfac05", "muddy yellow"], ["3eaf76", "dark seafoam green"], ["c74767", "deep rose"], ["b9484e", "dusty red"], ["647d8e", "grey/blue"], ["bffe28", "lemon lime"], ["d725de", "purple/pink"], ["b29705", "brown yellow"], ["673a3f", "purple brown"], ["a87dc2", "wisteria"], ["fafe4b", "banana yellow"], ["c0022f", "lipstick red"], ["0e87cc", "water blue"], ["8d8468", "brown grey"], ["ad03de", "vibrant purple"], ["8cff9e", "baby green"], ["94ac02", "barf green"], ["c4fff7", "eggshell blue"], ["fdee73", "sandy yellow"], ["33b864", "cool green"], ["fff9d0", "pale"], ["758da3", "blue/grey"], ["f504c9", "hot magenta"], ["77a1b5", "greyblue"], ["8756e4", "purpley"], ["889717", "baby shit green"], ["c27e79", "brownish pink"], ["017371", "dark aquamarine"], ["9f8303", "diarrhea"], ["f7d560", "light mustard"], ["bdf6fe", "pale sky blue"], ["75b84f", "turtle green"], ["9cbb04", "bright olive"], ["29465b", "dark grey blue"], ["696006", "greeny brown"], ["adf802", "lemon green"], ["c1c6fc", "light periwinkle"], ["35ad6b", "seaweed green"], ["fffd37", "sunshine yellow"], ["a442a0", "ugly purple"], ["f36196", "medium pink"], ["947706", "puke brown"], ["fff4f2", "very light pink"], ["1e9167", "viridian"], ["b5c306", "bile"], ["feff7f", "faded yellow"], ["cffdbc", "very pale green"], ["0add08", "vibrant green"], ["87fd05", "bright lime"], ["1ef876", "spearmint"], ["7bfdc7", "light aquamarine"], ["bcecac", "light sage"], ["bbf90f", "yellowgreen"], ["ab9004", "baby poo"], ["1fb57a", "dark seafoam"], ["00555a", "deep teal"], ["a484ac", "heather"], ["c45508", "rust orange"], ["3f829d", "dirty blue"], ["548d44", "fern green"], ["c95efb", "bright lilac"], ["3ae57f", "weird green"], ["016795", "peacock blue"], ["87a922", "avocado green"], ["f0944d", "faded orange"], ["5d1451", "grape purple"], ["25ff29", "hot green"], ["d0fe1d", "lime yellow"], ["ffa62b", "mango"], ["01b44c", "shamrock"], ["ff6cb5", "bubblegum"], ["6b4247", "purplish brown"], ["c7c10c", "vomit yellow"], ["b7fffa", "pale cyan"], ["aeff6e", "key lime"], ["ec2d01", "tomato red"], ["76ff7b", "lightgreen"], ["730039", "merlot"], ["040348", "night blue"], ["df4ec8", "purpleish pink"], ["6ecb3c", "apple"], ["8f9805", "baby poop green"], ["5edc1f", "green apple"], ["d94ff5", "heliotrope"], ["c8fd3d", "yellow/green"], ["070d0d", "almost black"], ["4984b8", "cool blue"], ["51b73b", "leafy green"], ["ac7e04", "mustard brown"], ["4e5481", "dusk"], ["876e4b", "dull brown"], ["58bc08", "frog green"], ["2fef10", "vivid green"], ["2dfe54", "bright light green"], ["0aff02", "fluro green"], ["9cef43", "kiwi"], ["18d17b", "seaweed"], ["35530a", "navy green"], ["1805db", "ultramarine blue"], ["6258c4", "iris"], ["ff964f", "pastel orange"], ["ffab0f", "yellowish orange"], ["8f8ce7", "perrywinkle"], ["24bca8", "tealish"], ["3f012c", "dark plum"], ["cbf85f", "pear"], ["ff724c", "pinkish orange"], ["280137", "midnight purple"], ["b36ff6", "light urple"], ["48c072", "dark mint"], ["bccb7a", "greenish tan"], ["a8415b", "light burgundy"], ["06b1c4", "turquoise blue"], ["cd7584", "ugly pink"], ["f1da7a", "sandy"], ["ff0490", "electric pink"], ["805b87", "muted purple"], ["50a747", "mid green"], ["a8a495", "greyish"], ["cfff04", "neon yellow"], ["ffff7e", "banana"], ["ff7fa7", "carnation pink"], ["ef4026", "tomato"], ["3c9992", "sea"], ["886806", "muddy brown"], ["04f489", "turquoise green"], ["fef69e", "buff"], ["cfaf7b", "fawn"], ["3b719f", "muted blue"], ["fdc1c5", "pale rose"], ["20c073", "dark mint green"], ["9b5fc0", "amethyst"], ["0f9b8e", "blue/green"], ["742802", "chestnut"], ["9db92c", "sick green"], ["a4bf20", "pea"], ["cd5909", "rusty orange"], ["ada587", "stone"], ["be013c", "rose red"], ["b8ffeb", "pale aqua"], ["dc4d01", "deep orange"], ["a2653e", "earth"], ["638b27", "mossy green"], ["419c03", "grassy green"], ["b1ff65", "pale lime green"], ["9dbcd4", "light grey blue"], ["fdfdfe", "pale grey"], ["77ab56", "asparagus"], ["464196", "blueberry"], ["990147", "purple red"], ["befd73", "pale lime"], ["32bf84", "greenish teal"], ["af6f09", "caramel"], ["a0025c", "deep magenta"], ["ffd8b1", "light peach"], ["7f4e1e", "milk chocolate"], ["bf9b0c", "ocher"], ["6ba353", "off green"], ["f075e6", "purply pink"], ["7bc8f6", "lightblue"], ["475f94", "dusky blue"], ["f5bf03", "golden"], ["fffeb6", "light beige"], ["fffd74", "butter yellow"], ["895b7b", "dusky purple"], ["436bad", "french blue"], ["d0c101", "ugly yellow"], ["c6f808", "greeny yellow"], ["f43605", "orangish red"], ["02c14d", "shamrock green"], ["b25f03", "orangish brown"], ["2a7e19", "tree green"], ["490648", "deep violet"], ["536267", "gunmetal"], ["5a06ef", "blue/purple"], ["cf0234", "cherry"], ["c4a661", "sandy brown"], ["978a84", "warm grey"], ["1f0954", "dark indigo"], ["03012d", "midnight"], ["2bb179", "bluey green"], ["c3909b", "grey pink"], ["a66fb5", "soft purple"], ["770001", "blood"], ["922b05", "brown red"], ["7d7f7c", "medium grey"], ["990f4b", "berry"], ["8f7303", "poo"], ["c83cb9", "purpley pink"], ["fea993", "light salmon"], ["acbb0d", "snot"], ["c071fe", "easter purple"], ["ccfd7f", "light yellow green"], ["00022e", "dark navy blue"], ["828344", "drab"], ["ffc5cb", "light rose"], ["ab1239", "rouge"], ["b0054b", "purplish red"], ["99cc04", "slime green"], ["937c00", "baby poop"], ["019529", "irish green"], ["ef1de7", "pink/purple"], ["000435", "dark navy"], ["42b395", "greeny blue"], ["9d5783", "light plum"], ["c8aca9", "pinkish grey"], ["c87606", "dirty orange"], ["aa2704", "rust red"], ["e4cbff", "pale lilac"], ["fa4224", "orangey red"], ["0804f9", "primary blue"], ["5cb200", "kermit green"], ["76424e", "brownish purple"], ["6c7a0e", "murky green"], ["fbdd7e", "wheat"], ["2a0134", "very dark purple"], ["044a05", "bottle green"], ["fd4659", "watermelon"], ["0d75f8", "deep sky blue"], ["fe0002", "fire engine red"], ["cb9d06", "yellow ochre"], ["fb7d07", "pumpkin orange"], ["b9cc81", "pale olive"], ["edc8ff", "light lilac"], ["61e160", "lightish green"], ["8ab8fe", "carolina blue"], ["920a4e", "mulberry"], ["fe02a2", "shocking pink"], ["9a3001", "auburn"], ["65fe08", "bright lime green"], ["befdb7", "celadon"], ["b17261", "pinkish brown"], ["885f01", "poo brown"], ["02ccfe", "bright sky blue"], ["c1fd95", "celery"], ["836539", "dirt brown"], ["fb2943", "strawberry"], ["84b701", "dark lime"], ["b66325", "copper"], ["7f5112", "medium brown"], ["5fa052", "muted green"], ["6dedfd", "robin\'s egg"], ["0bf9ea", "bright aqua"], ["c760ff", "bright lavender"], ["ffffcb", "ivory"], ["f6cefc", "very light purple"], ["155084", "light navy"], ["f5054f", "pink red"], ["645403", "olive brown"], ["7a5901", "poop brown"], ["a8b504", "mustard green"], ["3d9973", "ocean green"], ["000133", "very dark blue"], ["76a973", "dusty green"], ["2e5a88", "light navy blue"], ["0bf77d", "minty green"], ["bd6c48", "adobe"], ["ac1db8", "barney"], ["2baf6a", "jade green"], ["26f7fd", "bright light blue"], ["aefd6c", "light lime"], ["9b8f55", "dark khaki"], ["ffad01", "orange yellow"], ["c69c04", "ocre"], ["f4d054", "maize"], ["de9dac", "faded pink"], ["05480d", "british racing green"], ["c9ae74", "sandstone"], ["60460f", "mud brown"], ["98f6b0", "light sea green"], ["8af1fe", "robin egg blue"], ["2ee8bb", "aqua marine"], ["11875d", "dark sea green"], ["fdb0c0", "soft pink"], ["b16002", "orangey brown"], ["f7022a", "cherry red"], ["d5ab09", "burnt yellow"], ["86775f", "brownish grey"], ["c69f59", "camel"], ["7a687f", "purplish grey"], ["042e60", "marine"], ["c88d94", "greyish pink"], ["a5fbd5", "pale turquoise"], ["fffe71", "pastel yellow"], ["6241c7", "bluey purple"], ["fffe40", "canary yellow"], ["d3494e", "faded red"], ["985e2b", "sepia"], ["a6814c", "coffee"], ["ff08e8", "bright magenta"], ["9d7651", "mocha"], ["feffca", "ecru"], ["98568d", "purpleish"], ["9e003a", "cranberry"], ["287c37", "darkish green"], ["b96902", "brown orange"], ["ba6873", "dusky rose"], ["ff7855", "melon"], ["94b21c", "sickly green"], ["c5c9c7", "silver"], ["661aee", "purply blue"], ["6140ef", "purpleish blue"], ["9be5aa", "hospital green"], ["7b5804", "shit brown"], ["276ab3", "mid blue"], ["feb308", "amber"], ["8cfd7e", "easter green"], ["6488ea", "soft blue"], ["056eee", "cerulean blue"], ["b27a01", "golden brown"], ["0ffef9", "bright turquoise"], ["fa2a55", "red pink"], ["820747", "red purple"], ["7a6a4f", "greyish brown"], ["f4320c", "vermillion"], ["a13905", "russet"], ["6f828a", "steel grey"], ["a55af4", "lighter purple"], ["ad0afd", "bright violet"], ["004577", "prussian blue"], ["658d6d", "slate green"], ["ca7b80", "dirty pink"], ["005249", "dark blue green"], ["2b5d34", "pine"], ["bff128", "yellowy green"], ["b59410", "dark gold"], ["2976bb", "bluish"], ["014182", "darkish blue"], ["bb3f3f", "dull red"], ["fc2647", "pinky red"], ["a87900", "bronze"], ["82cbb2", "pale teal"], ["667c3e", "military green"], ["fe46a5", "barbie pink"], ["fe83cc", "bubblegum pink"], ["94a617", "pea soup green"], ["a88905", "dark mustard"], ["7f5f00", "shit"], ["9e43a2", "medium purple"], ["062e03", "very dark green"], ["8a6e45", "dirt"], ["cc7a8b", "dusky pink"], ["9e0168", "red violet"], ["fdff38", "lemon yellow"], ["c0fa8b", "pistachio"], ["eedc5b", "dull yellow"], ["7ebd01", "dark lime green"], ["3b5b92", "denim blue"], ["01889f", "teal blue"], ["3d7afd", "lightish blue"], ["5f34e7", "purpley blue"], ["6d5acf", "light indigo"], ["748500", "swamp green"], ["706c11", "brown green"], ["3c0008", "dark maroon"], ["cb00f5", "hot purple"], ["002d04", "dark forest green"], ["658cbb", "faded blue"], ["749551", "drab green"], ["b9ff66", "light lime green"], ["9dc100", "snot green"], ["faee66", "yellowish"], ["7efbb3", "light blue green"], ["7b002c", "bordeaux"], ["c292a1", "light mauve"], ["017b92", "ocean"], ["fcc006", "marigold"], ["657432", "muddy green"], ["d8863b", "dull orange"], ["738595", "steel"], ["aa23ff", "electric purple"], ["08ff08", "fluorescent green"], ["9b7a01", "yellowish brown"], ["f29e8e", "blush"], ["6fc276", "soft green"], ["ff5b00", "bright orange"], ["fdff52", "lemon"], ["866f85", "purple grey"], ["8ffe09", "acid green"], ["eecffe", "pale lavender"], ["510ac9", "violet blue"], ["4f9153", "light forest green"], ["9f2305", "burnt red"], ["728639", "khaki green"], ["de0c62", "cerise"], ["916e99", "faded purple"], ["ffb16d", "apricot"], ["3c4d03", "dark olive green"], ["7f7053", "grey brown"], ["77926f", "green grey"], ["010fcc", "true blue"], ["ceaefa", "pale violet"], ["8f99fb", "periwinkle blue"], ["c6fcff", "light sky blue"], ["5539cc", "blurple"], ["544e03", "green brown"], ["017a79", "bluegreen"], ["01f9c6", "bright teal"], ["c9b003", "brownish yellow"], ["929901", "pea soup"], ["0b5509", "forest"], ["a00498", "barney purple"], ["2000b1", "ultramarine"], ["94568c", "purplish"], ["c2be0e", "puke yellow"], ["748b97", "bluish grey"], ["665fd1", "dark periwinkle"], ["9c6da5", "dark lilac"], ["c44240", "reddish"], ["a24857", "light maroon"], ["825f87", "dusty purple"], ["c9643b", "terra cotta"], ["90b134", "avocado"], ["01386a", "marine blue"], ["25a36f", "teal green"], ["59656d", "slate grey"], ["75fd63", "lighter green"], ["21fc0d", "electric green"], ["5a86ad", "dusty blue"], ["fec615", "golden yellow"], ["fffd01", "bright yellow"], ["dfc5fe", "light lavender"], ["b26400", "umber"], ["7f5e00", "poop"], ["de7e5d", "dark peach"], ["048243", "jungle green"], ["ffffd4", "eggshell"], ["3b638c", "denim"], ["b79400", "yellow brown"], ["84597e", "dull purple"], ["411900", "chocolate brown"], ["7b0323", "wine red"], ["04d9ff", "neon blue"], ["667e2c", "dirty green"], ["fbeeac", "light tan"], ["d7fffe", "ice blue"], ["4e7496", "cadet blue"], ["874c62", "dark mauve"], ["d5ffff", "very light blue"], ["826d8c", "grey purple"], ["ffbacd", "pastel pink"], ["d1ffbd", "very light green"], ["448ee4", "dark sky blue"], ["05472a", "evergreen"], ["d5869d", "dull pink"], ["3d0734", "aubergine"], ["4a0100", "mahogany"], ["f8481c", "reddish orange"], ["02590f", "deep green"], ["89a203", "vomit green"], ["e03fd8", "purple pink"], ["d58a94", "dusty pink"], ["7bb274", "faded green"], ["526525", "camo green"], ["c94cbe", "pinky purple"], ["db4bda", "pink purple"], ["9e3623", "brownish red"], ["b5485d", "dark rose"], ["735c12", "mud"], ["9c6d57", "brownish"], ["028f1e", "emerald green"], ["b1916e", "pale brown"], ["49759c", "dull blue"], ["a0450e", "burnt umber"], ["39ad48", "medium green"], ["b66a50", "clay"], ["8cffdb", "light aqua"], ["a4be5c", "light olive green"], ["cb7723", "brownish orange"], ["05696b", "dark aqua"], ["ce5dae", "purplish pink"], ["c85a53", "dark salmon"], ["96ae8d", "greenish grey"], ["1fa774", "jade"], ["7a9703", "ugly green"], ["ac9362", "dark beige"], ["01a049", "emerald"], ["d9544d", "pale red"], ["fa5ff7", "light magenta"], ["82cafc", "sky"], ["acfffc", "light cyan"], ["fcb001", "yellow orange"], ["910951", "reddish purple"], ["fe2c54", "reddish pink"], ["c875c4", "orchid"], ["cdc50a", "dirty yellow"], ["fd411e", "orange red"], ["9a0200", "deep red"], ["be6400", "orange brown"], ["030aa7", "cobalt blue"], ["fe019a", "neon pink"], ["f7879a", "rose pink"], ["887191", "greyish purple"], ["b00149", "raspberry"], ["12e193", "aqua green"], ["fe7b7c", "salmon pink"], ["ff9408", "tangerine"], ["6a6e09", "brownish green"], ["8b2e16", "red brown"], ["696112", "greenish brown"], ["e17701", "pumpkin"], ["0a481e", "pine green"], ["343837", "charcoal"], ["ffb7ce", "baby pink"], ["6a79f7", "cornflower"], ["5d06e9", "blue violet"], ["3d1c02", "chocolate"], ["82a67d", "greyish green"], ["be0119", "scarlet"], ["c9ff27", "green yellow"], ["373e02", "dark olive"], ["a9561e", "sienna"], ["caa0ff", "pastel purple"], ["ca6641", "terracotta"], ["02d8e9", "aqua blue"], ["88b378", "sage green"], ["980002", "blood red"], ["cb0162", "deep pink"], ["5cac2d", "grass"], ["769958", "moss"], ["a2bffe", "pastel blue"], ["10a674", "bluish green"], ["06b48b", "green blue"], ["af884a", "dark tan"], ["0b8b87", "greenish blue"], ["ffa756", "pale orange"], ["a2a415", "vomit"], ["154406", "forrest green"], ["856798", "dark lavender"], ["34013f", "dark violet"], ["632de9", "purple blue"], ["0a888a", "dark cyan"], ["6f7632", "olive drab"], ["d46a7e", "pinkish"], ["1e488f", "cobalt"], ["bc13fe", "neon purple"], ["7ef4cc", "light turquoise"], ["76cd26", "apple green"], ["74a662", "dull green"], ["80013f", "wine"], ["b1d1fc", "powder blue"], ["ffffe4", "off white"], ["0652ff", "electric blue"], ["045c5a", "dark turquoise"], ["5729ce", "blue purple"], ["069af3", "azure"], ["ff000d", "bright red"], ["f10c45", "pinkish red"], ["5170d7", "cornflower blue"], ["acbf69", "light olive"], ["6c3461", "grape"], ["5e819d", "greyish blue"], ["601ef9", "purplish blue"], ["b0dd16", "yellowish green"], ["cdfd02", "greenish yellow"], ["2c6fbb", "medium blue"], ["c0737a", "dusty rose"], ["d6b4fc", "light violet"], ["020035", "midnight blue"], ["703be7", "bluish purple"], ["fd3c06", "red orange"], ["960056", "dark magenta"], ["40a368", "greenish"], ["03719c", "ocean blue"], ["fc5a50", "coral"], ["ffffc2", "cream"], ["7f2b0a", "reddish brown"], ["b04e0f", "burnt sienna"], ["a03623", "brick"], ["87ae73", "sage"], ["789b73", "grey green"], ["ffffff", "white"], ["98eff9", "robin\'s egg blue"], ["658b38", "moss green"], ["5a7d9a", "steel blue"], ["380835", "eggplant"], ["fffe7a", "light yellow"], ["5ca904", "leaf green"], ["d8dcd6", "light grey"], ["a5a502", "puke"], ["d648d7", "pinkish purple"], ["047495", "sea blue"], ["b790d4", "pale purple"], ["5b7c99", "slate blue"], ["607c8e", "blue grey"], ["0b4008", "hunter green"], ["ed0dd9", "fuchsia"], ["8c000f", "crimson"], ["ffff84", "pale yellow"], ["bf9005", "ochre"], ["d2bd0a", "mustard yellow"], ["ff474c", "light red"], ["0485d1", "cerulean"], ["ffcfdc", "pale pink"], ["040273", "deep blue"], ["a83c09", "rust"], ["90e4c1", "light teal"], ["516572", "slate"], ["fac205", "goldenrod"], ["d5b60a", "dark yellow"], ["363737", "dark grey"], ["4b5d16", "army green"], ["6b8ba4", "grey blue"], ["80f9ad", "seafoam"], ["a57e52", "puce"], ["a9f971", "spring green"], ["c65102", "dark orange"], ["e2ca76", "sand"], ["b0ff9d", "pastel green"], ["9ffeb0", "mint"], ["fdaa48", "light orange"], ["fe01b1", "bright pink"], ["c1f80a", "chartreuse"], ["36013f", "deep purple"], ["341c02", "dark brown"], ["b9a281", "taupe"], ["8eab12", "pea green"], ["9aae07", "puke green"], ["02ab2e", "kelly green"], ["7af9ab", "seafoam green"], ["137e6d", "blue green"], ["aaa662", "khaki"], ["610023", "burgundy"], ["014d4e", "dark teal"], ["8f1402", "brick red"], ["4b006e", "royal purple"], ["580f41", "plum"], ["8fff9f", "mint green"], ["dbb40c", "gold"], ["a2cffe", "baby blue"], ["c0fb2d", "yellow green"], ["be03fd", "bright purple"], ["840000", "dark red"], ["d0fefe", "pale blue"], ["3f9b0b", "grass green"], ["01153e", "navy"], ["04d8b2", "aquamarine"], ["c04e01", "burnt orange"], ["0cff0c", "neon green"], ["0165fc", "bright blue"], ["cf6275", "rose"], ["ffd1df", "light pink"], ["ceb301", "mustard"], ["380282", "indigo"], ["aaff32", "lime"], ["53fca1", "sea green"], ["8e82fe", "periwinkle"], ["cb416b", "dark pink"], ["677a04", "olive green"], ["ffb07c", "peach"], ["c7fdb5", "pale green"], ["ad8150", "light brown"], ["ff028d", "hot pink"], ["000000", "black"], ["cea2fd", "lilac"], ["001146", "navy blue"], ["0504aa", "royal blue"], ["e6daa6", "beige"], ["ff796c", "salmon"], ["6e750e", "olive"], ["650021", "maroon"], ["01ff07", "bright green"], ["35063e", "dark purple"], ["ae7181", "mauve"], ["06470c", "forest green"], ["13eac9", "aqua"], ["00ffff", "cyan"], ["d1b26f", "tan"], ["00035b", "dark blue"], ["c79fef", "lavender"], ["06c2ac", "turquoise"], ["033500", "dark green"], ["9a0eea", "violet"], ["bf77f6", "light purple"], ["89fe05", "lime green"], ["929591", "grey"], ["75bbfd", "sky blue"], ["ffff14", "yellow"], ["c20078", "magenta"], ["96f97b", "light green"], ["f97306", "orange"], ["029386", "teal"], ["95d0fc", "light blue"], ["e50000", "red"], ["653700", "brown"], ["ff81c0", "pink"], ["0343df", "blue"], ["15b01a", "green"], ["7e1e9c", "purple"], ["FF5E99", "paul irish pink"], ["87b84a", "peridot"], ["00000000", "transparent"]];\n  lookup = {};\n  normalizeKey = function(key) {\n    return key.toString().toLowerCase().split(\' \').join(\'\');\n  };\n  names.each(function(element) {\n    return lookup[normalizeKey(element[1])] = element[0].parseHex();\n  });\n  return Color.lookup = function(color) {\n    return lookup[normalizeKey(color)];\n  };\n})();\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Color'[39m,
       name: [32m'mix'[39m,
       string: [32m'Color.mix()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Cooldown'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Cooldown module provides a declarative way to manage cooldowns on<br />GameObject\'s properties.</p>\n\n<p><code><pre></p>\n\n<h1>Health regeneration</h1>\n\n<p>player = GameObject<br />  health: 50</p>\n\n<p>player.cooldown "health",<br />  target: 100</p>\n\n<p>player.update()<br /></pre></code></p>\n\n<p><code><pre></p>\n\n<h1>Shoot Timeout</h1>\n\n<p>player = GameObject()</p>\n\n<p>player.cooldown "shootTimer"</p>\n\n<p>player.I.shootTimer = 10 # => Pew! Pew!</p>\n\n<p>player.I.update()</p>\n\n<p>player.I.shootTimer # => 9<br /></pre></code></p>'[39m,
       summary: [32m'<p>The Cooldown module provides a declarative way to manage cooldowns on<br />GameObject\'s properties.</p>'[39m,
       body: [32m'<p><code><pre></p>\n\n<h1>Health regeneration</h1>\n\n<p>player = GameObject<br />  health: 50</p>\n\n<p>player.cooldown "health",<br />  target: 100</p>\n\n<p>player.update()<br /></pre></code></p>\n\n<p><code><pre></p>\n\n<h1>Shoot Timeout</h1>\n\n<p>player = GameObject()</p>\n\n<p>player.cooldown "shootTimer"</p>\n\n<p>player.I.shootTimer = 10 # => Pew! Pew!</p>\n\n<p>player.I.update()</p>\n\n<p>player.I.shootTimer # => 9<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Cooldown;\n\nCooldown = function(I, self) {\n  Object.reverseMerge(I, {\n    cooldowns: {}\n  });\n  self.bind("update", function() {\n    var approachBy, cooldownOptions, name, target, _ref, _results;\n    _ref = I.cooldowns;\n    _results = [];\n    for (name in _ref) {\n      cooldownOptions = _ref[name];\n      approachBy = cooldownOptions.approachBy, target = cooldownOptions.target;\n      _results.push(I[name] = I[name].approach(target, approachBy));\n    }\n    return _results;\n  });\n  return {\n    cooldown: function(name, options) {\n      var approachBy, target, value;\n      if (options == null) options = {};\n      target = options.target, approachBy = options.approachBy, value = options.value;\n      target || (target = 0);\n      if (approachBy == null) approachBy = 1;\n      I.cooldowns[name] = {\n        target: target,\n        approachBy: approachBy\n      };\n      if (value != null) {\n        return I[name] = options.value;\n      } else {\n        if (!I[name]) return I[name] = 0;\n      }\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Drawable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Drawable module is used to provide a simple draw method to the including<br />object.</p>\n\n<p>Binds a default draw listener to draw a rectangle or a sprite, if one exists.</p>\n\n<p>Binds a step listener to update the transform of the object.</p>\n\n<p>Autoloads the sprite specified in I.spriteName, if any.</p>\n\n<p><code><pre><br />player = Core<br />  x: 15<br />  y: 30<br />  width: 5<br />  height: 5<br />  sprite: "my_cool_sprite"</p>\n\n<p>engine.bind \'draw\', (canvas) -><br />  player.draw(canvas) </p>\n\n<h1>=> Uncaught TypeError: Object has no method \'draw\'</h1>\n\n<p>player.include(Drawable)</p>\n\n<p>engine.bind \'draw\', (canvas) -><br />  player.draw(canvas)</p>\n\n<h1>=> if you have a sprite named "my_cool_sprite" in your images folder</h1>\n\n<h1>then it will be drawn. Otherwise, a rectangle positioned at x: 15 and</h1>\n\n<h1>y: 30 with width and height 5 will be drawn.</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Drawable module is used to provide a simple draw method to the including<br />object.</p>'[39m,
       body: [32m'<p>Binds a default draw listener to draw a rectangle or a sprite, if one exists.</p>\n\n<p>Binds a step listener to update the transform of the object.</p>\n\n<p>Autoloads the sprite specified in I.spriteName, if any.</p>\n\n<p><code><pre><br />player = Core<br />  x: 15<br />  y: 30<br />  width: 5<br />  height: 5<br />  sprite: "my_cool_sprite"</p>\n\n<p>engine.bind \'draw\', (canvas) -><br />  player.draw(canvas) </p>\n\n<h1>=> Uncaught TypeError: Object has no method \'draw\'</h1>\n\n<p>player.include(Drawable)</p>\n\n<p>engine.bind \'draw\', (canvas) -><br />  player.draw(canvas)</p>\n\n<h1>=> if you have a sprite named "my_cool_sprite" in your images folder</h1>\n\n<h1>then it will be drawn. Otherwise, a rectangle positioned at x: 15 and</h1>\n\n<h1>y: 30 with width and height 5 will be drawn.</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'draw'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Drawable#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'PowerCanvas'[39m ],
         name: [32m'canvas'[39m,
         description: [32m'A reference to the canvas to draw on.'[39m } ],
    description: 
     { full: [32m'<p>Triggered every time the object should be drawn. A canvas is passed as<br />the first argument. </p>\n\n<p><code><pre><br />player = Core<br />  x: 0<br />  y: 10<br />  width: 5<br />  height: 5</p>\n\n<p>player.bind "draw", (canvas) -><br />  # Text will be drawn positioned relatively to the object.<br />  canvas.drawText<br />    text: "Hey, drawing stuff is pretty easy."<br />    color: "white"<br />    x: 5<br />    y: 5<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered every time the object should be drawn. A canvas is passed as<br />the first argument. </p>'[39m,
       body: [32m'<p><code><pre><br />player = Core<br />  x: 0<br />  y: 10<br />  width: 5<br />  height: 5</p>\n\n<p>player.bind "draw", (canvas) -><br />  # Text will be drawn positioned relatively to the object.<br />  canvas.drawText<br />    text: "Hey, drawing stuff is pretty easy."<br />    color: "white"<br />    x: 5<br />    y: 5<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'beforeTransform'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Drawable#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'PowerCanvas'[39m ],
         name: [32m'canvas'[39m,
         description: [32m'A reference to the canvas to draw on.'[39m } ],
    description: 
     { full: [32m'<p>Triggered before the object should be drawn. A canvas is passed as<br />the first argument. This does not apply the current transform.</p>'[39m,
       summary: [32m'<p>Triggered before the object should be drawn. A canvas is passed as<br />the first argument. This does not apply the current transform.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'afterTransform'[39m },
       { type: [32m'methodOf'[39m, string: [32m'Drawable#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'PowerCanvas'[39m ],
         name: [32m'canvas'[39m,
         description: [32m'A reference to the canvas to draw on.'[39m } ],
    description: 
     { full: [32m'<p>Triggered after the object should be drawn. A canvas is passed as<br />the first argument. This applies the current transform.</p>'[39m,
       summary: [32m'<p>Triggered after the object should be drawn. A canvas is passed as<br />the first argument. This applies the current transform.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Drawable;\n\nDrawable = function(I, self) {\n  var setSizeCallback, _ref;\n  I || (I = {});\n  Object.reverseMerge(I, {\n    alpha: 1,\n    color: "#196",\n    hflip: false,\n    vflip: false,\n    spriteName: null,\n    zIndex: 0\n  });\n  setSizeCallback = function(sprite) {\n    I.width = sprite.width;\n    return I.height = sprite.height;\n  };\n  if ((_ref = I.sprite) != null ? typeof _ref.isString === "function" ? _ref.isString() : void 0 : void 0) {\n    if (I.sprite.indexOf("data:") === 0) {\n      I.sprite = Sprite.fromURL(I.sprite, setSizeCallback);\n    } else {\n      I.sprite = Sprite.loadByName(I.sprite, setSizeCallback);\n    }\n  } else if (I.spriteName) {\n    I.sprite = Sprite.loadByName(I.spriteName, setSizeCallback);\n  }\n  self.bind(\'draw\', function(canvas) {\n    var previousAlpha, sprite;\n    if ((I.alpha != null) && I.alpha !== 1) {\n      previousAlpha = canvas.context().globalAlpha;\n      canvas.context().globalAlpha = I.alpha;\n    }\n    if (sprite = I.sprite) {\n      if (sprite.draw != null) {\n        sprite.draw(canvas, -sprite.width / 2, -sprite.height / 2);\n      } else {\n        if (typeof warn === "function") warn("Sprite has no draw method!");\n      }\n    } else {\n      if (I.radius != null) {\n        canvas.drawCircle({\n          x: 0,\n          y: 0,\n          radius: I.radius,\n          color: I.color\n        });\n      } else {\n        canvas.drawRect({\n          x: -I.width / 2,\n          y: -I.height / 2,\n          width: I.width,\n          height: I.height,\n          color: I.color\n        });\n      }\n    }\n    if ((I.alpha != null) && I.alpha !== 1) {\n      return canvas.context().globalAlpha = previousAlpha;\n    }\n  });\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draw does not actually do any drawing itself, instead it triggers all of the draw events.<br />    Listeners on the events do the actual drawing.</p>\n\n<pre><code>@name draw\n@methodOf Drawable#\n@returns self\n</code></pre>'[39m,
       summary: [32m'<p>Draw does not actually do any drawing itself, instead it triggers all of the draw events.<br />    Listeners on the events do the actual drawing.</p>'[39m,
       body: [32m'<pre><code>@name draw\n@methodOf Drawable#\n@returns self\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'draw: function(canvas) {\n      self.trigger(\'beforeTransform\', canvas);\n      canvas.withTransform(self.transform(), function(canvas) {\n        self.trigger(\'beforeDraw\', canvas);\n        self.trigger(\'draw\', canvas);\n        return self.trigger(\'afterDraw\', canvas);\n      });\n      self.trigger(\'afterTransform\', canvas);\n      return self;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the current transform, with translation, rotation, and flipping applied.</p>\n\n<pre><code>@name transform\n@methodOf Drawable#\n@returns {Matrix} The current transform\n</code></pre>'[39m,
       summary: [32m'<p>Returns the current transform, with translation, rotation, and flipping applied.</p>'[39m,
       body: [32m'<pre><code>@name transform\n@methodOf Drawable#\n@returns {Matrix} The current transform\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'transform: function() {\n      var center, transform;\n      center = self.center();\n      transform = Matrix.translation(center.x, center.y);\n      if ((I.scale != null) && I.scale !== 1) {\n        transform = transform.concat(Matrix.scale(I.scale));\n      }\n      if (I.rotation) transform = transform.concat(Matrix.rotation(I.rotation));\n      if (I.hflip) transform = transform.concat(Matrix.HORIZONTAL_FLIP);\n      if (I.vflip) transform = transform.concat(Matrix.VERTICAL_FLIP);\n      if (I.spriteOffset) {\n        transform = transform.concat(Matrix.translation(I.spriteOffset.x, I.spriteOffset.y));\n      }\n      return transform;\n    }\n  };\n};\n\nDrawable.setSizeCallback = function(sprite) {};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Durable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Durable module deactives a <code>GameObject</code> after a specified duration.<br />If a duration is specified the object will update that many times. If -1 is<br />specified the object will have an unlimited duration.</p>\n\n<p><code><pre><br />enemy = GameObject<br />  x: 50<br />  y: 30<br />  duration: 5</p>\n\n<p>enemy.include(Durable)</p>\n\n<p>enemy.I.active</p>\n\n<h1>=> true</h1>\n\n<p>5.times -><br />  enemy.update()</p>\n\n<p>enemy.I.active</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Durable module deactives a <code>GameObject</code> after a specified duration.<br />If a duration is specified the object will update that many times. If -1 is<br />specified the object will have an unlimited duration.</p>'[39m,
       body: [32m'<p><code><pre><br />enemy = GameObject<br />  x: 50<br />  y: 30<br />  duration: 5</p>\n\n<p>enemy.include(Durable)</p>\n\n<p>enemy.I.active</p>\n\n<h1>=> true</h1>\n\n<p>5.times -><br />  enemy.update()</p>\n\n<p>enemy.I.active</p>\n\n<h1>=> false</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Durable;\n\nDurable = function(I, self) {\n  Object.reverseMerge(I, {\n    duration: -1\n  });\n  self.bind("update", function() {\n    if (I.duration !== -1 && I.age >= I.duration) return I.active = false;\n  });\n  return {};\n};\n;\n\n(function() {\n  var Easing, polynomialEasings;\n  Easing = {\n    sinusoidal: function(begin, end) {\n      var change;\n      change = end - begin;\n      return function(t) {\n        return begin + change * (1 - Math.cos(t * Math.TAU / 4));\n      };\n    },\n    sinusoidalOut: function(begin, end) {\n      var change;\n      change = end - begin;\n      return function(t) {\n        return begin + change * (0 + Math.sin(t * Math.TAU / 4));\n      };\n    }\n  };\n  polynomialEasings = ["linear", "quadratic", "cubic", "quartic", "quintic"];\n  polynomialEasings.each(function(easing, i) {\n    var exponent, sign;\n    exponent = i + 1;\n    sign = exponent % 2 ? 1 : -1;\n    Easing[easing] = function(begin, end) {\n      var change;\n      change = end - begin;\n      return function(t) {\n        return begin + change * Math.pow(t, exponent);\n      };\n    };\n    return Easing["" + easing + "Out"] = function(begin, end) {\n      var change;\n      change = end - begin;\n      return function(t) {\n        return begin + change * (1 + sign * Math.pow(t - 1, exponent));\n      };\n    };\n  });\n  ["sinusoidal"].concat(polynomialEasings).each(function(easing) {\n    return Easing["" + easing + "InOut"] = function(begin, end) {\n      var easeIn, easeOut, midpoint;\n      midpoint = (begin + end) / 2;\n      easeIn = Easing[easing](begin, midpoint);\n      easeOut = Easing["" + easing + "Out"](midpoint, end);\n      return function(t) {\n        if (t < 0.5) {\n          return easeIn(2 * t);\n        } else {\n          return easeOut(2 * t - 1);\n        }\n      };\n    };\n  });\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Easing"] = Easing;\n})();\n;\nvar Emitter;\n\nEmitter = function(I) {\n  var self;\n  self = GameObject(I);\n  return self.include(Emitterable);\n};\n;\nvar Emitterable;\n\nEmitterable = function(I, self) {\n  var n;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    batchSize: 1,\n    emissionRate: 1,\n    color: "blue",\n    width: 0,\n    height: 0,\n    generator: {},\n    particles: [],\n    particleCount: Infinity,\n    particleData: {\n      acceleration: Point(0, 0.1),\n      age: 0,\n      color: "blue",\n      duration: 30,\n      includedModules: ["Movable"],\n      height: 2,\n      maxSpeed: 2,\n      offset: Point(0, 0),\n      sprite: false,\n      spriteName: false,\n      velocity: Point(-0.25, 1),\n      width: 2,\n      x: 0,\n      y: 0\n    }\n  });\n  n = 0;\n  self.bind(\'draw\', function(canvas) {\n    return I.particles.invoke("draw", canvas);\n  });\n  self.bind(\'update\', function() {\n    I.batchSize.times(function() {\n      var key, particleProperties, value, _ref;\n      if (n < I.particleCount && rand() < I.emissionRate) {\n        particleProperties = Object.extend({}, I.particleData);\n        _ref = I.generator;\n        for (key in _ref) {\n          value = _ref[key];\n          if (I.generator[key].call) {\n            particleProperties[key] = I.generator[key](n, I);\n          } else {\n            particleProperties[key] = I.generator[key];\n          }\n        }\n        particleProperties.x += particleProperties.offset.x;\n        particleProperties.y += particleProperties.offset.y;\n        I.particles.push(GameObject(particleProperties));\n        return n += 1;\n      }\n    });\n    I.particles = I.particles.select(function(particle) {\n      return particle.update();\n    });\n    if (n === I.particleCount && !I.particles.length) return I.active = false;\n  });\n  return {};\n};\n;\n\n(function() {\n  var Engine, defaults;\n  defaults = {\n    FPS: 30,\n    age: 0,\n    excludedModules: [],\n    includedModules: [],\n    paused: false,\n    showFPS: false,\n    zSort: false\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The Engine controls the game world and manages game state. Once you <br />  set it up and let it run it pretty much takes care of itself.</p>\n\n<p>You can use the engine to add or remove objects from the game world.</p>\n\n<p>There are several modules that can include to add additional capabilities <br />  to the engine.</p>\n\n<p>The engine fires events that you  may bind listeners to. Event listeners <br />  may be bound with <code>engine.bind(eventName, callback)</code></p>\n\n<p>@name Engine<br />  @constructor<br />  @param {Object} I Instance variables of the engine</p>'[39m,
       summary: [32m'<p>The Engine controls the game world and manages game state. Once you <br />  set it up and let it run it pretty much takes care of itself.</p>'[39m,
       body: [32m'<p>You can use the engine to add or remove objects from the game world.</p>\n\n<p>There are several modules that can include to add additional capabilities <br />  to the engine.</p>\n\n<p>The engine fires events that you  may bind listeners to. Event listeners <br />  may be bound with <code>engine.bind(eventName, callback)</code></p>\n\n<p>@name Engine<br />  @constructor<br />  @param {Object} I Instance variables of the engine</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Observe or modify the <br />  entity data before it is added to the engine.<br />  @name beforeAdd<br />  @methodOf Engine#<br />  @event<br />  @param {Object} entityData</p>'[39m,
       summary: [32m'<p>Observe or modify the <br />  entity data before it is added to the engine.<br />  @name beforeAdd<br />  @methodOf Engine#<br />  @event<br />  @param {Object} entityData</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Observe or configure a <code>gameObject</code> that has been added <br />  to the engine.<br />  @name afterAdd<br />  @methodOf Engine#<br />  @event<br />  @param {GameObject} object The object that has just been added to the<br />  engine.</p>'[39m,
       summary: [32m'<p>Observe or configure a <code>gameObject</code> that has been added <br />  to the engine.<br />  @name afterAdd<br />  @methodOf Engine#<br />  @event<br />  @param {GameObject} object The object that has just been added to the<br />  engine.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Called when the engine updates all the game objects.</p>\n\n<p>@name update<br />  @methodOf Engine#<br />  @event</p>'[39m,
       summary: [32m'<p>Called when the engine updates all the game objects.</p>'[39m,
       body: [32m'<p>@name update<br />  @methodOf Engine#<br />  @event</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Called after the engine completes an update. Here it is <br />  safe to modify the game objects array.</p>\n\n<p>@name afterUpdate<br />  @methodOf Engine#<br />  @event</p>'[39m,
       summary: [32m'<p>Called after the engine completes an update. Here it is <br />  safe to modify the game objects array.</p>'[39m,
       body: [32m'<p>@name afterUpdate<br />  @methodOf Engine#<br />  @event</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Called before the engine draws the game objects on the canvas. The current camera transform is applied.</p>\n\n<p>@name beforeDraw<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m,
       summary: [32m'<p>Called before the engine draws the game objects on the canvas. The current camera transform is applied.</p>'[39m,
       body: [32m'<p>@name beforeDraw<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Called after the engine draws on the canvas. The current camera transform is applied.</p>\n\n<p><code><pre><br />  engine.bind "draw", (canvas) -><br />    # print some directions for the player<br />    canvas.drawText<br />      text: "Go this way =>"<br />      x: 200<br />      y: 200 <br />  </pre></code></p>\n\n<p>@name draw<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m,
       summary: [32m'<p>Called after the engine draws on the canvas. The current camera transform is applied.</p>'[39m,
       body: [32m'<p><code><pre><br />  engine.bind "draw", (canvas) -><br />    # print some directions for the player<br />    canvas.drawText<br />      text: "Go this way =>"<br />      x: 200<br />      y: 200 <br />  </pre></code></p>\n\n<p>@name draw<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Called after the engine draws.</p>\n\n<p>The current camera transform is not applied. This is great for<br />  adding overlays.</p>\n\n<p><code><pre><br />  engine.bind "overlay", (canvas) -><br />    # print the player\'s health. This will be<br />    # positioned absolutely according to the viewport.<br />    canvas.drawText<br />      text: "HEALTH:"<br />      position: Point(20, 20)</p>\n\n<pre><code>canvas.drawText\n  text: player.health()\n  position: Point(50, 20)\n</code></pre>\n\n<p></pre></code></p>\n\n<p>@name overlay<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m,
       summary: [32m'<p>Called after the engine draws.</p>'[39m,
       body: [32m'<p>The current camera transform is not applied. This is great for<br />  adding overlays.</p>\n\n<p><code><pre><br />  engine.bind "overlay", (canvas) -><br />    # print the player\'s health. This will be<br />    # positioned absolutely according to the viewport.<br />    canvas.drawText<br />      text: "HEALTH:"<br />      position: Point(20, 20)</p>\n\n<pre><code>canvas.drawText\n  text: player.health()\n  position: Point(50, 20)\n</code></pre>\n\n<p></pre></code></p>\n\n<p>@name overlay<br />  @methodOf Engine#<br />  @event<br />  @params {PixieCanvas} canvas A reference to the canvas to draw on.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Engine = function(I) {\n    var animLoop, defaultModules, draw, frameAdvance, lastStepTime, modules, running, self, startTime, step, update;\n    if (I == null) I = {};\n    Object.reverseMerge(I, defaults);\n    frameAdvance = false;\n    running = false;\n    startTime = +new Date();\n    lastStepTime = -Infinity;\n    animLoop = function(timestamp) {\n      var delta, msPerFrame, remainder;\n      timestamp || (timestamp = +new Date());\n      msPerFrame = 1000 / I.FPS;\n      delta = timestamp - lastStepTime;\n      remainder = delta - msPerFrame;\n      if (remainder > 0) {\n        lastStepTime = timestamp - Math.min(remainder, msPerFrame);\n        step();\n      }\n      if (running) return window.requestAnimationFrame(animLoop);\n    };\n    update = function() {\n      self.trigger("beforeUpdate");\n      self.trigger("update");\n      return self.trigger("afterUpdate");\n    };\n    draw = function() {\n      var canvas;\n      if (!(canvas = I.canvas)) return;\n      self.trigger("beforeDraw", canvas);\n      self.trigger("draw", canvas);\n      return self.trigger("overlay", I.canvas);\n    };\n    step = function() {\n      if (!I.paused || frameAdvance) {\n        update();\n        I.age += 1;\n      }\n      return draw();\n    };\n    self = Core(I).extend({'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Start the game simulation.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.start()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name start\n</code></pre>'[39m,
       summary: [32m'<p>Start the game simulation.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.start()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name start\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'start: function() {\n        if (!running) {\n          running = true;\n          return window.requestAnimationFrame(animLoop);\n        }\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Stop the simulation.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.stop()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name stop\n</code></pre>'[39m,
       summary: [32m'<p>Stop the simulation.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.stop()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name stop\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'stop: function() {\n        return running = false;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Pause the game and step through 1 update of the engine.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.frameAdvance()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name frameAdvance\n</code></pre>'[39m,
       summary: [32m'<p>Pause the game and step through 1 update of the engine.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.frameAdvance()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name frameAdvance\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'frameAdvance: function() {\n        I.paused = true;\n        frameAdvance = true;\n        step();\n        return frameAdvance = false;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Resume the game.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.play()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name play\n</code></pre>'[39m,
       summary: [32m'<p>Resume the game.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.play()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name play\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'play: function() {\n        return I.paused = false;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Toggle the paused state of the simulation.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.pause()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name pause\n  @param {Boolean} [setTo] Force to pause by passing true or unpause by passing false.\n</code></pre>'[39m,
       summary: [32m'<p>Toggle the paused state of the simulation.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.pause()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name pause\n  @param {Boolean} [setTo] Force to pause by passing true or unpause by passing false.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'pause: function(setTo) {\n        if (setTo != null) {\n          return I.paused = setTo;\n        } else {\n          return I.paused = !I.paused;\n        }\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Query the engine to see if it is paused.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.pause()\n\n  engine.paused()\n  # true\n\n  engine.play()\n\n  engine.paused()\n  # false\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name paused\n</code></pre>'[39m,
       summary: [32m'<p>Query the engine to see if it is paused.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.pause()\n\n  engine.paused()\n  # true\n\n  engine.play()\n\n  engine.paused()\n  # false\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name paused\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'paused: function() {\n        return I.paused;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Change the framerate of the game. The default framerate is 30 fps.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.setFramerate(60)\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name setFramerate\n</code></pre>'[39m,
       summary: [32m'<p>Change the framerate of the game. The default framerate is 30 fps.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  engine.setFramerate(60)\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @methodOf Engine#\n  @name setFramerate\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'setFramerate: function(newFPS) {\n        I.FPS = newFPS;\n        self.stop();\n        return self.start();\n      },\n      update: update,\n      draw: draw\n    });\n    self.include(Bindable);\n    defaultModules = ["Keyboard", "Mouse", "Clear", "Delay", "GameState", "Selector", "Collision"];\n    modules = defaultModules.concat(I.includedModules);\n    modules = modules.without([].concat(I.excludedModules));\n    modules.each(function(moduleName) {\n      if (!Engine[moduleName]) {\n        throw "#Engine." + moduleName + " is not a valid engine module";\n      }\n      return self.include(Engine[moduleName]);\n    });\n    self.trigger("init");\n    return self;\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Engine"] = Engine;\n})();\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Clear'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>This module clears or fills the canvas before drawing the scene.</p>'[39m,
       summary: [32m'<p>This module clears or fills the canvas before drawing the scene.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Clear = function(I, self) {\n  Object.reverseMerge(I, {\n    backgroundColor: "#00010D",\n    clear: false\n  });\n  self.attrAccessor("clear", "backgroundColor");\n  self.bind("beforeDraw", function() {\n    if (I.clear) {\n      return I.canvas.clear();\n    } else if (I.backgroundColor) {\n      return I.canvas.fill(I.backgroundColor);\n    }\n  });\n  return {};\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Clear'[39m,
       string: [32m'Engine.Clear()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Collision'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>Collision</code> module provides some simple collision detection methods to engine.</p>'[39m,
       summary: [32m'<p>The <code>Collision</code> module provides some simple collision detection methods to engine.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Collision = function(I, self) {\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Collision'[39m,
       string: [32m'Engine.Collision()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Detects collisions between a bounds and the game objects.</p>\n\n<pre><code>@name collides\n@methodOf Engine#\n@param bounds The bounds to check collisions with.\n@param [sourceObject] An object to exclude from the results.\n@returns {Boolean} true if the bounds object collides with any of the game objects, false otherwise.\n</code></pre>'[39m,
       summary: [32m'<p>Detects collisions between a bounds and the game objects.</p>'[39m,
       body: [32m'<pre><code>@name collides\n@methodOf Engine#\n@param bounds The bounds to check collisions with.\n@param [sourceObject] An object to exclude from the results.\n@returns {Boolean} true if the bounds object collides with any of the game objects, false otherwise.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'collides: function(bounds, sourceObject) {\n      return self.objects().inject(false, function(collided, object) {\n        return collided || (object.solid() && (object !== sourceObject) && object.collides(bounds));\n      });\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Detects collisions between a bounds and the game objects. <br />    Returns an array of objects colliding with the bounds provided.</p>\n\n<pre><code>@name collidesWith\n@methodOf Engine#\n@param bounds The bounds to check collisions with.\n@param [sourceObject] An object to exclude from the results.\n@returns {Array} An array of objects that collide with the given bounds.\n</code></pre>'[39m,
       summary: [32m'<p>Detects collisions between a bounds and the game objects. <br />    Returns an array of objects colliding with the bounds provided.</p>'[39m,
       body: [32m'<pre><code>@name collidesWith\n@methodOf Engine#\n@param bounds The bounds to check collisions with.\n@param [sourceObject] An object to exclude from the results.\n@returns {Array} An array of objects that collide with the given bounds.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'collidesWith: function(bounds, sourceObject) {\n      var collided;\n      collided = [];\n      self.objects().each(function(object) {\n        if (!object.solid()) return;\n        if (object !== sourceObject && object.collides(bounds)) {\n          return collided.push(object);\n        }\n      });\n      if (collided.length) return collided;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Detects collisions between a ray and the game objects.</p>\n\n<pre><code>@name rayCollides\n@methodOf Engine#\n@param source The origin point\n@param direction A point representing the direction of the ray\n@param [sourceObject] An object to exclude from the results.\n</code></pre>'[39m,
       summary: [32m'<p>Detects collisions between a ray and the game objects.</p>'[39m,
       body: [32m'<pre><code>@name rayCollides\n@methodOf Engine#\n@param source The origin point\n@param direction A point representing the direction of the ray\n@param [sourceObject] An object to exclude from the results.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'rayCollides: function(source, direction, sourceObject) {\n      var hits, nearestDistance, nearestHit;\n      hits = self.objects().map(function(object) {\n        var hit;\n        hit = object.solid() && (object !== sourceObject) && Collision.rayRectangle(source, direction, object.centeredBounds());\n        if (hit) hit.object = object;\n        return hit;\n      });\n      nearestDistance = Infinity;\n      nearestHit = null;\n      hits.each(function(hit) {\n        var d;\n        if (hit && (d = hit.distance(source)) < nearestDistance) {\n          nearestDistance = d;\n          return nearestHit = hit;\n        }\n      });\n      return nearestHit;\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Delay'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>Delay</code> module provides methods to trigger events after a number of steps have passed.</p>'[39m,
       summary: [32m'<p>The <code>Delay</code> module provides methods to trigger events after a number of steps have passed.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Delay = function(I, self) {\n  var delayedEvents;\n  delayedEvents = [];\n  self.bind(\'afterUpdate\', function() {\n    var firingEvents, _ref;\n    _ref = delayedEvents.partition(function(event) {\n      return (event.delay -= 1) >= 0;\n    }), delayedEvents = _ref[0], firingEvents = _ref[1];\n    firingEvents.each(function(event) {\n      return event.callback();\n    });\n  });\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Delay'[39m,
       string: [32m'Engine.Delay()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Execute a callback after a number of steps have passed.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.delay 5, -&gt;\n  engine.add\n    class: "Ghost"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name delay\n@methodOf Engine#\n@param {Number} steps The number of steps to wait before executing the callback\n@param {Function} callback The callback to be executed.\n\n@returns {Engine} self\n</code></pre>'[39m,
       summary: [32m'<p>Execute a callback after a number of steps have passed.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.delay 5, -&gt;\n  engine.add\n    class: "Ghost"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name delay\n@methodOf Engine#\n@param {Number} steps The number of steps to wait before executing the callback\n@param {Function} callback The callback to be executed.\n\n@returns {Engine} self\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'delay: function(steps, callback) {\n      delayedEvents.push({\n        delay: steps,\n        callback: callback\n      });\n      return self;\n    }\n  };\n};\n;\n\nEngine.GameState = function(I, self) {\n  var requestedState;\n  Object.reverseMerge(I, {\n    currentState: GameState()\n  });\n  requestedState = null;\n  self.bind("update", function() {\n    I.currentState.trigger("beforeUpdate");\n    I.currentState.trigger("update");\n    return I.currentState.trigger("afterUpdate");\n  });\n  self.bind("afterUpdate", function() {\n    var previousState;\n    if (requestedState != null) {\n      I.currentState.trigger("exit", requestedState);\n      self.trigger(\'stateExited\', I.currentState);\n      previousState = I.currentState;\n      I.currentState = requestedState;\n      I.currentState.trigger("enter", previousState);\n      self.trigger(\'stateEntered\', I.currentState);\n      return requestedState = null;\n    }\n  });\n  self.bind("draw", function(canvas) {\n    I.currentState.trigger("beforeDraw", canvas);\n    I.currentState.trigger("draw", canvas);\n    return I.currentState.trigger("overlay", canvas);\n  });\n  return {\n    add: function(entityData) {\n      var object;\n      self.trigger("beforeAdd", entityData);\n      object = I.currentState.add(entityData);\n      self.trigger("afterAdd", object);\n      return object;\n    },\n    camera: function(n) {\n      if (n == null) n = 0;\n      return self.cameras()[n];\n    },\n    cameras: function(newCameras) {\n      if (newCameras != null) {\n        I.currentState.cameras(newCameras);\n        return self;\n      } else {\n        return I.currentState.cameras();\n      }\n    },\n    fadeIn: function(options) {\n      if (options == null) options = {};\n      return self.cameras().invoke(\'fadeIn\', options);\n    },\n    fadeOut: function(options) {\n      if (options == null) options = {};\n      return self.cameras().invoke(\'fadeOut\', options);\n    },\n    flash: function(options) {\n      if (options == null) options = {};\n      return self.camera(options.camera).flash(options);\n    },\n    objects: function() {\n      return I.currentState.objects();\n    },\n    setState: function(newState) {\n      return requestedState = newState;\n    },\n    shake: function(options) {\n      if (options == null) options = {};\n      return self.camera(options.camera).shake(options);\n    },\n    saveState: function() {\n      return I.currentState.saveState();\n    },\n    loadState: function(newState) {\n      return I.currentState.loadState(newState);\n    },\n    reload: function() {\n      return I.currentState.reload();\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Keyboard'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>This module sets up the keyboard inputs for each engine update.</p>'[39m,
       summary: [32m'<p>This module sets up the keyboard inputs for each engine update.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Keyboard = function(I, self) {\n  self.bind("beforeUpdate", function() {\n    return typeof updateKeys === "function" ? updateKeys() : void 0;\n  });\n  return {};\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Keyboard'[39m,
       string: [32m'Engine.Keyboard()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Mouse'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>This module sets up the mouse inputs for each engine update.</p>'[39m,
       summary: [32m'<p>This module sets up the mouse inputs for each engine update.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Mouse = function(I, self) {\n  self.bind("beforeUpdate", function() {\n    return typeof updateMouse === "function" ? updateMouse() : void 0;\n  });\n  return {};\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Mouse'[39m,
       string: [32m'Engine.Mouse()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Selector'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>Selector</code> module provides methods to query the engine to find game objects.</p>'[39m,
       summary: [32m'<p>The <code>Selector</code> module provides methods to query the engine to find game objects.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Selector = function(I, self) {\n  var instanceMethods;\n  instanceMethods = {\n    set: function(attr, value) {\n      return this.each(function(item) {\n        return item.I[attr] = value;\n      });\n    }\n  };\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Selector'[39m,
       string: [32m'Engine.Selector()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Get a selection of GameObjects that match the specified selector criteria. The selector language<br />    can select objects by id, class, or attributes. Note that this method always returns an Array,<br />    so if you are trying to find only one object you will need something like <code>engine.find("Enemy").first()</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = engine.add\n  class: "Player"\n\nenemy = engine.add\n  class: "Enemy"\n  speed: 5\n  x: 0\n\ndistantEnemy = engine.add\n  class "Enemy"\n  x: 500\n\nboss = engine.add\n  class: "Enemy"\n  id: "Boss"\n  x: 0\n\n# to select an object by id use "#anId"\nengine.find "#Boss"\n# =&gt; [boss]\n\n# to select an object by class use "MyClass"\nengine.find "Enemy"\n# =&gt; [enemy, distantEnemy, boss]\n\n# to select an object by properties use ".someProperty" or ".someProperty=someValue"\nengine.find ".speed=5"\n# =&gt; [enemy]\n\n# You may mix and match selectors.\nengine.find "Enemy.x=0"\n# =&gt; [enemy, boss] # doesn\'t return distantEnemy\n&lt;/pre&gt;&lt;/code&gt;\n\n@name find\n@methodOf Engine#\n@param {String} selector\n@returns {Array} An array of the objects found\n</code></pre>'[39m,
       summary: [32m'<p>Get a selection of GameObjects that match the specified selector criteria. The selector language<br />    can select objects by id, class, or attributes. Note that this method always returns an Array,<br />    so if you are trying to find only one object you will need something like <code>engine.find("Enemy").first()</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = engine.add\n  class: "Player"\n\nenemy = engine.add\n  class: "Enemy"\n  speed: 5\n  x: 0\n\ndistantEnemy = engine.add\n  class "Enemy"\n  x: 500\n\nboss = engine.add\n  class: "Enemy"\n  id: "Boss"\n  x: 0\n\n# to select an object by id use "#anId"\nengine.find "#Boss"\n# =&gt; [boss]\n\n# to select an object by class use "MyClass"\nengine.find "Enemy"\n# =&gt; [enemy, distantEnemy, boss]\n\n# to select an object by properties use ".someProperty" or ".someProperty=someValue"\nengine.find ".speed=5"\n# =&gt; [enemy]\n\n# You may mix and match selectors.\nengine.find "Enemy.x=0"\n# =&gt; [enemy, boss] # doesn\'t return distantEnemy\n&lt;/pre&gt;&lt;/code&gt;\n\n@name find\n@methodOf Engine#\n@param {String} selector\n@returns {Array} An array of the objects found\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'find: function(selector) {\n      var matcher, results;\n      results = [];\n      matcher = Engine.Selector.generate(selector);\n      self.objects().each(function(object) {\n        if (matcher.match(object)) return results.push(object);\n      });\n      return Object.extend(results, instanceMethods);\n    }\n  };\n};\n\nObject.extend(Engine.Selector, {\n  parse: function(selector) {\n    return selector.split(",").invoke("trim");\n  },\n  process: function(item) {\n    var result;\n    result = /^(\\w+)?#?([\\w\\-]+)?\\.?([\\w\\-]+)?=?([\\w\\-]+)?/.exec(item);\n    if (result) {\n      if (result[4]) result[4] = result[4].parse();\n      return result.splice(1);\n    } else {\n      return [];\n    }\n  },\n  generate: function(selector) {\n    var ATTR, ATTR_VALUE, ID, TYPE, components;\n    components = Engine.Selector.parse(selector).map(function(piece) {\n      return Engine.Selector.process(piece);\n    });\n    TYPE = 0;\n    ID = 1;\n    ATTR = 2;\n    ATTR_VALUE = 3;\n    return {\n      match: function(object) {\n        var attr, attrMatch, component, idMatch, typeMatch, value, _i, _len;\n        for (_i = 0, _len = components.length; _i < _len; _i++) {\n          component = components[_i];\n          idMatch = (component[ID] === object.I.id) || !component[ID];\n          typeMatch = (component[TYPE] === object.I["class"]) || !component[TYPE];\n          if (attr = component[ATTR]) {\n            if ((value = component[ATTR_VALUE]) != null) {\n              attrMatch = object.I[attr] === value;\n            } else {\n              attrMatch = object.I[attr];\n            }\n          } else {\n            attrMatch = true;\n          }\n          if (idMatch && typeMatch && attrMatch) return true;\n        }\n        return false;\n      }\n    };\n  }\n});\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Stats'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>Stats</code> module provides methods to query the engine to find game objects.</p>'[39m,
       summary: [32m'<p>The <code>Stats</code> module provides methods to query the engine to find game objects.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Stats = function(I, self) {\n  return {\n    measure: function(objects, field, frequency) {\n      if (frequency == null) frequency = 30;\n    },\n    gatherData: function() {\n      return self.find();\n    }\n  };\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Stats'[39m,
       string: [32m'Engine.Stats()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Fadeable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The <code>Fadeable</code> module provides a method to fade a sprite to transparent. <br />You may also provide a callback function that is executed when the sprite has finished fading out.</p>'[39m,
       summary: [32m'<p>The <code>Fadeable</code> module provides a method to fade a sprite to transparent. <br />You may also provide a callback function that is executed when the sprite has finished fading out.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Fadeable;\n\nFadeable = function(I, self) {\n  Object.reverseMerge(I, {\n    fadeDuration: 30,\n    fadeCooldown: null,\n    fadeCallback: null\n  });\n  self.bind("update", function() {\n    if (I.fadeCooldown != null) {\n      I.fadeCooldown = I.fadeCooldown.approach(0, 1);\n      I.alpha = I.fadeCooldown / I.fadeDuration;\n    }\n    if (I.fadeCooldown === 0) {\n      I.fadeCooldown = null;\n      return typeof I.fadeCallback === "function" ? I.fadeCallback(self) : void 0;\n    }\n  });\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A convenient way to set the fade instance variables on a sprite. You can modify the<br />    instance variables by hand but the suggested way to do it is through this method.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject()\n\nplayer.include(Fadeable)\n\nfadedOut = false\n\n# this will fade the player object out over the next 30 frames. \n# once the player is faded out the fadedOut variable will be set to true.\nplayer.fadeOut 30, (player) -&gt;\n  fadedOut = true\n\n30.times -&gt;\n  player.update()\n\nfadedOut\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name fadeOut\n@methodOf Fadeable#\n@param {Number} [duration=30] How long the effect lasts\n@param {Function} [callback=null] The function to execute when the sprite has finished fading.\n</code></pre>'[39m,
       summary: [32m'<p>A convenient way to set the fade instance variables on a sprite. You can modify the<br />    instance variables by hand but the suggested way to do it is through this method.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject()\n\nplayer.include(Fadeable)\n\nfadedOut = false\n\n# this will fade the player object out over the next 30 frames. \n# once the player is faded out the fadedOut variable will be set to true.\nplayer.fadeOut 30, (player) -&gt;\n  fadedOut = true\n\n30.times -&gt;\n  player.update()\n\nfadedOut\n# =&gt; true\n&lt;/pre&gt;&lt;/code&gt;\n\n@name fadeOut\n@methodOf Fadeable#\n@param {Number} [duration=30] How long the effect lasts\n@param {Function} [callback=null] The function to execute when the sprite has finished fading.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'fadeOut: function(duration, callback) {\n      if (duration == null) duration = 30;\n      I.fadeDuration = duration;\n      I.fadeCooldown = duration;\n      return I.fadeCallback = callback;\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Flickerable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The <code>Flickerable</code> module provides a method to flicker a sprite between solid and 50% opacity. </p>'[39m,
       summary: [32m'<p>The <code>Flickerable</code> module provides a method to flicker a sprite between solid and 50% opacity. </p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Flickerable;\n\nFlickerable = function(I, self) {\n  var originalAlpha;\n  Object.reverseMerge(I, {\n    flickerAlpha: 0.5,\n    flickerDuration: 0,\n    flickerFrequency: 3\n  });\n  originalAlpha = I.alpha;\n  self.bind(\'update\', function() {\n    I.flickerDuration = I.flickerDuration.approach(0, 1);\n    if (I.flickerDuration > 0 && (I.age / I.flickerFrequency).floor() % 2) {\n      return I.alpha = I.flickerAlpha;\n    } else {\n      return I.alpha = originalAlpha;\n    }\n  });\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A convenient way to set the flicker instance variables on a sprite. You can modify the<br />    instance variables by hand but the suggested way to do it is through this method.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject()\n\nplayer.include(Flickerable)\n\nplayer.flicker()\n# =&gt; This causes the sprite to flicker between full opacity \n# =&gt; and 50% opacity every 3 frames for 30 frames\n\nplayer.flicker(90, 5, 0.3)\n# =&gt; This causes the sprite to flicker between full opacity\n# =&gt; and 30% opacity every 5 frames for 90 frames\n&lt;/pre&gt;&lt;/code&gt;\n\n@name flicker\n@methodOf Flickerable#\n@param {Number} [duration=30] How long the effect lasts\n@param {Number} [frequency=3] The number of frames in between opacity changes\n@param {Number} [alpha=0.5] The alpha value to flicker to\n</code></pre>'[39m,
       summary: [32m'<p>A convenient way to set the flicker instance variables on a sprite. You can modify the<br />    instance variables by hand but the suggested way to do it is through this method.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nplayer = GameObject()\n\nplayer.include(Flickerable)\n\nplayer.flicker()\n# =&gt; This causes the sprite to flicker between full opacity \n# =&gt; and 50% opacity every 3 frames for 30 frames\n\nplayer.flicker(90, 5, 0.3)\n# =&gt; This causes the sprite to flicker between full opacity\n# =&gt; and 30% opacity every 5 frames for 90 frames\n&lt;/pre&gt;&lt;/code&gt;\n\n@name flicker\n@methodOf Flickerable#\n@param {Number} [duration=30] How long the effect lasts\n@param {Number} [frequency=3] The number of frames in between opacity changes\n@param {Number} [alpha=0.5] The alpha value to flicker to\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'flicker: function(duration, frequency, alpha) {\n      if (duration == null) duration = 30;\n      if (frequency == null) frequency = 3;\n      if (alpha == null) alpha = 0.5;\n      I.flickerDuration = duration;\n      I.flickerFrequency = frequency;\n      return I.flickerAlpha = alpha;\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Follow'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Follow module provides a simple method to set an object\'s<br />velocity so that it will approach another object. </p>\n\n<p>The calculated velocity is based on the center point of <br />each object.</p>\n\n<p>This method relies on both objects having <code>position</code> methods. <br />All GameObjects have this method by default.</p>\n\n<p><code><pre><br />player = GameObject<br />  x: 50<br />  y: 50<br />  width: 10<br />  height: 10</p>\n\n<p>enemy = GameObject<br />  x: 100<br />  y: 50<br />  width: 10<br />  height: 10<br />  velocity: Point(0, 0)</p>\n\n<h1>Make an enemy follow the player</h1>\n\n<p>enemy.follow(player)</p>\n\n<h1>now the enemy\'s velocity will point toward the player</h1>\n\n<p>enemy.I.velocity</p>\n\n<h1>=> Point(-1, 0)</h1>\n\n<p>enemy.update()</p>\n\n<p>enemy.I.x</p>\n\n<h1>=> 99</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Follow module provides a simple method to set an object\'s<br />velocity so that it will approach another object. </p>'[39m,
       body: [32m'<p>The calculated velocity is based on the center point of <br />each object.</p>\n\n<p>This method relies on both objects having <code>position</code> methods. <br />All GameObjects have this method by default.</p>\n\n<p><code><pre><br />player = GameObject<br />  x: 50<br />  y: 50<br />  width: 10<br />  height: 10</p>\n\n<p>enemy = GameObject<br />  x: 100<br />  y: 50<br />  width: 10<br />  height: 10<br />  velocity: Point(0, 0)</p>\n\n<h1>Make an enemy follow the player</h1>\n\n<p>enemy.follow(player)</p>\n\n<h1>now the enemy\'s velocity will point toward the player</h1>\n\n<p>enemy.I.velocity</p>\n\n<h1>=> Point(-1, 0)</h1>\n\n<p>enemy.update()</p>\n\n<p>enemy.I.x</p>\n\n<h1>=> 99</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Follow;\n\nFollow = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    followSpeed: 1,\n    velocity: Point(0, 0)\n  });\n  return {\n    follow: function(obj) {\n      return I.velocity = obj.position().subtract(self.position()).norm().scale(I.followSpeed);\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'GameObject'[39m },
       { type: [32m'extends'[39m, string: [32m'Core'[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'instanceVariables'[39m,
         string: [32m'age, active, created, destroyed, solid, includedModules, excludedModules'[39m } ],
    description: 
     { full: [32m'<p>The default base class for all objects you can add to the engine.</p>\n\n<p>GameObjects fire events that you may bind listeners to. Event listeners <br />may be bound with <code>object.bind(eventName, callback)</code></p>'[39m,
       summary: [32m'<p>The default base class for all objects you can add to the engine.</p>'[39m,
       body: [32m'<p>GameObjects fire events that you may bind listeners to. Event listeners <br />may be bound with <code>object.bind(eventName, callback)</code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'create'[39m },
       { type: [32m'methodOf'[39m, string: [32m'GameObject#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Triggered when the object is created.</p>\n\n<p><code><pre><br />enemyCount = 0</p>\n\n<p>enemy = engine.add<br />  class: "Enemy"</p>\n\n<p>enemy.bind \'create\', -><br />  enemyCount++<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered when the object is created.</p>'[39m,
       body: [32m'<p><code><pre><br />enemyCount = 0</p>\n\n<p>enemy = engine.add<br />  class: "Enemy"</p>\n\n<p>enemy.bind \'create\', -><br />  enemyCount++<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'destroy'[39m },
       { type: [32m'methodOf'[39m, string: [32m'GameObject#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Triggered when object is destroyed. Use <br />the destroy event to add particle effects, play sounds, etc.</p>\n\n<p><code><pre><br />bomb = GameObject()</p>\n\n<p>bomb.bind \'destroy\', -><br />  bomb.explode()<br />  Sound.play "Kaboom"<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered when object is destroyed. Use <br />the destroy event to add particle effects, play sounds, etc.</p>'[39m,
       body: [32m'<p><code><pre><br />bomb = GameObject()</p>\n\n<p>bomb.bind \'destroy\', -><br />  bomb.explode()<br />  Sound.play "Kaboom"<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'step'[39m },
       { type: [32m'methodOf'[39m, string: [32m'GameObject#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Triggered during every update step.</p>\n\n<p><code><pre><br />player = GameObject()</p>\n\n<p>player.bind \'step\', -><br />  # check to see if keys are being pressed and <br />  # change the player\'s velocity<br />  if keydown.left<br />    player.velocity(Point(-1, 0))<br />  else if keydown.right<br />    player.velocity(Point(1, 0))<br />  else<br />    player.velocity(Point(0, 0))<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered during every update step.</p>'[39m,
       body: [32m'<p><code><pre><br />player = GameObject()</p>\n\n<p>player.bind \'step\', -><br />  # check to see if keys are being pressed and <br />  # change the player\'s velocity<br />  if keydown.left<br />    player.velocity(Point(-1, 0))<br />  else if keydown.right<br />    player.velocity(Point(1, 0))<br />  else<br />    player.velocity(Point(0, 0))<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'update'[39m },
       { type: [32m'methodOf'[39m, string: [32m'GameObject#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Triggered every update after the <code>step</code> event is triggered.</p>\n\n<p><code><pre><br />player = GameObject()</p>\n\n<h1>we can really use the update and</h1>\n\n<h1>step events almost interchangebly</h1>\n\n<p>player.bind \'update\', -><br />  # check to see if keys are being pressed and <br />  # change the player\'s velocity<br />  if keydown.left<br />    player.velocity(Point(-1, 0))<br />  else if keydown.right<br />    player.velocity(Point(1, 0))<br />  else<br />    player.velocity(Point(0, 0))<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered every update after the <code>step</code> event is triggered.</p>'[39m,
       body: [32m'<p><code><pre><br />player = GameObject()</p>\n\n<h1>we can really use the update and</h1>\n\n<h1>step events almost interchangebly</h1>\n\n<p>player.bind \'update\', -><br />  # check to see if keys are being pressed and <br />  # change the player\'s velocity<br />  if keydown.left<br />    player.velocity(Point(-1, 0))<br />  else if keydown.right<br />    player.velocity(Point(1, 0))<br />  else<br />    player.velocity(Point(0, 0))<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'remove'[39m },
       { type: [32m'methodOf'[39m, string: [32m'GameObject#'[39m },
       { type: [32m'event'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>Triggered when the object is removed from<br />the engine. Use the remove event to handle any clean up.</p>\n\n<p><code><pre><br />boss = GameObject()</p>\n\n<p>boss.bind \'remove\', -><br />  unlockDoorToLevel2()<br /></pre></code></p>'[39m,
       summary: [32m'<p>Triggered when the object is removed from<br />the engine. Use the remove event to handle any clean up.</p>'[39m,
       body: [32m'<p><code><pre><br />boss = GameObject()</p>\n\n<p>boss.bind \'remove\', -><br />  unlockDoorToLevel2()<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var GameObject;\n\nGameObject = function(I) {\n  var autobindEvents, defaultModules, modules, self;\n  I || (I = {});'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>@name {Object} I Instance variables <br />  @memberOf GameObject#</p>'[39m,
       summary: [32m'<p>@name {Object} I Instance variables <br />  @memberOf GameObject#</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'Object.reverseMerge(I, {\n    age: 0,\n    active: true,\n    created: false,\n    destroyed: false,\n    solid: false,\n    includedModules: [],\n    excludedModules: []\n  });\n  self = Core(I).extend({'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Update the game object. This is generally called by the engine.</p>\n\n<pre><code>@name update\n@methodOf GameObject#\n</code></pre>'[39m,
       summary: [32m'<p>Update the game object. This is generally called by the engine.</p>'[39m,
       body: [32m'<pre><code>@name update\n@methodOf GameObject#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'update: function() {\n      if (I.active) {\n        self.trigger(\'step\');\n        self.trigger(\'update\');\n        I.age += 1;\n      }\n      return I.active;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Triggers the create event if the object has not already been created.</p>\n\n<pre><code>@name create\n@methodOf GameObject#\n</code></pre>'[39m,
       summary: [32m'<p>Triggers the create event if the object has not already been created.</p>'[39m,
       body: [32m'<pre><code>@name create\n@methodOf GameObject#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'create: function() {\n      if (!I.created) self.trigger(\'create\');\n      return I.created = true;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Destroys the object and triggers the destroyed event.</p>\n\n<pre><code>@name destroy\n@methodOf GameObject#\n</code></pre>'[39m,
       summary: [32m'<p>Destroys the object and triggers the destroyed event.</p>'[39m,
       body: [32m'<pre><code>@name destroy\n@methodOf GameObject#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'destroy: function() {\n      if (!I.destroyed) self.trigger(\'destroy\');\n      I.destroyed = true;\n      return I.active = false;\n    }\n  });\n  defaultModules = [Bindable, Bounded, Cooldown, Drawable, Durable];\n  modules = defaultModules.concat(I.includedModules.invoke(\'constantize\'));\n  modules = modules.without(I.excludedModules.invoke(\'constantize\'));\n  modules.each(function(Module) {\n    return self.include(Module);\n  });\n  self.attrAccessor("solid");\n  autobindEvents = [\'create\', \'destroy\', \'step\'];\n  autobindEvents.each(function(eventName) {\n    var event;\n    if (event = I[eventName]) {\n      if (typeof event === "function") {\n        return self.bind(eventName, event);\n      } else {\n        return self.bind(eventName, eval("(function() {" + event + "})"));\n      }\n    }\n  });\n  return self;\n};'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'construct'[39m },
       { type: [32m'memberOf'[39m, parent: [32m'GameObject'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'entityData'[39m,
         description: [32m''[39m } ],
    description: 
     { full: [32m'<p>Construct an object instance from the given entity data.</p>'[39m,
       summary: [32m'<p>Construct an object instance from the given entity data.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'GameObject.construct = function(entityData) {\n  if (entityData["class"]) {\n    return entityData["class"].constantize()(entityData);\n  } else {\n    return GameObject(entityData);\n  }\n};\n;\nvar GameState;\n\nGameState = function(I) {\n  var queuedObjects, self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    objects: []\n  });\n  queuedObjects = [];\n  self = Core(I).extend({'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'GameObject'[39m,
       name: [32m'construct'[39m,
       string: [32m'GameObject.construct()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>The add method creates and adds an object to the game world. Two<br />    other events are triggered around this one: beforeAdd and afterAdd.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# you can add arbitrary entityData and\n# the engine will make it into a GameObject\nengine.add \n  x: 50\n  y: 30\n  color: "red"\n\nplayer = engine.add\n  class: "Player"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add\n@methodOf Engine#\n@param {Object} entityData The data used to create the game object.\n@returns {GameObject}\n</code></pre>'[39m,
       summary: [32m'<p>The add method creates and adds an object to the game world. Two<br />    other events are triggered around this one: beforeAdd and afterAdd.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# you can add arbitrary entityData and\n# the engine will make it into a GameObject\nengine.add \n  x: 50\n  y: 30\n  color: "red"\n\nplayer = engine.add\n  class: "Player"\n&lt;/pre&gt;&lt;/code&gt;\n\n@name add\n@methodOf Engine#\n@param {Object} entityData The data used to create the game object.\n@returns {GameObject}\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'add: function(entityData) {\n      var object;\n      self.trigger("beforeAdd", entityData);\n      object = GameObject.construct(entityData);\n      object.create();\n      self.trigger("afterAdd", object);\n      if (I.updating) {\n        queuedObjects.push(object);\n      } else {\n        I.objects.push(object);\n      }\n      return object;\n    },\n    objects: function() {\n      return I.objects.copy();\n    }\n  });\n  self.include(Bindable);\n  self.bind("update", function() {\n    var toRemove, _ref;\n    I.updating = true;\n    _ref = I.objects.partition(function(object) {\n      return object.update();\n    }), I.objects = _ref[0], toRemove = _ref[1];\n    toRemove.invoke("trigger", "remove");\n    I.objects = I.objects.concat(queuedObjects);\n    queuedObjects = [];\n    return I.updating = false;\n  });\n  self.include(GameState.Cameras);\n  self.include(GameState.SaveState);\n  return self;\n};\n;\n\nGameState.Cameras = function(I, self) {\n  var cameras;\n  cameras = [Camera()];\n  self.bind(\'afterUpdate\', function() {\n    return self.cameras().each(function(camera) {\n      return camera.trigger(\'afterUpdate\');\n    });\n  });\n  self.bind(\'draw\', function(canvas) {\n    return self.cameras().invoke(\'trigger\', \'draw\', canvas, self.objects());\n  });\n  self.bind(\'overlay\', function(canvas) {\n    return self.cameras().each(function(camera) {\n      return camera.trigger(\'overlay\', canvas);\n    });\n  });\n  return {\n    addCamera: function(data) {\n      return cameras.push(Camera(data));\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Returns the array of camera objects.</p>\n\n<pre><code>@name cameras\n@methodOf Engine#\n@returns {Array}\n</code></pre>'[39m,
       summary: [32m'<p>Returns the array of camera objects.</p>'[39m,
       body: [32m'<pre><code>@name cameras\n@methodOf Engine#\n@returns {Array}\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'cameras: function(newCameras) {\n      if (newCameras) {\n        cameras = newCameras;\n        return self;\n      } else {\n        return cameras;\n      }\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'SaveState'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'GameState'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the game state'[39m } ],
    description: 
     { full: [32m'<p>The <code>SaveState</code> module provides methods to save and restore the current game state.</p>'[39m,
       summary: [32m'<p>The <code>SaveState</code> module provides methods to save and restore the current game state.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'GameState.SaveState = function(I, self) {\n  var savedState;\n  savedState = null;\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'GameState'[39m,
       name: [32m'SaveState'[39m,
       string: [32m'GameState.SaveState()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Save the current game state and returns a JSON object representing that state.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.bind \'update\', -&gt;\n  if justPressed.s\n    engine.saveState()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name saveState\n@methodOf GameState#\n@returns {Array} An array of the instance data of all objects in the game state\n</code></pre>'[39m,
       summary: [32m'<p>Save the current game state and returns a JSON object representing that state.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.bind \'update\', -&gt;\n  if justPressed.s\n    engine.saveState()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name saveState\n@methodOf GameState#\n@returns {Array} An array of the instance data of all objects in the game state\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'saveState: function() {\n      return savedState = I.objects.map(function(object) {\n        return Object.extend({}, object.I);\n      });\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Loads the game state passed in, or the last saved state, if any.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.bind \'update\', -&gt;\n  if justPressed.l\n    # loads the last saved state\n    engine.loadState()\n\n  if justPressed.o\n    # removes all game objects, then reinstantiates \n    # them with the entityData passed in\n    engine.loadState([{x: 40, y: 50, class: "Player"}, {x: 0, y: 0, class: "Enemy"}, {x: 500, y: 400, class: "Boss"}])\n&lt;/pre&gt;&lt;/code&gt;\n\n@name loadState\n@methodOf GameState#\n@param [newState] An arraf of object instance data to load.\n</code></pre>'[39m,
       summary: [32m'<p>Loads the game state passed in, or the last saved state, if any.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.bind \'update\', -&gt;\n  if justPressed.l\n    # loads the last saved state\n    engine.loadState()\n\n  if justPressed.o\n    # removes all game objects, then reinstantiates \n    # them with the entityData passed in\n    engine.loadState([{x: 40, y: 50, class: "Player"}, {x: 0, y: 0, class: "Enemy"}, {x: 500, y: 400, class: "Boss"}])\n&lt;/pre&gt;&lt;/code&gt;\n\n@name loadState\n@methodOf GameState#\n@param [newState] An arraf of object instance data to load.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'loadState: function(newState) {\n      if (newState || (newState = savedState)) {\n        I.objects.invoke("trigger", "remove");\n        I.objects = [];\n        return newState.each(function(objectData) {\n          return self.add(Object.extend({}, objectData));\n        });\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Reloads the current game state, useful for hotswapping code.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.I.objects.each (object) -&gt;\n  # bring all objects to (0, 0) for some reason\n  object.I.x = 0\n  object.I.y = 0\n\n# reload all objects to make sure\n# they are at (0, 0)  \nengine.reload()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name reload\n@methodOf GameState#\n</code></pre>'[39m,
       summary: [32m'<p>Reloads the current game state, useful for hotswapping code.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nengine.I.objects.each (object) -&gt;\n  # bring all objects to (0, 0) for some reason\n  object.I.x = 0\n  object.I.y = 0\n\n# reload all objects to make sure\n# they are at (0, 0)  \nengine.reload()\n&lt;/pre&gt;&lt;/code&gt;\n\n@name reload\n@methodOf GameState#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'reload: function() {\n      var oldObjects;\n      oldObjects = I.objects;\n      I.objects = [];\n      return oldObjects.each(function(object) {\n        object.trigger("remove");\n        return self.add(object.I);\n      });\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'SingleCamera'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'GameState'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the game state'[39m } ],
    description: 
     { full: [32m'<p>The <code>SingleCamera</code> module provides provides a single camera view of the game.<br />Its transform can be adjusted to view different areas and provide various camera effects.</p>'[39m,
       summary: [32m'<p>The <code>SingleCamera</code> module provides provides a single camera view of the game.<br />Its transform can be adjusted to view different areas and provide various camera effects.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'GameState.SingleCamera = function(I, self) {\n  Object.reverseMerge(I, {\n    cameraTransform: Matrix.IDENTITY,\n    zSort: true\n  });\n  self.attrAccessor("cameraTransform");\n  self.bind("draw", function(canvas) {\n    return canvas.withTransform(I.cameraTransform, function(canvas) {\n      var drawObjects;\n      drawObjects = self.objects();\n      if (I.zSort) {\n        drawObjects.sort(function(a, b) {\n          return a.I.zIndex - b.I.zIndex;\n        });\n      }\n      return drawObjects.invoke("draw", canvas);\n    });\n  });\n  return {};\n};\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'GameState'[39m,
       name: [32m'SingleCamera'[39m,
       string: [32m'GameState.SingleCamera()'[39m } },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Movable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Movable module automatically updates the position and velocity of<br />GameObjects based on the velocity and acceleration. It does not check<br />collisions so is probably best suited to particle effect like things.</p>\n\n<p><code><pre><br />player = GameObject<br />  x: 0<br />  y: 0<br />  velocity: Point(0, 0)<br />  acceleration: Point(1, 0)<br />  maxSpeed: 2</p>\n\n<p>player.include(Movable)</p>\n\n<h1>=> <code>velocity is {x: 0, y: 0} and position is {x: 0, y: 0}</code></h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 1, y: 0} and position is {x: 1, y: 0}</code></h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 2, y: 0} and position is {x: 3, y: 0}</code></h1>\n\n<h1>we\'ve hit our maxSpeed so our velocity won\'t increase</h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 2, y: 0} and position is {x: 5, y: 0}</code></h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Movable module automatically updates the position and velocity of<br />GameObjects based on the velocity and acceleration. It does not check<br />collisions so is probably best suited to particle effect like things.</p>'[39m,
       body: [32m'<p><code><pre><br />player = GameObject<br />  x: 0<br />  y: 0<br />  velocity: Point(0, 0)<br />  acceleration: Point(1, 0)<br />  maxSpeed: 2</p>\n\n<p>player.include(Movable)</p>\n\n<h1>=> <code>velocity is {x: 0, y: 0} and position is {x: 0, y: 0}</code></h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 1, y: 0} and position is {x: 1, y: 0}</code></h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 2, y: 0} and position is {x: 3, y: 0}</code></h1>\n\n<h1>we\'ve hit our maxSpeed so our velocity won\'t increase</h1>\n\n<p>player.update()</p>\n\n<h1>=> <code>velocity is {x: 2, y: 0} and position is {x: 5, y: 0}</code></h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Movable;\n\nMovable = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    acceleration: Point(0, 0),\n    velocity: Point(0, 0)\n  });\n  I.acceleration = Point(I.acceleration.x, I.acceleration.y);\n  I.velocity = Point(I.velocity.x, I.velocity.y);\n  return self.bind(\'update\', function() {\n    var currentSpeed;\n    I.velocity = I.velocity.add(I.acceleration);\n    if (I.maxSpeed != null) {\n      currentSpeed = I.velocity.magnitude();\n      if (currentSpeed > I.maxSpeed) {\n        I.velocity = I.velocity.scale(I.maxSpeed / currentSpeed);\n      }\n    }\n    I.x += I.velocity.x;\n    return I.y += I.velocity.y;\n  });\n};\n;\nvar Oscillator;\n\nOscillator = function(options) {\n  var amplitude, offset, period;\n  if (options == null) options = {};\n  amplitude = options.amplitude, period = options.period, offset = options.offset;\n  if (amplitude == null) amplitude = 1;\n  if (period == null) period = 1;\n  if (offset == null) offset = 0;\n  return function(t) {\n    return amplitude * Math.cos(Math.TAU * t / period + offset);\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'namespace'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'Helps'[39m,
         string: [32m'access the assets in your game.'[39m } ],
    description: 
     { full: [32m'<p>@name ResourceLoader</p>'[39m,
       summary: [32m'<p>@name ResourceLoader</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'(function() {\n  var ResourceLoader, typeTable;\n  typeTable = {\n    images: "png",\n    data: "json",\n    tilemaps: "tilemap"\n  };\n  ResourceLoader = {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Return the url for a particular asset.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\nResourceLoader.urlFor("images", "player")\n# =&gt; This returns the url for the file "player.png" in your images directory.\n&lt;/pre&gt;&lt;/code&gt;\n\n@name urlFor\n@methodOf ResourceLoader#\n@param {String} directory The directory your file is in.\n@param {String} name The name of the file.\n@returns {String} The full url of your asset\n</code></pre>'[39m,
       summary: [32m'<p>Return the url for a particular asset.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\nResourceLoader.urlFor("images", "player")\n# =&gt; This returns the url for the file "player.png" in your images directory.\n&lt;/pre&gt;&lt;/code&gt;\n\n@name urlFor\n@methodOf ResourceLoader#\n@param {String} directory The directory your file is in.\n@param {String} name The name of the file.\n@returns {String} The full url of your asset\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'urlFor: function(directory, name) {\n      var type, _ref;\n      directory = (typeof App !== "undefined" && App !== null ? (_ref = App.directories) != null ? _ref[directory] : void 0 : void 0) || directory;\n      type = typeTable[directory];\n      return "" + BASE_URL + "/" + directory + "/" + name + "." + type + "?" + MTIME;\n    }\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["ResourceLoader"] = ResourceLoader;\n})();\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Rotatable'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Core'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Rotatable module rotates the object<br />based on its rotational velocity.</p>\n\n<p><code><pre><br />player = GameObject<br />  x: 0<br />  y: 0<br />  rotationalVelocity: Math.PI / 64</p>\n\n<p>player.include(Rotatable)</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0</h1>\n\n<p>player.update()</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0.04908738521234052 # Math.PI / 64</h1>\n\n<p>player.update()</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0.09817477042468103 # 2 * (Math.PI / 64)</h1>\n\n<p></pre></code></p>'[39m,
       summary: [32m'<p>The Rotatable module rotates the object<br />based on its rotational velocity.</p>'[39m,
       body: [32m'<p><code><pre><br />player = GameObject<br />  x: 0<br />  y: 0<br />  rotationalVelocity: Math.PI / 64</p>\n\n<p>player.include(Rotatable)</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0</h1>\n\n<p>player.update()</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0.04908738521234052 # Math.PI / 64</h1>\n\n<p>player.update()</p>\n\n<p>player.I.rotation</p>\n\n<h1>=> 0.09817477042468103 # 2 * (Math.PI / 64)</h1>\n\n<p></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Rotatable;\n\nRotatable = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    rotation: 0,\n    rotationalVelocity: 0\n  });\n  self.bind(\'update\', function() {\n    return I.rotation += I.rotationalVelocity;\n  });\n  return {};\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Sprite'[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>The Sprite class provides a way to load images for use in games.</p>\n\n<p>By default, images are loaded asynchronously. A proxy object is <br />returned immediately. Even though it has a draw method it will not<br />draw anything to the screen until the image has been loaded.</p>'[39m,
       summary: [32m'<p>The Sprite class provides a way to load images for use in games.</p>'[39m,
       body: [32m'<p>By default, images are loaded asynchronously. A proxy object is <br />returned immediately. Even though it has a draw method it will not<br />draw anything to the screen until the image has been loaded.</p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'(function() {\n  var LoaderProxy, Sprite;\n  LoaderProxy = function() {\n    return {\n      draw: function() {},\n      fill: function() {},\n      frame: function() {},\n      update: function() {},\n      width: null,\n      height: null\n    };\n  };\n  Sprite = function(image, sourceX, sourceY, width, height) {\n    sourceX || (sourceX = 0);\n    sourceY || (sourceY = 0);\n    width || (width = image.width);\n    height || (height = image.height);\n    return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draw this sprite on the given canvas at the given position.</p>\n\n<pre><code>  @name draw\n  @methodOf Sprite#\n  @param {PowerCanvas} canvas Reference to the canvas to draw the sprite on\n  @param {Number} x Position on the x axis to draw the sprite\n  @param {Number} y Position on the y axis to draw the sprite\n</code></pre>'[39m,
       summary: [32m'<p>Draw this sprite on the given canvas at the given position.</p>'[39m,
       body: [32m'<pre><code>  @name draw\n  @methodOf Sprite#\n  @param {PowerCanvas} canvas Reference to the canvas to draw the sprite on\n  @param {Number} x Position on the x axis to draw the sprite\n  @param {Number} y Position on the y axis to draw the sprite\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'draw: function(canvas, x, y) {\n        return canvas.drawImage(image, sourceX, sourceY, width, height, x, y, width, height);\n      },\n      fill: function(canvas, x, y, width, height, repeat) {\n        var pattern;\n        if (repeat == null) repeat = "repeat";\n        pattern = canvas.createPattern(image, repeat);\n        return canvas.drawRect({\n          x: x,\n          y: y,\n          width: width,\n          height: height,\n          color: pattern\n        });\n      },\n      width: width,\n      height: height\n    };\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Loads all sprites from a sprite sheet found in<br />  your images directory, specified by the name passed in.</p>\n\n<p>@name loadSheet<br />  @methodOf Sprite<br />  @param {String} name Name of the spriteSheet image in your images directory<br />  @param {Number} tileWidth Width of each sprite in the sheet<br />  @param {Number} tileHeight Height of each sprite in the sheet<br />  @returns {Array} An array of sprite objects</p>'[39m,
       summary: [32m'<p>Loads all sprites from a sprite sheet found in<br />  your images directory, specified by the name passed in.</p>'[39m,
       body: [32m'<p>@name loadSheet<br />  @methodOf Sprite<br />  @param {String} name Name of the spriteSheet image in your images directory<br />  @param {Number} tileWidth Width of each sprite in the sheet<br />  @param {Number} tileHeight Height of each sprite in the sheet<br />  @returns {Array} An array of sprite objects</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.loadSheet = function(name, tileWidth, tileHeight) {\n    var image, sprites, url;\n    url = ResourceLoader.urlFor("images", name);\n    sprites = [];\n    image = new Image();\n    image.onload = function() {\n      var imgElement;\n      imgElement = this;\n      return (image.height / tileHeight).times(function(row) {\n        return (image.width / tileWidth).times(function(col) {\n          return sprites.push(Sprite(imgElement, col * tileWidth, row * tileHeight, tileWidth, tileHeight));\n        });\n      });\n    };\n    image.src = url;\n    return sprites;\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'loadSheet'[39m,
       string: [32m'Sprite.loadSheet()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Loads a sprite from a given url.</p>\n\n<p>@name load<br />  @methodOf Sprite<br />  @param {String} url<br />  @param {Function} [loadedCallback]<br />  @returns {Sprite} A sprite object</p>'[39m,
       summary: [32m'<p>Loads a sprite from a given url.</p>'[39m,
       body: [32m'<p>@name load<br />  @methodOf Sprite<br />  @param {String} url<br />  @param {Function} [loadedCallback]<br />  @returns {Sprite} A sprite object</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.load = function(url, loadedCallback) {\n    var img, proxy;\n    img = new Image();\n    proxy = LoaderProxy();\n    img.onload = function() {\n      var tile;\n      tile = Sprite(this);\n      Object.extend(proxy, tile);\n      if (loadedCallback) return loadedCallback(proxy);\n    };\n    img.src = url;\n    return proxy;\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'load'[39m,
       string: [32m'Sprite.load()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Loads a sprite with the given pixie id.</p>\n\n<p>@name fromPixieId<br />  @methodOf Sprite<br />  @param {Number} id Pixie Id of the sprite to load<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m,
       summary: [32m'<p>Loads a sprite with the given pixie id.</p>'[39m,
       body: [32m'<p>@name fromPixieId<br />  @methodOf Sprite<br />  @param {Number} id Pixie Id of the sprite to load<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.fromPixieId = function(id, callback) {\n    return Sprite.load("http://pixieengine.com/s3/sprites/" + id + "/original.png", callback);\n  };'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'fromPixieId'[39m,
       string: [32m'Sprite.fromPixieId()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>A sprite that draws nothing.</p>\n\n<p>@name EMPTY<br />  @fieldOf Sprite<br />  @constant<br />  @returns {Sprite}</p>'[39m,
       summary: [32m'<p>A sprite that draws nothing.</p>'[39m,
       body: [32m'<p>@name EMPTY<br />  @fieldOf Sprite<br />  @constant<br />  @returns {Sprite}</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A sprite that draws nothing.</p>\n\n<p>@name NONE<br />  @fieldOf Sprite<br />  @constant<br />  @returns {Sprite}</p>'[39m,
       summary: [32m'<p>A sprite that draws nothing.</p>'[39m,
       body: [32m'<p>@name NONE<br />  @fieldOf Sprite<br />  @constant<br />  @returns {Sprite}</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.EMPTY = Sprite.NONE = LoaderProxy();'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'EMPTY'[39m,
       value: [32m'Sprite.NONE = LoaderProxy()'[39m,
       string: [32m'Sprite.EMPTY'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Loads a sprite from a given url.</p>\n\n<p>@name fromURL<br />  @methodOf Sprite<br />  @param {String} url The url where the image to load is located<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m,
       summary: [32m'<p>Loads a sprite from a given url.</p>'[39m,
       body: [32m'<p>@name fromURL<br />  @methodOf Sprite<br />  @param {String} url The url where the image to load is located<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.fromURL = Sprite.load;'[39m,
    ctx: 
     { type: [32m'property'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'fromURL'[39m,
       value: [32m'Sprite.load'[39m,
       string: [32m'Sprite.fromURL'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Loads a sprite with the given name.</p>\n\n<p>@name loadByName<br />  @methodOf Sprite<br />  @param {String} name The name of the image in your images directory<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m,
       summary: [32m'<p>Loads a sprite with the given name.</p>'[39m,
       body: [32m'<p>@name loadByName<br />  @methodOf Sprite<br />  @param {String} name The name of the image in your images directory<br />  @param {Function} [callback] Function to execute once the image is loaded. The sprite proxy data is passed to this as a parameter.<br />  @returns {Sprite}</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'Sprite.loadByName = function(name, callback) {\n    return Sprite.load(ResourceLoader.urlFor("images", name), callback);\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Sprite"] = Sprite;\n})();\n;\n;\n;\n;\n;\n\ndocument.oncontextmenu = function() {\n  return false;\n};\n\n$(document).bind("keydown", function(event) {\n  if (!$(event.target).is("input")) return event.preventDefault();\n});\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Sprite'[39m,
       name: [32m'loadByName'[39m,
       string: [32m'Sprite.loadByName()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>This error handler captures any runtime errors and reports them to the IDE<br />if present.</p>'[39m,
       summary: [32m'<p>This error handler captures any runtime errors and reports them to the IDE<br />if present.</p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'window.onerror = function(message, url, lineNumber) {\n  var errorContext;\n  errorContext = $(\'script\').last().text().split(\'\\n\').slice(lineNumber - 5, (lineNumber + 4) + 1 || 9e9);\n  errorContext[4] = "<b style=\'font-weight: bold; text-decoration: underline;\'>" + errorContext[4] + "</b>";\n  return typeof displayRuntimeError === "function" ? displayRuntimeError("<code>" + message + "</code> <br /><br />(Sometimes this context may be wrong.)<br /><code><pre>" + (errorContext.join(\'\\n\')) + "</pre></code>") : void 0;\n};\n;\nvar Joysticks,\n  __slice = Array.prototype.slice;\n\nJoysticks = (function() {\n  var AXIS_MAX, Controller, DEAD_ZONE, MAX_BUFFER, TRIP_HIGH, TRIP_LOW, axisMappingDefault, axisMappingOSX, buttonMappingDefault, buttonMappingOSX, controllers, displayInstallPrompt, joysticks, plugin, previousJoysticks, type;\n  type = "application/x-boomstickjavascriptjoysticksupport";\n  plugin = null;\n  MAX_BUFFER = 2000;\n  AXIS_MAX = 32767 - MAX_BUFFER;\n  DEAD_ZONE = AXIS_MAX * 0.2;\n  TRIP_HIGH = AXIS_MAX * 0.75;\n  TRIP_LOW = AXIS_MAX * 0.5;\n  previousJoysticks = [];\n  joysticks = [];\n  controllers = [];\n  buttonMappingDefault = {\n    "A": 1,\n    "B": 2,\n    "C": 4,\n    "D": 8,\n    "X": 4,\n    "Y": 8,\n    "R": 32,\n    "RB": 32,\n    "R1": 32,\n    "L": 16,\n    "LB": 16,\n    "L1": 16,\n    "SELECT": 64,\n    "BACK": 64,\n    "START": 128,\n    "HOME": 256,\n    "GUIDE": 256,\n    "TL": 512,\n    "TR": 1024,\n    "ANY": 0xFFFFFF\n  };\n  buttonMappingOSX = {\n    "A": 2048,\n    "B": 4096,\n    "C": 8192,\n    "D": 16384,\n    "X": 8192,\n    "Y": 16384,\n    "R": 512,\n    "L": 256,\n    "SELECT": 32,\n    "BACK": 32,\n    "START": 16,\n    "HOME": 1024,\n    "LT": 64,\n    "TR": 128,\n    "ANY": 0xFFFFFF0\n  };\n  axisMappingDefault = {\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5\n  };\n  axisMappingOSX = {\n    0: 2,\n    1: 3,\n    2: 4,\n    3: 5,\n    4: 0,\n    5: 1\n  };\n  displayInstallPrompt = function(text, url) {\n    return $("<a />", {\n      css: {\n        backgroundColor: "yellow",\n        boxSizing: "border-box",\n        color: "#000",\n        display: "block",\n        fontWeight: "bold",\n        left: 0,\n        padding: "1em",\n        position: "absolute",\n        textDecoration: "none",\n        top: 0,\n        width: "100%",\n        zIndex: 2000\n      },\n      href: url,\n      target: "_blank",\n      text: text\n    }).appendTo("body");\n  };\n  Controller = function(i, remapOSX) {\n    var axisMapping, axisTrips, buttonMapping, currentState, previousState, self;\n    if (remapOSX === void 0) remapOSX = navigator.platform.match(/^Mac/);\n    if (remapOSX) {\n      buttonMapping = buttonMappingOSX;\n      axisMapping = axisMappingOSX;\n    } else {\n      buttonMapping = buttonMappingDefault;\n      axisMapping = axisMappingDefault;\n    }\n    currentState = function() {\n      return joysticks[i];\n    };\n    previousState = function() {\n      return previousJoysticks[i];\n    };\n    axisTrips = [];\n    return self = Core().include(Bindable).extend({\n      actionDown: function() {\n        var buttons, state;\n        buttons = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        if (state = currentState()) {\n          return buttons.inject(false, function(down, button) {\n            return down || state.buttons & buttonMapping[button];\n          });\n        } else {\n          return false;\n        }\n      },\n      buttonPressed: function(button) {\n        var buttonId;\n        buttonId = buttonMapping[button];\n        return (self.buttons() & buttonId) && !(previousState().buttons & buttonId);\n      },\n      position: function(stick) {\n        var magnitude, p, ratio, state;\n        if (stick == null) stick = 0;\n        if (state = currentState()) {\n          p = Point(self.axis(2 * stick), self.axis(2 * stick + 1));\n          magnitude = p.magnitude();\n          if (magnitude > AXIS_MAX) {\n            return p.norm();\n          } else if (magnitude < DEAD_ZONE) {\n            return Point(0, 0);\n          } else {\n            ratio = magnitude / AXIS_MAX;\n            return p.scale(ratio / AXIS_MAX);\n          }\n        } else {\n          return Point(0, 0);\n        }\n      },\n      axis: function(n) {\n        n = axisMapping[n];\n        return self.axes()[n] || 0;\n      },\n      axes: function() {\n        var state;\n        if (state = currentState()) {\n          return state.axes;\n        } else {\n          return [];\n        }\n      },\n      buttons: function() {\n        var state;\n        if (state = currentState()) return state.buttons;\n      },\n      processEvents: function() {\n        var x, y, _ref;\n        _ref = [0, 1].map(function(n) {\n          if (!axisTrips[n] && self.axis(n).abs() > TRIP_HIGH) {\n            axisTrips[n] = true;\n            return self.axis(n).sign();\n          }\n          if (axisTrips[n] && self.axis(n).abs() < TRIP_LOW) axisTrips[n] = false;\n          return 0;\n        }), x = _ref[0], y = _ref[1];\n        if (!x || !y) return self.trigger("tap", Point(x, y));\n      },\n      drawDebug: function(canvas) {\n        var axis, i, lineHeight, _len, _ref;\n        lineHeight = 18;\n        canvas.fillColor("#FFF");\n        _ref = self.axes();\n        for (i = 0, _len = _ref.length; i < _len; i++) {\n          axis = _ref[i];\n          canvas.fillText(axis, 0, i * lineHeight);\n        }\n        return canvas.fillText(self.buttons(), 0, i * lineHeight);\n      }\n    });\n  };\n  return {\n    getController: function(i) {\n      return controllers[i] || (controllers[i] = Controller(i));\n    },\n    init: function() {\n      var periodicCheck, promptElement;\n      if (!plugin) {\n        plugin = document.createElement("object");\n        plugin.type = type;\n        plugin.width = 0;\n        plugin.height = 0;\n        $("body").append(plugin);\n        plugin.maxAxes = 6;\n        if (!plugin.status) {\n          promptElement = displayInstallPrompt("Your browser does not yet handle joysticks, please click here to install the Boomstick plugin!", "https://github.com/STRd6/Boomstick/wiki");\n          periodicCheck = function() {\n            if (plugin.status) {\n              return promptElement.remove();\n            } else {\n              return setTimeout(periodicCheck, 500);\n            }\n          };\n          return periodicCheck();\n        }\n      }\n    },\n    status: function() {\n      return plugin != null ? plugin.status : void 0;\n    },\n    update: function() {\n      var controller, _i, _len, _results;\n      if (plugin.joysticksJSON) {\n        previousJoysticks = joysticks;\n        joysticks = JSON.parse(plugin.joysticksJSON());\n      }\n      _results = [];\n      for (_i = 0, _len = controllers.length; _i < _len; _i++) {\n        controller = controllers[_i];\n        _results.push(controller != null ? controller.processEvents() : void 0);\n      }\n      return _results;\n    },\n    joysticks: function() {\n      return joysticks;\n    }\n  };\n})();\n;'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'window'[39m,
       name: [32m'onerror'[39m,
       string: [32m'window.onerror()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>jQuery Hotkeys Plugin<br />Copyright 2010, John Resig<br />Dual licensed under the MIT or GPL Version 2 licenses.</p>\n\n<h2>Based upon the plugin by Tzury Bar Yochay</h2>\n\n<p><a href=\'http://github.com/tzuryby/hotkeys\'>http://github.com/tzuryby/hotkeys</a></p>\n\n<h2>Original idea by</h2>\n\n<p>Binny V A, <a href=\'http://www.openjs.com/scripts/events/keyboard_shortcuts/\'>http://www.openjs.com/scripts/events/keyboard_shortcuts/</a></p>'[39m,
       summary: [32m'<p>jQuery Hotkeys Plugin<br />Copyright 2010, John Resig<br />Dual licensed under the MIT or GPL Version 2 licenses.</p>'[39m,
       body: [32m'<h2>Based upon the plugin by Tzury Bar Yochay</h2>\n\n<p><a href=\'http://github.com/tzuryby/hotkeys\'>http://github.com/tzuryby/hotkeys</a></p>\n\n<h2>Original idea by</h2>\n\n<p>Binny V A, <a href=\'http://www.openjs.com/scripts/events/keyboard_shortcuts/\'>http://www.openjs.com/scripts/events/keyboard_shortcuts/</a></p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'(function(jQuery) {\n  var isFunctionKey, isTextAcceptingInput, keyHandler;\n  isTextAcceptingInput = function(element) {\n    return /textarea|select/i.test(element.nodeName) || element.type === "text" || element.type === "password";\n  };\n  isFunctionKey = function(event) {\n    var _ref;\n    return (event.type !== "keypress") && ((112 <= (_ref = event.which) && _ref <= 123));\n  };\n  jQuery.hotkeys = {\n    version: "0.8",\n    specialKeys: {\n      8: "backspace",\n      9: "tab",\n      13: "return",\n      16: "shift",\n      17: "ctrl",\n      18: "alt",\n      19: "pause",\n      20: "capslock",\n      27: "esc",\n      32: "space",\n      33: "pageup",\n      34: "pagedown",\n      35: "end",\n      36: "home",\n      37: "left",\n      38: "up",\n      39: "right",\n      40: "down",\n      45: "insert",\n      46: "del",\n      96: "0",\n      97: "1",\n      98: "2",\n      99: "3",\n      100: "4",\n      101: "5",\n      102: "6",\n      103: "7",\n      104: "8",\n      105: "9",\n      106: "*",\n      107: "+",\n      109: "-",\n      110: ".",\n      111: "/",\n      112: "f1",\n      113: "f2",\n      114: "f3",\n      115: "f4",\n      116: "f5",\n      117: "f6",\n      118: "f7",\n      119: "f8",\n      120: "f9",\n      121: "f10",\n      122: "f11",\n      123: "f12",\n      144: "numlock",\n      145: "scroll",\n      186: ";",\n      187: "=",\n      188: ",",\n      189: "-",\n      190: ".",\n      191: "/",\n      219: "[",\n      220: "\\\\",\n      221: "]",\n      222: "\'",\n      224: "meta"\n    },\n    shiftNums: {\n      "`": "~",\n      "1": "!",\n      "2": "@",\n      "3": "#",\n      "4": "$",\n      "5": "%",\n      "6": "^",\n      "7": "&",\n      "8": "*",\n      "9": "(",\n      "0": ")",\n      "-": "_",\n      "=": "+",\n      ";": ":",\n      "\'": "\\"",\n      ",": "<",\n      ".": ">",\n      "/": "?",\n      "\\\\": "|"\n    }\n  };\n  keyHandler = function(handleObj) {\n    var keys, origHandler;\n    if (typeof handleObj.data !== "string") return;\n    origHandler = handleObj.handler;\n    keys = handleObj.data.toLowerCase().split(" ");\n    return handleObj.handler = function(event) {\n      var character, key, modif, possible, special, target, _i, _len;\n      special = event.type !== "keypress" && jQuery.hotkeys.specialKeys[event.which];\n      character = String.fromCharCode(event.which).toLowerCase();\n      modif = "";\n      possible = {};\n      target = event.target;\n      if (event.altKey && special !== "alt") modif += "alt+";\n      if (event.ctrlKey && special !== "ctrl") modif += "ctrl+";\n      if (event.metaKey && !event.ctrlKey && special !== "meta") modif += "meta+";\n      if (this !== target) {\n        if (isTextAcceptingInput(target) && !modif && !isFunctionKey(event)) {\n          return;\n        }\n      }\n      if (event.shiftKey && special !== "shift") modif += "shift+";\n      if (special) {\n        possible[modif + special] = true;\n      } else {\n        possible[modif + character] = true;\n        possible[modif + jQuery.hotkeys.shiftNums[character]] = true;\n        if (modif === "shift+") {\n          possible[jQuery.hotkeys.shiftNums[character]] = true;\n        }\n      }\n      for (_i = 0, _len = keys.length; _i < _len; _i++) {\n        key = keys[_i];\n        if (possible[key]) return origHandler.apply(this, arguments);\n      }\n    };\n  };\n  return jQuery.each(["keydown", "keyup", "keypress"], function() {\n    return jQuery.event.special[this] = {\n      add: keyHandler\n    };\n  });\n})(jQuery);\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'reverseMerge'[39m },
       { type: [32m'methodOf'[39m, string: [32m'jQuery#'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'target'[39m,
         description: [32m'the object to merge the given properties onto'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'objects...'[39m,
         description: [32m'one or more objects whose properties are merged onto target'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'return'[39m,
         types: [ [32m'Object'[39m ],
         description: [32m'target'[39m } ],
    description: 
     { full: [32m'<p>Merges properties from objects into target without overiding.<br />First come, first served.</p>'[39m,
       summary: [32m'<p>Merges properties from objects into target without overiding.<br />First come, first served.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var __slice = Array.prototype.slice;\n\njQuery.extend({\n  reverseMerge: function() {\n    var name, object, objects, target, _i, _len;\n    target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      for (name in object) {\n        if (!target.hasOwnProperty(name)) target[name] = object[name];\n      }\n    }\n    return target;\n  }\n});\n;\n\n$(function() {'[39m,
    ctx: 
     { type: [32m'declaration'[39m,
       name: [32m'__slice'[39m,
       value: [32m'Array.prototype.slice'[39m,
       string: [32m'__slice'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>The global keydown property lets your query the status of keys.</p>\n\n<p><code><pre><br />  if keydown.left<br />    moveLeft()</p>\n\n<p>if keydown.a or keydown.space<br />    attack()</p>\n\n<p>if keydown.return<br />    confirm()</p>\n\n<p>if keydown.esc<br />    cancel()<br />  </pre></code></p>\n\n<p>@name keydown<br />  @namespace</p>'[39m,
       summary: [32m'<p>The global keydown property lets your query the status of keys.</p>'[39m,
       body: [32m'<p><code><pre><br />  if keydown.left<br />    moveLeft()</p>\n\n<p>if keydown.a or keydown.space<br />    attack()</p>\n\n<p>if keydown.return<br />    confirm()</p>\n\n<p>if keydown.esc<br />    cancel()<br />  </pre></code></p>\n\n<p>@name keydown<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The global justPressed property lets your query the status of keys. However, <br />  unlike keydown it will only trigger once for each time the key is pressed.</p>\n\n<p><code><pre><br />  if justPressed.left<br />    moveLeft()</p>\n\n<p>if justPressed.a or justPressed.space<br />    attack()</p>\n\n<p>if justPressed.return<br />    confirm()</p>\n\n<p>if justPressed.esc<br />    cancel()<br />  </pre></code></p>\n\n<p>@name justPressed<br />  @namespace</p>'[39m,
       summary: [32m'<p>The global justPressed property lets your query the status of keys. However, <br />  unlike keydown it will only trigger once for each time the key is pressed.</p>'[39m,
       body: [32m'<p><code><pre><br />  if justPressed.left<br />    moveLeft()</p>\n\n<p>if justPressed.a or justPressed.space<br />    attack()</p>\n\n<p>if justPressed.return<br />    confirm()</p>\n\n<p>if justPressed.esc<br />    cancel()<br />  </pre></code></p>\n\n<p>@name justPressed<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var keyName, prevKeysDown;\n  window.keydown = {};\n  window.justPressed = {};\n  prevKeysDown = {};\n  keyName = function(event) {\n    return jQuery.hotkeys.specialKeys[event.which] || String.fromCharCode(event.which).toLowerCase();\n  };\n  $(document).bind("keydown", function(event) {\n    var key;\n    key = keyName(event);\n    return keydown[key] = true;\n  });\n  $(document).bind("keyup", function(event) {\n    var key;\n    key = keyName(event);\n    return keydown[key] = false;\n  });\n  return window.updateKeys = function() {\n    var key, value, _results;\n    window.justPressed = {};\n    for (key in keydown) {\n      value = keydown[key];\n      if (!prevKeysDown[key]) justPressed[key] = value;\n    }\n    prevKeysDown = {};\n    _results = [];\n    for (key in keydown) {\n      value = keydown[key];\n      _results.push(prevKeysDown[key] = value);\n    }\n    return _results;\n  };\n});\n;\n\n$(function() {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The global mouseDown property lets your query the status of mouse buttons.</p>\n\n<p><code><pre><br />  if mouseDown.left<br />    moveLeft()</p>\n\n<p>if mouseDown.right<br />    attack()<br />  </pre></code></p>\n\n<p>@name mouseDown<br />  @namespace</p>'[39m,
       summary: [32m'<p>The global mouseDown property lets your query the status of mouse buttons.</p>'[39m,
       body: [32m'<p><code><pre><br />  if mouseDown.left<br />    moveLeft()</p>\n\n<p>if mouseDown.right<br />    attack()<br />  </pre></code></p>\n\n<p>@name mouseDown<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>The global mousePressed property lets your query the status of mouse buttons.<br />  However, unlike mouseDown it will only trigger the first time the button<br />  pressed.</p>\n\n<p><code><pre><br />  if mousePressed.left<br />    moveLeft()</p>\n\n<p>if mousePressed.right<br />    attack()<br />  </pre></code></p>\n\n<p>@name justPressed<br />  @namespace</p>'[39m,
       summary: [32m'<p>The global mousePressed property lets your query the status of mouse buttons.<br />  However, unlike mouseDown it will only trigger the first time the button<br />  pressed.</p>'[39m,
       body: [32m'<p><code><pre><br />  if mousePressed.left<br />    moveLeft()</p>\n\n<p>if mousePressed.right<br />    attack()<br />  </pre></code></p>\n\n<p>@name justPressed<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var buttonName, buttonNames, prevButtonsDown;\n  window.mouseDown = {};\n  window.mousePressed = {};\n  window.mousePosition = Point(0, 0);\n  prevButtonsDown = {};\n  buttonNames = {\n    1: "left",\n    2: "middle",\n    3: "right"\n  };\n  buttonName = function(event) {\n    return buttonNames[event.which];\n  };\n  $(document).bind("mousemove", function(event) {\n    mousePosition.x = event.pageX;\n    return mousePosition.y = event.pageY;\n  });\n  $(document).bind("mousedown", function(event) {\n    return mouseDown[buttonName(event)] = true;\n  });\n  $(document).bind("mouseup", function(event) {\n    return mouseDown[buttonName(event)] = false;\n  });\n  return window.updateMouse = function() {\n    var button, value, _results;\n    window.mousePressed = {};\n    for (button in mouseDown) {\n      value = mouseDown[button];\n      if (!prevButtonsDown[button]) mousePressed[button] = value;\n    }\n    prevButtonsDown = {};\n    _results = [];\n    for (button in mouseDown) {\n      value = mouseDown[button];\n      _results.push(prevButtonsDown[button] = value);\n    }\n    return _results;\n  };\n});\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Music'[39m },
       { type: [32m'namespace'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>The Music object provides an easy API to play<br />songs from your sounds project directory. By<br />default, the track is looped.</p>\n\n<p><code><pre><br />  Music.play(\'intro_theme\')<br /></pre></code></p>'[39m,
       summary: [32m'<p>The Music object provides an easy API to play<br />songs from your sounds project directory. By<br />default, the track is looped.</p>'[39m,
       body: [32m'<p><code><pre><br />  Music.play(\'intro_theme\')<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Music;\n\nMusic = (function() {\n  var track;\n  track = $("<audio />", {\n    loop: "loop"\n  }).appendTo(\'body\').get(0);\n  track.volume = 1;\n  return {\n    play: function(name) {\n      track.src = "" + BASE_URL + "/sounds/" + name + ".mp3";\n      return track.play();\n    },\n    volume: function(newVolume) {\n      if (newVolume != null) {\n        track.volume = newVolume;\n        return this;\n      } else {\n        return track.volume;\n      }\n    }\n  };\n})();\n;\nvar __slice = Array.prototype.slice;\n\n(function($) {\n  return $.fn.pixieCanvas = function(options) {\n    var $canvas, canvas, canvasAttrAccessor, context, contextAttrAccessor;\n    options || (options = {});\n    canvas = this.get(0);\n    context = void 0;'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>PixieCanvas provides a convenient wrapper for working with Context2d.</p>\n\n<pre><code>Methods try to be as flexible as possible as to what arguments they take.\n\nNon-getter methods return `this` for method chaining.\n\n@name PixieCanvas\n@constructor\n</code></pre>'[39m,
       summary: [32m'<p>PixieCanvas provides a convenient wrapper for working with Context2d.</p>'[39m,
       body: [32m'<pre><code>Methods try to be as flexible as possible as to what arguments they take.\n\nNon-getter methods return `this` for method chaining.\n\n@name PixieCanvas\n@constructor\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'$canvas = $(canvas).extend({'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Passes this canvas to the block with the given matrix transformation<br />      applied. All drawing methods called within the block will draw<br />      into the canvas with the transformation applied. The transformation<br />      is removed at the end of the block, even if the block throws an error.</p>\n\n<pre><code>  @name withTransform\n  @methodOf PixieCanvas#\n\n  @param {Matrix} matrix\n  @param {Function} block\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Passes this canvas to the block with the given matrix transformation<br />      applied. All drawing methods called within the block will draw<br />      into the canvas with the transformation applied. The transformation<br />      is removed at the end of the block, even if the block throws an error.</p>'[39m,
       body: [32m'<pre><code>  @name withTransform\n  @methodOf PixieCanvas#\n\n  @param {Matrix} matrix\n  @param {Function} block\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'withTransform: function(matrix, block) {\n        context.save();\n        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n        try {\n          block(this);\n        } finally {\n          context.restore();\n        }\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Clear the canvas (or a portion of it).</p>\n\n<pre><code>  Clear the entire canvas\n\n  &lt;code&gt;&lt;pre&gt;\n  canvas.clear()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  Clear a portion of the canvas\n\n  &lt;code class="run"&gt;&lt;pre&gt;\n  # Set up: Fill canvas with blue\n  canvas.fill("blue")  \n\n  # Clear a portion of the canvas\n  canvas.clear\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n  &lt;/pre&gt;&lt;/code&gt;\n\n  You can also clear the canvas by passing x, y, width height as\n  unnamed parameters:\n\n  &lt;code&gt;&lt;pre&gt;\n  canvas.clear(25, 25, 50, 50)\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name clear\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] where to start clearing on the x axis\n  @param {Number} [y] where to start clearing on the y axis\n  @param {Number} [width] width of area to clear\n  @param {Number} [height] height of area to clear\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Clear the canvas (or a portion of it).</p>'[39m,
       body: [32m'<pre><code>  Clear the entire canvas\n\n  &lt;code&gt;&lt;pre&gt;\n  canvas.clear()\n  &lt;/pre&gt;&lt;/code&gt;\n\n  Clear a portion of the canvas\n\n  &lt;code class="run"&gt;&lt;pre&gt;\n  # Set up: Fill canvas with blue\n  canvas.fill("blue")  \n\n  # Clear a portion of the canvas\n  canvas.clear\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n  &lt;/pre&gt;&lt;/code&gt;\n\n  You can also clear the canvas by passing x, y, width height as\n  unnamed parameters:\n\n  &lt;code&gt;&lt;pre&gt;\n  canvas.clear(25, 25, 50, 50)\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name clear\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] where to start clearing on the x axis\n  @param {Number} [y] where to start clearing on the y axis\n  @param {Number} [width] width of area to clear\n  @param {Number} [height] height of area to clear\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'clear: function(x, y, width, height) {\n        var _ref;\n        if (x == null) x = {};\n        if (y == null) {\n          _ref = x, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height;\n        }\n        x || (x = 0);\n        y || (y = 0);\n        if (width == null) width = canvas.width;\n        if (height == null) height = canvas.height;\n        context.clearRect(x, y, width, height);\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Fills the entire canvas (or a specified section of it) with<br />      the given color.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Paint the town (entire canvas) red\n  canvas.fill "red"\n\n  # Fill a section of the canvas white (#FFF)\n  canvas.fill\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n    color: "#FFF"\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name fill\n  @methodOf PixieCanvas#\n\n  @param {Number} [x=0] Optional x position to fill from\n  @param {Number} [y=0] Optional y position to fill from\n  @param {Number} [width=canvas.width] Optional width of area to fill\n  @param {Number} [height=canvas.height] Optional height of area to fill \n  @param {Bounds} [bounds] bounds object to fill\n  @param {String|Color} [color] color of area to fill\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Fills the entire canvas (or a specified section of it) with<br />      the given color.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Paint the town (entire canvas) red\n  canvas.fill "red"\n\n  # Fill a section of the canvas white (#FFF)\n  canvas.fill\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n    color: "#FFF"\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name fill\n  @methodOf PixieCanvas#\n\n  @param {Number} [x=0] Optional x position to fill from\n  @param {Number} [y=0] Optional y position to fill from\n  @param {Number} [width=canvas.width] Optional width of area to fill\n  @param {Number} [height=canvas.height] Optional height of area to fill \n  @param {Bounds} [bounds] bounds object to fill\n  @param {String|Color} [color] color of area to fill\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'fill: function(color) {\n        var bounds, height, width, x, y, _ref;\n        if (color == null) color = {};\n        if (!((typeof color.isString === "function" ? color.isString() : void 0) || color.channels)) {\n          _ref = color, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, bounds = _ref.bounds, color = _ref.color;\n        }\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        x || (x = 0);\n        y || (y = 0);\n        if (width == null) width = canvas.width;\n        if (height == null) height = canvas.height;\n        this.fillColor(color);\n        context.fillRect(x, y, width, height);\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A direct map to the Context2d draw image. <code>GameObject</code>s<br />      that implement drawable will have this wrapped up nicely,<br />      so there is a good chance that you will not have to deal with<br />      it directly.</p>\n\n<pre><code>  @name drawImage\n  @methodOf PixieCanvas#\n\n  @param image\n  @param {Number} sx\n  @param {Number} sy\n  @param {Number} sWidth\n  @param {Number} sHeight\n  @param {Number} dx\n  @param {Number} dy\n  @param {Number} dWidth\n  @param {Number} dHeight\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>A direct map to the Context2d draw image. <code>GameObject</code>s<br />      that implement drawable will have this wrapped up nicely,<br />      so there is a good chance that you will not have to deal with<br />      it directly.</p>'[39m,
       body: [32m'<pre><code>  @name drawImage\n  @methodOf PixieCanvas#\n\n  @param image\n  @param {Number} sx\n  @param {Number} sy\n  @param {Number} sWidth\n  @param {Number} sHeight\n  @param {Number} dx\n  @param {Number} dy\n  @param {Number} dWidth\n  @param {Number} dHeight\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawImage: function(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n        context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draws a circle at the specified position with the specified<br />      radius and color.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a large orange circle\n  canvas.drawCircle\n    radius: 30\n    position: Point(100, 75)\n    color: "orange"\n\n  # Draw a blue circle with radius 10 at (25, 50)\n  # and a red stroke\n  canvas.drawCircle\n    x: 25\n    y: 50\n    radius: 10\n    color: "blue"\n    stroke:\n      color: "red"\n      width: 1\n\n  # Create a circle object to set up the next examples\n  circle =\n    radius: 20\n    x: 50\n    y: 50\n\n  # Draw a given circle in yellow\n  canvas.drawCircle\n    circle: circle\n    color: "yellow"\n\n  # Draw the circle in green at a different position\n  canvas.drawCircle\n    circle: circle\n    position: Point(25, 75)\n    color: "green"\n\n  # Draw an outline circle in purple.\n  canvas.drawCircle\n    x: 50\n    y: 75\n    radius: 10\n    stroke:\n      color: "purple"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawCircle\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Point} [position] position object of location to start drawing. This will override x and y values passed\n  @param {Number} [radius] length of the radius of the circle\n  @param {Color|String} [color] color of the circle\n  @param {Circle} [circle] circle object that contains position and radius. Overrides x, y, and radius if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draws a circle at the specified position with the specified<br />      radius and color.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a large orange circle\n  canvas.drawCircle\n    radius: 30\n    position: Point(100, 75)\n    color: "orange"\n\n  # Draw a blue circle with radius 10 at (25, 50)\n  # and a red stroke\n  canvas.drawCircle\n    x: 25\n    y: 50\n    radius: 10\n    color: "blue"\n    stroke:\n      color: "red"\n      width: 1\n\n  # Create a circle object to set up the next examples\n  circle =\n    radius: 20\n    x: 50\n    y: 50\n\n  # Draw a given circle in yellow\n  canvas.drawCircle\n    circle: circle\n    color: "yellow"\n\n  # Draw the circle in green at a different position\n  canvas.drawCircle\n    circle: circle\n    position: Point(25, 75)\n    color: "green"\n\n  # Draw an outline circle in purple.\n  canvas.drawCircle\n    x: 50\n    y: 75\n    radius: 10\n    stroke:\n      color: "purple"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawCircle\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Point} [position] position object of location to start drawing. This will override x and y values passed\n  @param {Number} [radius] length of the radius of the circle\n  @param {Color|String} [color] color of the circle\n  @param {Circle} [circle] circle object that contains position and radius. Overrides x, y, and radius if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawCircle: function(_arg) {\n        var circle, color, position, radius, stroke, x, y;\n        x = _arg.x, y = _arg.y, radius = _arg.radius, position = _arg.position, color = _arg.color, stroke = _arg.stroke, circle = _arg.circle;\n        if (circle) x = circle.x, y = circle.y, radius = circle.radius;\n        if (position) x = position.x, y = position.y;\n        context.beginPath();\n        context.arc(x, y, radius, 0, Math.TAU, true);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draws a rectangle at the specified position with given <br />      width and height. Optionally takes a position, bounds<br />      and color argument.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a red rectangle using x, y, width and height\n  canvas.drawRect\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n    color: "#F00"\n\n  # Draw a blue rectangle using position, width and height\n  # and throw in a stroke for good measure\n  canvas.drawRect\n    position: Point(0, 0)\n    width: 50\n    height: 50\n    color: "blue"\n    stroke:\n      color: "orange"\n      width: 3\n\n  # Set up a bounds object for the next examples\n  bounds =\n    x: 100\n    y: 0\n    width: 100\n    height: 100\n\n  # Draw a purple rectangle using bounds\n  canvas.drawRect\n    bounds: bounds\n    color: "green"\n\n  # Draw the outline of the same bounds, but at a different position\n  canvas.drawRect\n    bounds: bounds\n    position: Point(0, 50)\n    stroke:\n      color: "purple"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawRect\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Number} [width] width of rectangle to draw\n  @param {Number} [height] height of rectangle to draw\n  @param {Point} [position] position to start drawing. Overrides x and y if passed\n  @param {Color|String} [color] color of rectangle\n  @param {Bounds} [bounds] bounds of rectangle. Overrides x, y, width, height if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draws a rectangle at the specified position with given <br />      width and height. Optionally takes a position, bounds<br />      and color argument.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a red rectangle using x, y, width and height\n  canvas.drawRect\n    x: 50\n    y: 50\n    width: 50\n    height: 50\n    color: "#F00"\n\n  # Draw a blue rectangle using position, width and height\n  # and throw in a stroke for good measure\n  canvas.drawRect\n    position: Point(0, 0)\n    width: 50\n    height: 50\n    color: "blue"\n    stroke:\n      color: "orange"\n      width: 3\n\n  # Set up a bounds object for the next examples\n  bounds =\n    x: 100\n    y: 0\n    width: 100\n    height: 100\n\n  # Draw a purple rectangle using bounds\n  canvas.drawRect\n    bounds: bounds\n    color: "green"\n\n  # Draw the outline of the same bounds, but at a different position\n  canvas.drawRect\n    bounds: bounds\n    position: Point(0, 50)\n    stroke:\n      color: "purple"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawRect\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Number} [width] width of rectangle to draw\n  @param {Number} [height] height of rectangle to draw\n  @param {Point} [position] position to start drawing. Overrides x and y if passed\n  @param {Color|String} [color] color of rectangle\n  @param {Bounds} [bounds] bounds of rectangle. Overrides x, y, width, height if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawRect: function(_arg) {\n        var bounds, color, height, position, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) x = position.x, y = position.y;\n        if (color) {\n          this.fillColor(color);\n          context.fillRect(x, y, width, height);\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.strokeRect(x, y, width, height);\n        }\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draw a line from <code>start</code> to <code>end</code>.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a sweet diagonal\n  canvas.drawLine\n    start: Point(0, 0)\n    end: Point(200, 200)\n    color: "purple"\n\n  # Draw another sweet diagonal\n  canvas.drawLine\n    start: Point(200, 0)\n    end: Point(0, 200)\n    color: "red"\n    width: 6\n\n  # Now draw a sweet horizontal with a direction and a length\n  canvas.drawLine\n    start: Point(0, 100)\n    length: 200\n    direction: Point(1, 0)\n    color: "orange"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawLine\n  @methodOf PixieCanvas#\n\n  @param {Point} start position to start drawing from\n  @param {Point} [end] position to stop drawing\n  @param {Number} [width] width of the line\n  @param {String|Color} [color] color of the line\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draw a line from <code>start</code> to <code>end</code>.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a sweet diagonal\n  canvas.drawLine\n    start: Point(0, 0)\n    end: Point(200, 200)\n    color: "purple"\n\n  # Draw another sweet diagonal\n  canvas.drawLine\n    start: Point(200, 0)\n    end: Point(0, 200)\n    color: "red"\n    width: 6\n\n  # Now draw a sweet horizontal with a direction and a length\n  canvas.drawLine\n    start: Point(0, 100)\n    length: 200\n    direction: Point(1, 0)\n    color: "orange"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawLine\n  @methodOf PixieCanvas#\n\n  @param {Point} start position to start drawing from\n  @param {Point} [end] position to stop drawing\n  @param {Number} [width] width of the line\n  @param {String|Color} [color] color of the line\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawLine: function(_arg) {\n        var color, direction, end, length, start, width;\n        start = _arg.start, end = _arg.end, width = _arg.width, color = _arg.color, direction = _arg.direction, length = _arg.length;\n        width || (width = 3);\n        if (direction) end = direction.norm(length).add(start);\n        this.lineWidth(width);\n        this.strokeColor(color);\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n        context.stroke();\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draw a polygon.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a sweet rhombus\n  canvas.drawPoly\n    points: [\n      Point(50, 25)\n      Point(75, 50)\n      Point(50, 75)\n      Point(25, 50)\n    ]\n    color: "purple"\n    stroke:\n      color: "red"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawPoly\n  @methodOf PixieCanvas#\n\n  @param {Point[]} [points] collection of points that define the vertices of the polygon\n  @param {String|Color} [color] color of the polygon\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draw a polygon.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a sweet rhombus\n  canvas.drawPoly\n    points: [\n      Point(50, 25)\n      Point(75, 50)\n      Point(50, 75)\n      Point(25, 50)\n    ]\n    color: "purple"\n    stroke:\n      color: "red"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawPoly\n  @methodOf PixieCanvas#\n\n  @param {Point[]} [points] collection of points that define the vertices of the polygon\n  @param {String|Color} [color] color of the polygon\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawPoly: function(_arg) {\n        var color, points, stroke;\n        points = _arg.points, color = _arg.color, stroke = _arg.stroke;\n        context.beginPath();\n        points.each(function(point, i) {\n          if (i === 0) {\n            return context.moveTo(point.x, point.y);\n          } else {\n            return context.lineTo(point.x, point.y);\n          }\n        });\n        context.lineTo(points[0].x, points[0].y);\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draw a rounded rectangle.</p>\n\n<pre><code>  Adapted from <a href=\'http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\'>http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html</a>\n\n  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a purple rounded rectangle with a red outline\n  canvas.drawRoundRect\n    position: Point(25, 25)\n    radius: 10\n    width: 150\n    height: 100\n    color: "purple"\n    stroke:\n      color: "red"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawRoundRect\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Number} [width] width of the rounded rectangle\n  @param {Number} [height] height of the rounded rectangle\n  @param {Number} [radius=5] radius to round the rectangle corners\n  @param {Point} [position] position to start drawing. Overrides x and y if passed\n  @param {Color|String} [color] color of the rounded rectangle\n  @param {Bounds} [bounds] bounds of the rounded rectangle. Overrides x, y, width, and height if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draw a rounded rectangle.</p>'[39m,
       body: [32m'<pre><code>  Adapted from <a href=\'http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\'>http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html</a>\n\n  &lt;code class="run"&gt;&lt;pre&gt;\n  # Draw a purple rounded rectangle with a red outline\n  canvas.drawRoundRect\n    position: Point(25, 25)\n    radius: 10\n    width: 150\n    height: 100\n    color: "purple"\n    stroke:\n      color: "red"\n      width: 2\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawRoundRect\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on the x axis to start drawing\n  @param {Number} [y] location on the y axis to start drawing\n  @param {Number} [width] width of the rounded rectangle\n  @param {Number} [height] height of the rounded rectangle\n  @param {Number} [radius=5] radius to round the rectangle corners\n  @param {Point} [position] position to start drawing. Overrides x and y if passed\n  @param {Color|String} [color] color of the rounded rectangle\n  @param {Bounds} [bounds] bounds of the rounded rectangle. Overrides x, y, width, and height if passed\n  @param {Stroke} [stroke] stroke object that specifies stroke color and stroke width\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawRoundRect: function(_arg) {\n        var bounds, color, height, position, radius, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, radius = _arg.radius, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (radius == null) radius = 5;\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) x = position.x, y = position.y;\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.lineWidth(stroke.width);\n          this.strokeColor(stroke.color);\n          context.stroke();\n        }\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Draws text on the canvas at the given position, in the given color.<br />      If no color is given then the previous fill color is used.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Fill canvas to indicate bounds\n  canvas.fill\n    color: \'#eee\'\n\n  # A line to indicate the baseline\n  canvas.drawLine\n    start: Point(25, 50)\n    end: Point(125, 50)\n    color: "#333"\n    width: 1\n\n  # Draw some text, note the position of the baseline\n  canvas.drawText\n    position: Point(25, 50)\n    color: "red"\n    text: "It\'s dangerous to go alone"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawText\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on x axis to start printing\n  @param {Number} [y] location on y axis to start printing\n  @param {String} text text to print\n  @param {Point} [position] position to start printing. Overrides x and y if passed\n  @param {String|Color} [color] color of text to start printing\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Draws text on the canvas at the given position, in the given color.<br />      If no color is given then the previous fill color is used.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Fill canvas to indicate bounds\n  canvas.fill\n    color: \'#eee\'\n\n  # A line to indicate the baseline\n  canvas.drawLine\n    start: Point(25, 50)\n    end: Point(125, 50)\n    color: "#333"\n    width: 1\n\n  # Draw some text, note the position of the baseline\n  canvas.drawText\n    position: Point(25, 50)\n    color: "red"\n    text: "It\'s dangerous to go alone"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name drawText\n  @methodOf PixieCanvas#\n\n  @param {Number} [x] location on x axis to start printing\n  @param {Number} [y] location on y axis to start printing\n  @param {String} text text to print\n  @param {Point} [position] position to start printing. Overrides x and y if passed\n  @param {String|Color} [color] color of text to start printing\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'drawText: function(_arg) {\n        var color, position, text, x, y;\n        x = _arg.x, y = _arg.y, text = _arg.text, position = _arg.position, color = _arg.color;\n        if (position) x = position.x, y = position.y;\n        this.fillColor(color);\n        context.fillText(text, x, y);\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Centers the given text on the canvas at the given y position. An x position<br />      or point position can also be given in which case the text is centered at the<br />      x, y or position value specified.</p>\n\n<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Fill canvas to indicate bounds\n  canvas.fill\n    color: "#eee"\n\n  # A line to indicate the baseline\n  canvas.drawLine\n    start: Point(25, 25)\n    end: Point(125, 25)\n    color: "#333"\n    width: 1\n\n  # Center text on the screen at y value 25\n  canvas.centerText\n    y: 25\n    color: "red"\n    text: "It\'s dangerous to go alone"\n\n  # Center text at point (75, 75)\n  canvas.centerText\n    position: Point(75, 75)\n    color: "green"\n    text: "take this"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name centerText\n  @methodOf PixieCanvas#\n\n  @param {String} text Text to print\n  @param {Number} [y] location on the y axis to start printing\n  @param {Number} [x] location on the x axis to start printing. Overrides the default centering behavior if passed\n  @param {Point} [position] position to start printing. Overrides x and y if passed\n  @param {String|Color} [color] color of text to print\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Centers the given text on the canvas at the given y position. An x position<br />      or point position can also be given in which case the text is centered at the<br />      x, y or position value specified.</p>'[39m,
       body: [32m'<pre><code>  &lt;code class="run"&gt;&lt;pre&gt;\n  # Fill canvas to indicate bounds\n  canvas.fill\n    color: "#eee"\n\n  # A line to indicate the baseline\n  canvas.drawLine\n    start: Point(25, 25)\n    end: Point(125, 25)\n    color: "#333"\n    width: 1\n\n  # Center text on the screen at y value 25\n  canvas.centerText\n    y: 25\n    color: "red"\n    text: "It\'s dangerous to go alone"\n\n  # Center text at point (75, 75)\n  canvas.centerText\n    position: Point(75, 75)\n    color: "green"\n    text: "take this"\n\n  &lt;/pre&gt;&lt;/code&gt;\n\n  @name centerText\n  @methodOf PixieCanvas#\n\n  @param {String} text Text to print\n  @param {Number} [y] location on the y axis to start printing\n  @param {Number} [x] location on the x axis to start printing. Overrides the default centering behavior if passed\n  @param {Point} [position] position to start printing. Overrides x and y if passed\n  @param {String|Color} [color] color of text to print\n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'centerText: function(_arg) {\n        var color, position, text, textWidth, x, y;\n        text = _arg.text, x = _arg.x, y = _arg.y, position = _arg.position, color = _arg.color;\n        if (position) x = position.x, y = position.y;\n        if (x == null) x = canvas.width / 2;\n        textWidth = this.measureText(text);\n        return this.drawText({\n          text: text,\n          color: color,\n          x: x - textWidth / 2,\n          y: y\n        });\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A getter / setter method to set the canvas fillColor.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  # Set the fill color\n  canvas.fillColor(\'#FF0000\')\n\n  # Passing no arguments returns the fillColor\n  canvas.fillColor()\n  # =&gt; \'#FF0000\'\n\n  # You can also pass a Color object\n  canvas.fillColor(Color(\'sky blue\'))\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name fillColor\n  @methodOf PixieCanvas#\n\n  @param {String|Color} [color] color to make the canvas fillColor \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>A getter / setter method to set the canvas fillColor.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  # Set the fill color\n  canvas.fillColor(\'#FF0000\')\n\n  # Passing no arguments returns the fillColor\n  canvas.fillColor()\n  # =&gt; \'#FF0000\'\n\n  # You can also pass a Color object\n  canvas.fillColor(Color(\'sky blue\'))\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name fillColor\n  @methodOf PixieCanvas#\n\n  @param {String|Color} [color] color to make the canvas fillColor \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'fillColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.fillStyle = color.toString();\n          } else {\n            context.fillStyle = color;\n          }\n          return this;\n        } else {\n          return context.fillStyle;\n        }\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A getter / setter method to set the canvas strokeColor.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  # Set the stroke color\n  canvas.strokeColor(\'#FF0000\')\n\n  # Passing no arguments returns the strokeColor\n  canvas.strokeColor()\n  # =&gt; \'#FF0000\'\n\n  # You can also pass a Color object\n  canvas.strokeColor(Color(\'sky blue\'))\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name strokeColor\n  @methodOf PixieCanvas#\n\n  @param {String|Color} [color] color to make the canvas strokeColor \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>A getter / setter method to set the canvas strokeColor.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  # Set the stroke color\n  canvas.strokeColor(\'#FF0000\')\n\n  # Passing no arguments returns the strokeColor\n  canvas.strokeColor()\n  # =&gt; \'#FF0000\'\n\n  # You can also pass a Color object\n  canvas.strokeColor(Color(\'sky blue\'))\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name strokeColor\n  @methodOf PixieCanvas#\n\n  @param {String|Color} [color] color to make the canvas strokeColor \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'strokeColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.strokeStyle = color.toString();\n          } else {\n            context.strokeStyle = color;\n          }\n          return this;\n        } else {\n          return context.strokeStyle;\n        }\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Determine how wide some text is.</p>\n\n<pre><code>  &lt;code&gt;&lt;pre&gt;\n  canvas.measureText(\'Hello World!\')\n  # =&gt; 55\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name measureText\n  @methodOf PixieCanvas#\n\n  @param {String} [text] the text to measure \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m,
       summary: [32m'<p>Determine how wide some text is.</p>'[39m,
       body: [32m'<pre><code>  &lt;code&gt;&lt;pre&gt;\n  canvas.measureText(\'Hello World!\')\n  # =&gt; 55\n  &lt;/pre&gt;&lt;/code&gt;      \n\n  @name measureText\n  @methodOf PixieCanvas#\n\n  @param {String} [text] the text to measure \n\n  @returns {PixieCanvas} this\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'measureText: function(text) {\n        return context.measureText(text).width;\n      },\n      putImageData: function(imageData, x, y) {\n        context.putImageData(imageData, x, y);\n        return this;\n      },\n      context: function() {\n        return context;\n      },\n      element: function() {\n        return canvas;\n      },\n      createPattern: function(image, repitition) {\n        return context.createPattern(image, repitition);\n      },\n      clip: function(x, y, width, height) {\n        context.beginPath();\n        context.rect(x, y, width, height);\n        context.clip();\n        return this;\n      }\n    });\n    contextAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.each(function(attr) {\n        return $canvas[attr] = function(newVal) {\n          if (newVal != null) {\n            context[attr] = newVal;\n            return this;\n          } else {\n            return context[attr];\n          }\n        };\n      });\n    };\n    canvasAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.each(function(attr) {\n        return $canvas[attr] = function(newVal) {\n          if (newVal != null) {\n            canvas[attr] = newVal;\n            return this;\n          } else {\n            return canvas[attr];\n          }\n        };\n      });\n    };\n    contextAttrAccessor("font", "globalAlpha", "globalCompositeOperation", "lineWidth", "textAlign");\n    canvasAttrAccessor("height", "width");\n    if (canvas != null ? canvas.getContext : void 0) {\n      context = canvas.getContext(\'2d\');\n      if (options.init) options.init($canvas);\n      return $canvas;\n    }\n  };\n})(jQuery);\n;\nvar __slice = Array.prototype.slice;\n\n(function($) {\n  return $.fn.powerCanvas = function(options) {\n    var $canvas, canvas, context;\n    options || (options = {});\n    canvas = this.get(0);\n    context = void 0;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'PowerCanvas'[39m },
       { type: [32m'deprecated'[39m,
         string: [32m'Use {@link PixieCanvas} instead'[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>PowerCanvas provides a convenient wrapper for working with Context2d.</p>'[39m,
       summary: [32m'<p>PowerCanvas provides a convenient wrapper for working with Context2d.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'$canvas = $(canvas).extend({'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'withTransform'[39m },
       { type: [32m'methodOf'[39m, string: [32m'PowerCanvas#'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Matrix'[39m ],
         name: [32m'matrix'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Function'[39m ],
         name: [32m'block'[39m,
         description: [32m''[39m },
       { type: [32m'returns'[39m, string: [32m'this'[39m } ],
    description: 
     { full: [32m'<p>Passes this canvas to the block with the given matrix transformation<br />applied. All drawing methods called within the block will draw<br />into the canvas with the transformation applied. The transformation<br />is removed at the end of the block, even if the block throws an error.</p>'[39m,
       summary: [32m'<p>Passes this canvas to the block with the given matrix transformation<br />applied. All drawing methods called within the block will draw<br />into the canvas with the transformation applied. The transformation<br />is removed at the end of the block, even if the block throws an error.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'withTransform: function(matrix, block) {\n        context.save();\n        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n        try {\n          block(this);\n        } finally {\n          context.restore();\n        }\n        return this;\n      },\n      clear: function() {\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        return this;\n      },\n      clearRect: function(x, y, width, height) {\n        context.clearRect(x, y, width, height);\n        return this;\n      },\n      context: function() {\n        return context;\n      },\n      element: function() {\n        return canvas;\n      },\n      globalAlpha: function(newVal) {\n        if (newVal != null) {\n          context.globalAlpha = newVal;\n          return this;\n        } else {\n          return context.globalAlpha;\n        }\n      },\n      compositeOperation: function(newVal) {\n        if (newVal != null) {\n          context.globalCompositeOperation = newVal;\n          return this;\n        } else {\n          return context.globalCompositeOperation;\n        }\n      },\n      createLinearGradient: function(x0, y0, x1, y1) {\n        return context.createLinearGradient(x0, y0, x1, y1);\n      },\n      createRadialGradient: function(x0, y0, r0, x1, y1, r1) {\n        return context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n      },\n      buildRadialGradient: function(c1, c2, stops) {\n        var color, gradient, position;\n        gradient = context.createRadialGradient(c1.x, c1.y, c1.radius, c2.x, c2.y, c2.radius);\n        for (position in stops) {\n          color = stops[position];\n          gradient.addColorStop(position, color);\n        }\n        return gradient;\n      },\n      createPattern: function(image, repitition) {\n        return context.createPattern(image, repitition);\n      },\n      drawImage: function(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n        context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n        return this;\n      },\n      drawLine: function(x1, y1, x2, y2, width) {\n        if (arguments.length === 3) {\n          width = x2;\n          x2 = y1.x;\n          y2 = y1.y;\n          y1 = x1.y;\n          x1 = x1.x;\n        }\n        width || (width = 3);\n        context.lineWidth = width;\n        context.beginPath();\n        context.moveTo(x1, y1);\n        context.lineTo(x2, y2);\n        context.closePath();\n        context.stroke();\n        return this;\n      },\n      fill: function(color) {\n        $canvas.fillColor(color);\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'fillCircle'[39m },
       { type: [32m'methodOf'[39m, string: [32m'PowerCanvas#'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'x'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'y'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'radius'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'color'[39m,
         description: [32m''[39m },
       { type: [32m'see'[39m,
         local: [32m'PowerCanvas#fillColor '[39m,
         visibility: [32m'PowerCanvas#fillColor'[39m },
       { type: [32m'returns'[39m, string: [32m'this'[39m } ],
    description: 
     { full: [32m'<p>Fills a circle at the specified position with the specified<br />radius and color.</p>'[39m,
       summary: [32m'<p>Fills a circle at the specified position with the specified<br />radius and color.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'fillCircle: function(x, y, radius, color) {\n        $canvas.fillColor(color);\n        context.beginPath();\n        context.arc(x, y, radius, 0, Math.TAU, true);\n        context.closePath();\n        context.fill();\n        return this;\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'fillRect'[39m },
       { type: [32m'methodOf'[39m, string: [32m'PowerCanvas#'[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'x'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'y'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'width'[39m,
         description: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Number'[39m ],
         name: [32m'height'[39m,
         description: [32m''[39m },
       { type: [32m'see'[39m,
         local: [32m'PowerCanvas#fillColor '[39m,
         visibility: [32m'PowerCanvas#fillColor'[39m },
       { type: [32m'returns'[39m, string: [32m'this'[39m } ],
    description: 
     { full: [32m'<p>Fills a rectangle with the current fillColor<br />at the specified position with the specified<br />width and height </p>'[39m,
       summary: [32m'<p>Fills a rectangle with the current fillColor<br />at the specified position with the specified<br />width and height </p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'fillRect: function(x, y, width, height) {\n        context.fillRect(x, y, width, height);\n        return this;\n      },\n      fillShape: function() {\n        var points;\n        points = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        context.beginPath();\n        points.each(function(point, i) {\n          if (i === 0) {\n            return context.moveTo(point.x, point.y);\n          } else {\n            return context.lineTo(point.x, point.y);\n          }\n        });\n        context.lineTo(points[0].x, points[0].y);\n        return context.fill();\n      },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Adapted from <a href=\'http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\'>http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html</a></p>'[39m,
       summary: [32m'<p>Adapted from <a href=\'http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\'>http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html</a></p>'[39m,
       body: [32m''[39m },
    ignore: [33mfalse[39m,
    code: [32m'fillRoundRect: function(x, y, width, height, radius, strokeWidth) {\n        radius || (radius = 5);\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n        if (strokeWidth) {\n          context.lineWidth = strokeWidth;\n          context.stroke();\n        }\n        context.fill();\n        return this;\n      },\n      fillText: function(text, x, y) {\n        context.fillText(text, x, y);\n        return this;\n      },\n      centerText: function(text, y) {\n        var textWidth;\n        textWidth = $canvas.measureText(text);\n        return $canvas.fillText(text, (canvas.width - textWidth) / 2, y);\n      },\n      fillWrappedText: function(text, x, y, width) {\n        var lineHeight, tokens, tokens2;\n        tokens = text.split(" ");\n        tokens2 = text.split(" ");\n        lineHeight = 16;\n        if ($canvas.measureText(text) > width) {\n          if (tokens.length % 2 === 0) {\n            tokens2 = tokens.splice(tokens.length / 2, tokens.length / 2, "");\n          } else {\n            tokens2 = tokens.splice(tokens.length / 2 + 1, (tokens.length / 2) + 1, "");\n          }\n          context.fillText(tokens.join(" "), x, y);\n          return context.fillText(tokens2.join(" "), x, y + lineHeight);\n        } else {\n          return context.fillText(tokens.join(" "), x, y + lineHeight);\n        }\n      },\n      fillColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.fillStyle = color.toString();\n          } else {\n            context.fillStyle = color;\n          }\n          return this;\n        } else {\n          return context.fillStyle;\n        }\n      },\n      font: function(font) {\n        if (font != null) {\n          context.font = font;\n          return this;\n        } else {\n          return context.font;\n        }\n      },\n      measureText: function(text) {\n        return context.measureText(text).width;\n      },\n      putImageData: function(imageData, x, y) {\n        context.putImageData(imageData, x, y);\n        return this;\n      },\n      strokeColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.strokeStyle = color.toString();\n          } else {\n            context.strokeStyle = color;\n          }\n          return this;\n        } else {\n          return context.strokeStyle;\n        }\n      },\n      strokeCircle: function(x, y, radius, color) {\n        $canvas.strokeColor(color);\n        context.beginPath();\n        context.arc(x, y, radius, 0, Math.TAU, true);\n        context.closePath();\n        context.stroke();\n        return this;\n      },\n      strokeRect: function(x, y, width, height) {\n        context.strokeRect(x, y, width, height);\n        return this;\n      },\n      textAlign: function(textAlign) {\n        context.textAlign = textAlign;\n        return this;\n      },\n      height: function() {\n        return canvas.height;\n      },\n      width: function() {\n        return canvas.width;\n      }\n    });\n    if (canvas != null ? canvas.getContext : void 0) {\n      context = canvas.getContext(\'2d\');\n      if (options.init) options.init($canvas);\n      return $canvas;\n    }\n  };\n})(jQuery);\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m,
         string: [32m'requestAnimationFrame'[39m },
       { type: [32m'namespace'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>A browser polyfill so you can consistently <br />call requestAnimationFrame. Using <br />requestAnimationFrame is preferred to <br />setInterval for main game loops.</p>\n\n<p><a href=\'http://paulirish.com/2011/requestanimationframe-for-smart-animating/\'>http://paulirish.com/2011/requestanimationframe-for-smart-animating/</a></p>'[39m,
       summary: [32m'<p>A browser polyfill so you can consistently <br />call requestAnimationFrame. Using <br />requestAnimationFrame is preferred to <br />setInterval for main game loops.</p>'[39m,
       body: [32m'<p><a href=\'http://paulirish.com/2011/requestanimationframe-for-smart-animating/\'>http://paulirish.com/2011/requestanimationframe-for-smart-animating/</a></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {\n  return window.setTimeout(function() {\n    return callback(+new Date());\n  }, 1000 / 60);\n});\n;\n\n(function($) {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A simple interface for playing sounds in games.</p>\n\n<p>@name Sound<br />  @namespace</p>'[39m,
       summary: [32m'<p>A simple interface for playing sounds in games.</p>'[39m,
       body: [32m'<p>@name Sound<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var Sound, directory, format, loadSoundChannel, sounds, _ref;\n  directory = (typeof App !== "undefined" && App !== null ? (_ref = App.directories) != null ? _ref.sounds : void 0 : void 0) || "sounds";\n  format = "wav";\n  sounds = {};\n  loadSoundChannel = function(name) {\n    var sound, url;\n    url = "" + BASE_URL + "/" + directory + "/" + name + "." + format;\n    return sound = $(\'<audio />\', {\n      autobuffer: true,\n      preload: \'auto\',\n      src: url\n    }).get(0);\n  };\n  Sound = function(id, maxChannels) {\n    return {\n      play: function() {\n        return Sound.play(id, maxChannels);\n      },\n      stop: function() {\n        return Sound.stop(id);\n      }\n    };\n  };\n  return Object.extend(Sound, {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Play a sound from your sounds <br />    directory with the name of <code>id</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# plays a sound called explode from your sounds directory\nSound.play(\'explode\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name play\n@methodOf Sound\n\n@param {String} id id or name of the sound file to play\n@param {String} maxChannels max number of sounds able to be played simultaneously\n</code></pre>'[39m,
       summary: [32m'<p>Play a sound from your sounds <br />    directory with the name of <code>id</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# plays a sound called explode from your sounds directory\nSound.play(\'explode\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name play\n@methodOf Sound\n\n@param {String} id id or name of the sound file to play\n@param {String} maxChannels max number of sounds able to be played simultaneously\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'play: function(id, maxChannels) {\n      var channel, channels, freeChannels, sound;\n      maxChannels || (maxChannels = 4);\n      if (!sounds[id]) sounds[id] = [loadSoundChannel(id)];\n      channels = sounds[id];\n      freeChannels = $.grep(channels, function(sound) {\n        return sound.currentTime === sound.duration || sound.currentTime === 0;\n      });\n      if (channel = freeChannels.first()) {\n        try {\n          channel.currentTime = 0;\n        } catch (_error) {}\n        return channel.play();\n      } else {\n        if (!maxChannels || channels.length < maxChannels) {\n          sound = loadSoundChannel(id);\n          channels.push(sound);\n          return sound.play();\n        }\n      }\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Play a sound from the given<br />    url with the name of <code>id</code>.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# plays the sound at the specified url\nSound.playFromUrl(\'<a href=\'http://YourSoundWebsite.com/explode.wav\'>http://YourSoundWebsite.com/explode.wav</a>\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name playFromUrl\n@methodOf Sound\n\n@param {String} url location of sound file to play\n\n@returns {Sound} this sound object\n</code></pre>'[39m,
       summary: [32m'<p>Play a sound from the given<br />    url with the name of <code>id</code>.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# plays the sound at the specified url\nSound.playFromUrl(\'<a href=\'http://YourSoundWebsite.com/explode.wav\'>http://YourSoundWebsite.com/explode.wav</a>\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name playFromUrl\n@methodOf Sound\n\n@param {String} url location of sound file to play\n\n@returns {Sound} this sound object\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'playFromUrl: function(url) {\n      var sound;\n      sound = $(\'<audio />\').get(0);\n      sound.src = url;\n      sound.play();\n      return sound;\n    },'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Stop a sound while it is playing.</p>\n\n<pre><code>&lt;code&gt;&lt;pre&gt;\n# stops the sound \'explode\' from \n# playing if it is currently playing \nSound.stop(\'explode\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name stop\n@methodOf Sound\n\n@param {String} id id or name of sound to stop playing.\n</code></pre>'[39m,
       summary: [32m'<p>Stop a sound while it is playing.</p>'[39m,
       body: [32m'<pre><code>&lt;code&gt;&lt;pre&gt;\n# stops the sound \'explode\' from \n# playing if it is currently playing \nSound.stop(\'explode\')\n&lt;/pre&gt;&lt;/code&gt;\n\n@name stop\n@methodOf Sound\n\n@param {String} id id or name of sound to stop playing.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'stop: function(id) {\n      var _ref2;\n      return (_ref2 = sounds[id]) != null ? _ref2.stop() : void 0;\n    }\n  }, (typeof exports !== "undefined" && exports !== null ? exports : this)["Sound"] = Sound);\n})(jQuery);\n;\n\n(function() {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>A wrapper on the Local Storage API </p>\n\n<p>@name Local<br />  @namespace</p>'[39m,
       summary: [32m'<p>A wrapper on the Local Storage API </p>'[39m,
       body: [32m'<p>@name Local<br />  @namespace</p>'[39m },
    ignore: [33mfalse[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Store an object in local storage.</p>\n\n<p><code><pre><br />  # you can store strings<br />  Local.set(\'name\', \'Matt\')</p>\n\n<p># and numbers<br />  Local.set(\'age\', 26)</p>\n\n<p># and even objects<br />  Local.set(\'person\', {name: \'Matt\', age: 26})<br />  </pre></code></p>\n\n<p>@name set<br />  @methodOf Local</p>\n\n<p>@param {String} key string used to identify the object you are storing<br />  @param {Object} value value of the object you are storing</p>\n\n<p>@returns {Object} value</p>'[39m,
       summary: [32m'<p>Store an object in local storage.</p>'[39m,
       body: [32m'<p><code><pre><br />  # you can store strings<br />  Local.set(\'name\', \'Matt\')</p>\n\n<p># and numbers<br />  Local.set(\'age\', 26)</p>\n\n<p># and even objects<br />  Local.set(\'person\', {name: \'Matt\', age: 26})<br />  </pre></code></p>\n\n<p>@name set<br />  @methodOf Local</p>\n\n<p>@param {String} key string used to identify the object you are storing<br />  @param {Object} value value of the object you are storing</p>\n\n<p>@returns {Object} value</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'var retrieve, store;\n  store = function(key, value) {\n    localStorage[key] = JSON.stringify(value);\n    return value;\n  };'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Retrieve an object from local storage.</p>\n\n<p><code><pre><br />  Local.get(\'name\')<br />  # => \'Matt\'</p>\n\n<p>Local.get(\'age\')<br />  # => 26</p>\n\n<p>Local.get(\'person\')<br />  # => { age: 26, name: \'Matt\' }<br />  </pre></code></p>\n\n<p>@name get<br />  @methodOf Local</p>\n\n<p>@param {String} key string that identifies the stored object</p>\n\n<p>@returns {Object} The object that was stored or undefined if no object was stored.</p>'[39m,
       summary: [32m'<p>Retrieve an object from local storage.</p>'[39m,
       body: [32m'<p><code><pre><br />  Local.get(\'name\')<br />  # => \'Matt\'</p>\n\n<p>Local.get(\'age\')<br />  # => 26</p>\n\n<p>Local.get(\'person\')<br />  # => { age: 26, name: \'Matt\' }<br />  </pre></code></p>\n\n<p>@name get<br />  @methodOf Local</p>\n\n<p>@param {String} key string that identifies the stored object</p>\n\n<p>@returns {Object} The object that was stored or undefined if no object was stored.</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'retrieve = function(key) {\n    var value;\n    value = localStorage[key];\n    if (value != null) return JSON.parse(value);\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Local"] = {\n    get: retrieve,\n    set: store,\n    put: store,'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Access an instance of Local with a specified prefix.</p>\n\n<pre><code>@name new\n@methodOf Local\n\n@param {String} prefix \n@returns {Local} An interface to local storage with the given prefix applied.\n</code></pre>'[39m,
       summary: [32m'<p>Access an instance of Local with a specified prefix.</p>'[39m,
       body: [32m'<pre><code>@name new\n@methodOf Local\n\n@param {String} prefix \n@returns {Local} An interface to local storage with the given prefix applied.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'"new": function(prefix) {\n      prefix || (prefix = "");\n      return {\n        get: function(key) {\n          return retrieve("" + prefix + "_" + key);\n        },\n        set: function(key, value) {\n          return store("" + prefix + "_" + key, value);\n        },\n        put: function(key, value) {\n          return store("" + prefix + "_" + key, value);\n        }\n      };\n    }\n  };\n})();\n;\n;\n;\n;\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Animated'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to including object'[39m } ],
    description: 
     { full: [32m'<p>The Animated module, when included in a GameObject, gives the object <br />methods to transition from one animation state to another</p>'[39m,
       summary: [32m'<p>The Animated module, when included in a GameObject, gives the object <br />methods to transition from one animation state to another</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Animated;\n\nAnimated = function(I, self) {\n  var advanceFrame, find, initializeState, loadByName, updateSprite, _name, _ref;\n  I || (I = {});\n  Object.reverseMerge(I, {\n    animationName: (_ref = I["class"]) != null ? _ref.underscore() : void 0,\n    data: {\n      version: "",\n      tileset: [\n        {\n          id: 0,\n          src: "",\n          title: "",\n          circles: [\n            {\n              x: 0,\n              y: 0,\n              radius: 0\n            }\n          ]\n        }\n      ],\n      animations: [\n        {\n          name: "",\n          complete: "",\n          interruptible: false,\n          speed: "",\n          transform: [\n            {\n              hflip: false,\n              vflip: false\n            }\n          ],\n          triggers: {\n            "0": ["a trigger"]\n          },\n          frames: [0],\n          transform: [void 0]\n        }\n      ]\n    },\n    activeAnimation: {\n      name: "",\n      complete: "",\n      interruptible: false,\n      speed: "",\n      transform: [\n        {\n          hflip: false,\n          vflip: false\n        }\n      ],\n      triggers: {\n        "0": [""]\n      },\n      frames: [0]\n    },\n    currentFrameIndex: 0,\n    debugAnimation: false,\n    hflip: false,\n    vflip: false,\n    lastUpdate: new Date().getTime(),\n    useTimer: false\n  });\n  loadByName = function(name, callback) {\n    var url;\n    url = "" + BASE_URL + "/animations/" + name + ".animation?" + (new Date().getTime());\n    $.getJSON(url, function(data) {\n      I.data = data;\n      return typeof callback === "function" ? callback(data) : void 0;\n    });\n    return I.data;\n  };\n  initializeState = function() {\n    I.activeAnimation = I.data.animations.first();\n    return I.spriteLookup = I.data.tileset.map(function(spriteData) {\n      return Sprite.fromURL(spriteData.src);\n    });\n  };\n  window[_name = "" + I.animationName + "SpriteLookup"] || (window[_name] = []);\n  if (!window["" + I.animationName + "SpriteLookup"].length) {\n    window["" + I.animationName + "SpriteLookup"] = I.data.tileset.map(function(spriteData) {\n      return Sprite.fromURL(spriteData.src);\n    });\n  }\n  I.spriteLookup = window["" + I.animationName + "SpriteLookup"];\n  if (I.data.animations.first().name !== "") {\n    initializeState();\n  } else if (I.animationName) {\n    loadByName(I.animationName, function() {\n      return initializeState();\n    });\n  } else {\n    throw "No animation data provided. Use animationName to specify an animation to load from the project or pass in raw JSON to the data key.";\n  }\n  advanceFrame = function() {\n    var frames, nextState, sprite;\n    frames = I.activeAnimation.frames;\n    if (I.currentFrameIndex === frames.indexOf(frames.last())) {\n      self.trigger("Complete");\n      if (nextState = I.activeAnimation.complete) {\n        I.activeAnimation = find(nextState) || I.activeAnimation;\n        I.currentFrameIndex = 0;\n      }\n    } else {\n      I.currentFrameIndex = (I.currentFrameIndex + 1) % frames.length;\n    }\n    sprite = I.spriteLookup[frames[I.currentFrameIndex]];\n    return updateSprite(sprite);\n  };\n  find = function(name) {\n    var nameLower, result;\n    result = null;\n    nameLower = name.toLowerCase();\n    I.data.animations.each(function(animation) {\n      if (animation.name.toLowerCase() === nameLower) return result = animation;\n    });\n    return result;\n  };\n  updateSprite = function(spriteData) {\n    I.sprite = spriteData;\n    I.width = spriteData.width;\n    return I.height = spriteData.height;\n  };\n  return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Transitions to a new active animation. Will not transition if the new state<br />    has the same name as the current one or if the active animation is marked as locked.</p>\n\n<pre><code>@param {String} newState The name of the target state you wish to transition to.\n</code></pre>'[39m,
       summary: [32m'<p>Transitions to a new active animation. Will not transition if the new state<br />    has the same name as the current one or if the active animation is marked as locked.</p>'[39m,
       body: [32m'<pre><code>@param {String} newState The name of the target state you wish to transition to.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'transition: function(newState, force) {\n      var toNextState;\n      if (newState === I.activeAnimation.name) return;\n      toNextState = function(state) {\n        var firstFrame, firstSprite, nextState;\n        if (nextState = find(state)) {\n          I.activeAnimation = nextState;\n          firstFrame = I.activeAnimation.frames.first();\n          firstSprite = I.spriteLookup[firstFrame];\n          I.currentFrameIndex = 0;\n          return updateSprite(firstSprite);\n        } else {\n          if (I.debugAnimation) {\n            return warn("Could not find animation state \'" + newState + "\'. The current transition will be ignored");\n          }\n        }\n      };\n      if (force) {\n        return toNextState(newState);\n      } else {\n        if (!I.activeAnimation.interruptible) {\n          if (I.debugAnimation) {\n            warn("Cannot transition to \'" + newState + "\' because \'" + I.activeAnimation.name + "\' is locked");\n          }\n          return;\n        }\n        return toNextState(newState);\n      }\n    },\n    before: {\n      update: function() {\n        var time, triggers, updateFrame, _ref2, _ref3;\n        if (I.useTimer) {\n          time = new Date().getTime();\n          if (updateFrame = (time - I.lastUpdate) >= I.activeAnimation.speed) {\n            I.lastUpdate = time;\n            if (triggers = (_ref2 = I.activeAnimation.triggers) != null ? _ref2[I.currentFrameIndex] : void 0) {\n              triggers.each(function(event) {\n                return self.trigger(event);\n              });\n            }\n            return advanceFrame();\n          }\n        } else {\n          if (triggers = (_ref3 = I.activeAnimation.triggers) != null ? _ref3[I.currentFrameIndex] : void 0) {\n            triggers.each(function(event) {\n              return self.trigger(event);\n            });\n          }\n          return advanceFrame();\n        }\n      }\n    }\n  };\n};\n;\n\n(function() {\n  var Animation, fromPixieId;\n  Animation = function(data) {\n    var activeAnimation, advanceFrame, currentSprite, spriteLookup;\n    spriteLookup = {};\n    activeAnimation = data.animations[0];\n    currentSprite = data.animations[0].frames[0];\n    advanceFrame = function(animation) {\n      var frames;\n      frames = animation.frames;\n      return currentSprite = frames[(frames.indexOf(currentSprite) + 1) % frames.length];\n    };\n    data.tileset.each(function(spriteData, i) {\n      return spriteLookup[i] = Sprite.fromURL(spriteData.src);\n    });\n    return $.extend(data, {\n      currentSprite: function() {\n        return currentSprite;\n      },\n      draw: function(canvas, x, y) {\n        return canvas.withTransform(Matrix.translation(x, y), function() {\n          return spriteLookup[currentSprite].draw(canvas, 0, 0);\n        });\n      },\n      frames: function() {\n        return activeAnimation.frames;\n      },\n      update: function() {\n        return advanceFrame(activeAnimation);\n      },\n      active: function(name) {\n        if (name !== void 0) {\n          if (data.animations[name]) {\n            return currentSprite = data.animations[name].frames[0];\n          }\n        } else {\n          return activeAnimation;\n        }\n      }\n    });\n  };\n  window.Animation = function(name, callback) {\n    return fromPixieId(App.Animations[name], callback);\n  };\n  fromPixieId = function(id, callback) {\n    var proxy, url;\n    url = "http://pixie.strd6.com/s3/animations/" + id + "/data.json";\n    proxy = {\n      active: $.noop,\n      draw: $.noop\n    };\n    $.getJSON(url, function(data) {\n      $.extend(proxy, Animation(data));\n      return typeof callback === "function" ? callback(proxy) : void 0;\n    });\n    return proxy;\n  };\n  return window.Animation.fromPixieId = fromPixieId;\n})();\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'FPSCounter'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>FPSCounter</code> module tracks and displays the framerate.</p>\n\n<p><code><pre><br />window.engine = Engine<br />  ...<br />  includedModules: ["FPSCounter"]<br />  FPSColor: "#080"<br /></pre></code></p>'[39m,
       summary: [32m'<p>The <code>FPSCounter</code> module tracks and displays the framerate.</p>'[39m,
       body: [32m'<p><code><pre><br />window.engine = Engine<br />  ...<br />  includedModules: ["FPSCounter"]<br />  FPSColor: "#080"<br /></pre></code></p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.FPSCounter = function(I, self) {\n  var framerate;\n  Object.reverseMerge(I, {\n    showFPS: true,\n    FPSColor: "#FFF"\n  });\n  framerate = Framerate({\n    noDOM: true\n  });\n  return self.bind("overlay", function(canvas) {\n    if (I.showFPS) {\n      canvas.font("bold 9pt consolas, \'Courier New\', \'andale mono\', \'lucida console\', monospace");\n      canvas.drawText({\n        color: I.FPSColor,\n        position: Point(6, 18),\n        text: "fps: " + framerate.fps\n      });\n    }\n    return framerate.rendered();\n  });\n};\n;\n\n(function($) {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'FPSCounter'[39m,
       string: [32m'Engine.FPSCounter()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>The <code>Joysticks</code> module gives the engine access to joysticks.</p>\n\n<p><code><pre><br />  # First you need to add the joysticks module to the engine<br />  window.engine = Engine<br />    ...<br />    includedModules: ["Joysticks"]<br />  # Then you need to get a controller reference<br />  # id = 0 for player 1, etc.<br />  controller = engine.controller(id)</p>\n\n<p># Point indicating direction primary axis is held<br />  direction = controller.position()</p>\n\n<p># Check if buttons are held<br />  controller.actionDown("A")<br />  controller.actionDown("B")<br />  controller.actionDown("X")<br />  controller.actionDown("Y")<br />  </pre></code></p>\n\n<p>@name Joysticks<br />  @fieldOf Engine<br />  @module</p>\n\n<p>@param {Object} I Instance variables<br />  @param {Object} self Reference to the engine</p>'[39m,
       summary: [32m'<p>The <code>Joysticks</code> module gives the engine access to joysticks.</p>'[39m,
       body: [32m'<p><code><pre><br />  # First you need to add the joysticks module to the engine<br />  window.engine = Engine<br />    ...<br />    includedModules: ["Joysticks"]<br />  # Then you need to get a controller reference<br />  # id = 0 for player 1, etc.<br />  controller = engine.controller(id)</p>\n\n<p># Point indicating direction primary axis is held<br />  direction = controller.position()</p>\n\n<p># Check if buttons are held<br />  controller.actionDown("A")<br />  controller.actionDown("B")<br />  controller.actionDown("X")<br />  controller.actionDown("Y")<br />  </pre></code></p>\n\n<p>@name Joysticks<br />  @fieldOf Engine<br />  @module</p>\n\n<p>@param {Object} I Instance variables<br />  @param {Object} self Reference to the engine</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'return Engine.Joysticks = function(I, self) {\n    Joysticks.init();\n    self.bind("update", function() {\n      Joysticks.init();\n      return Joysticks.update();\n    });\n    return {'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Get a controller for a given joystick id.</p>\n\n<pre><code>  @name controller\n  @methodOf Engine.Joysticks#\n\n  @param {Number} i The joystick id to get the controller of.\n</code></pre>'[39m,
       summary: [32m'<p>Get a controller for a given joystick id.</p>'[39m,
       body: [32m'<pre><code>  @name controller\n  @methodOf Engine.Joysticks#\n\n  @param {Number} i The joystick id to get the controller of.\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'controller: function(i) {\n        return Joysticks.getController(i);\n      }\n    };\n  };\n})();\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Tilemap'[39m },
       { type: [32m'fieldOf'[39m, string: [32m'Engine'[39m },
       { type: [32m'module'[39m, string: [32m''[39m },
       { type: [32m''[39m, string: [32m''[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'I'[39m,
         description: [32m'Instance variables'[39m },
       { type: [32m'param'[39m,
         types: [ [32m'Object'[39m ],
         name: [32m'self'[39m,
         description: [32m'Reference to the engine'[39m } ],
    description: 
     { full: [32m'<p>The <code>Tilemap</code> module provides a way to load tilemaps in the engine.</p>'[39m,
       summary: [32m'<p>The <code>Tilemap</code> module provides a way to load tilemaps in the engine.</p>'[39m,
       body: [32m''[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'Engine.Tilemap = function(I, self) {\n  var clearObjects, map, updating;\n  map = null;\n  updating = false;\n  clearObjects = false;\n  self.bind("update", function() {\n    return updating = true;\n  });\n  self.bind("afterUpdate", function() {\n    updating = false;\n    if (clearObjects) {\n      self.objects().clear();\n      return clearObjects = false;\n    }\n  });\n  return {'[39m,
    ctx: 
     { type: [32m'method'[39m,
       receiver: [32m'Engine'[39m,
       name: [32m'Tilemap'[39m,
       string: [32m'Engine.Tilemap()'[39m } },
  { tags: [],
    description: 
     { full: [32m'<p>Loads a new may and unloads any existing map or entities.</p>\n\n<pre><code>@name loadMap\n@methodOf Engine#\n</code></pre>'[39m,
       summary: [32m'<p>Loads a new may and unloads any existing map or entities.</p>'[39m,
       body: [32m'<pre><code>@name loadMap\n@methodOf Engine#\n</code></pre>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'loadMap: function(name, complete) {\n      clearObjects = updating;\n      return map = Tilemap.load({\n        name: name,\n        complete: complete,\n        entity: self.add\n      });\n    }\n  };\n};\n;'[39m,
    ctx: [90mundefined[39m },
  { tags: 
     [ { type: [32m'name'[39m, string: [32m'Framerate'[39m },
       { type: [32m'constructor'[39m, string: [32m''[39m } ],
    description: 
     { full: [32m'<p>This object keeps track of framerate and displays it by creating and appending an<br />html element to the DOM.</p>\n\n<p>Once created you call snapshot at the end of every rendering cycle.</p>'[39m,
       summary: [32m'<p>This object keeps track of framerate and displays it by creating and appending an<br />html element to the DOM.</p>'[39m,
       body: [32m'<p>Once created you call snapshot at the end of every rendering cycle.</p>'[39m },
    isPrivate: [33mfalse[39m,
    ignore: [33mfalse[39m,
    code: [32m'var Framerate;\n\nFramerate = function(options) {\n  var element, framerateUpdateInterval, framerates, numFramerates, renderTime, self, updateFramerate;\n  options || (options = {});\n  if (!options.noDOM) {\n    element = $("<div>", {\n      css: {\n        color: "#FFF",\n        fontFamily: "consolas, \'Courier New\', \'andale mono\', \'lucida console\', monospace",\n        fontWeight: "bold",\n        paddingLeft: 4,\n        position: "fixed",\n        top: 0,\n        left: 0\n      }\n    }).appendTo(\'body\').get(0);\n  }\n  numFramerates = 15;\n  framerateUpdateInterval = 250;\n  renderTime = -1;\n  framerates = [];\n  updateFramerate = function() {\n    var framerate, rate, tot, _i, _len;\n    tot = 0;\n    for (_i = 0, _len = framerates.length; _i < _len; _i++) {\n      rate = framerates[_i];\n      tot += rate;\n    }\n    framerate = (tot / framerates.length).round();\n    self.fps = framerate;\n    if (element) return element.innerHTML = "fps: " + framerate;\n  };\n  setInterval(updateFramerate, framerateUpdateInterval);'[39m,
    ctx: [90mundefined[39m },
  { tags: [],
    description: 
     { full: [32m'<p>Call this method everytime you render.</p>\n\n<p>@name rendered<br />  @methodOf Framerate#</p>'[39m,
       summary: [32m'<p>Call this method everytime you render.</p>'[39m,
       body: [32m'<p>@name rendered<br />  @methodOf Framerate#</p>'[39m },
    ignore: [33mfalse[39m,
    code: [32m'return self = {\n    rendered: function() {\n      var framerate, newTime, t;\n      if (renderTime < 0) {\n        return renderTime = new Date().getTime();\n      } else {\n        newTime = new Date().getTime();\n        t = newTime - renderTime;\n        framerate = 1000 / t;\n        framerates.push(framerate);\n        while (framerates.length > numFramerates) {\n          framerates.shift();\n        }\n        return renderTime = newTime;\n      }\n    }\n  };\n};\n;\n\n(function() {\n  var Map, Tilemap, loadByName;\n  Map = function(data, entityCallback) {\n    var entity, loadEntities, spriteLookup, tileHeight, tileWidth, uuid, _ref;\n    tileHeight = data.tileHeight;\n    tileWidth = data.tileWidth;\n    spriteLookup = {};\n    _ref = App.entities;\n    for (uuid in _ref) {\n      entity = _ref[uuid];\n      spriteLookup[uuid] = Sprite.fromURL(entity.tileSrc);\n    }\n    loadEntities = function() {\n      if (!entityCallback) return;\n      console.log(data);\n      return data.layers.each(function(layer, layerIndex) {\n        var instance, instanceData, instances, x, y, _i, _len, _results;\n        if (instances = layer.instances) {\n          _results = [];\n          for (_i = 0, _len = instances.length; _i < _len; _i++) {\n            instance = instances[_i];\n            x = instance.x, y = instance.y, uuid = instance.uuid;\n            instanceData = Object.extend({\n              layer: layerIndex,\n              sprite: spriteLookup[uuid],\n              x: x + tileWidth / 2,\n              y: y + tileHeight / 2\n            }, App.entities[uuid], instance.properties);\n            _results.push(entityCallback(instanceData));\n          }\n          return _results;\n        }\n      });\n    };\n    loadEntities();\n    return data;\n  };\n  Tilemap = function(name, callback, entityCallback) {\n    return fromPixieId(App.Tilemaps[name], callback, entityCallback);\n  };\n  loadByName = function(name, callback, entityCallback) {\n    var proxy, url;\n    url = ResourceLoader.urlFor("tilemaps", name);\n    proxy = {};\n    $.getJSON(url, function(data) {\n      Object.extend(proxy, Map(data, entityCallback));\n      return typeof callback === "function" ? callback(proxy) : void 0;\n    });\n    return proxy;\n  };\n  Tilemap.load = function(options) {\n    if (options.pixieId) {\n      return fromPixieId(options.pixieId, options.complete, options.entity);\n    } else if (options.name) {\n      return loadByName(options.name, options.complete, options.entity);\n    }\n  };\n  return (typeof exports !== "undefined" && exports !== null ? exports : this)["Tilemap"] = Tilemap;\n})();\n;\n;\n;\nvar Bullet;\n\nBullet = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    color: \'white\',\n    height: 8,\n    width: 8,\n    includedModules: ["Movable"],\n    velocity: Point(0, 0)\n  });\n  self = GameObject(I);\n  return self;\n};\n;\nvar Cleanup;\n\nCleanup = function(I, self) {\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    x: 0,\n    y: 0\n  });\n  self.bind("update", function() {\n    var _ref, _ref2;\n    if (!((0 <= (_ref = I.x) && _ref <= App.width))) self.destroy();\n    if (!((0 <= (_ref2 = I.y) && _ref2 <= App.height))) return self.destroy();\n  });\n  return {};\n};\n;\n\nEngine.AnyKey = function(I, self) {\n  self.bind(\'update\', function() {\n    var key, value, _ref, _ref2, _results;\n    window.keydown[\'any\'] = false;\n    _ref = window.keydown;\n    for (key in _ref) {\n      value = _ref[key];\n      if (window.keydown[key]) window.keydown[\'any\'] = true;\n    }\n    window.justPressed[\'any\'] = false;\n    _ref2 = window.justPressed;\n    _results = [];\n    for (key in _ref2) {\n      value = _ref2[key];\n      if (window.justPressed[key]) {\n        _results.push(window.justPressed[\'any\'] = true);\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  });\n  return {};\n};\n;\n\nEngine.Background = function(I, self) {\n  Object.reverseMerge(I, {\n    backgroundScroll: Point(-1, 0),\n    backgroundPosition: Point(0, 0)\n  });\n  self.bind("update", function() {\n    I.backgroundPosition = I.backgroundPosition.add(I.backgroundScroll);\n    if (I.backgroundPosition.x < -App.width) I.backgroundPosition.x += App.width;\n    if (I.backgroundPosition.y < -App.height) {\n      return I.backgroundPosition.y += App.height;\n    }\n  });\n  self.bind("beforeDraw", function(canvas) {\n    var background, position;\n    if (background = I.backgroundImage) {\n      position = I.backgroundPosition;\n      background.draw(canvas, position.x, position.y);\n      if (I.backgroundScroll.x.abs() > 0) {\n        return background.draw(canvas, position.x + App.width, 0);\n      } else if (I.backgroundScroll.y.abs() > 0) {\n        return background.draw(canvas, 0, position.y + App.height);\n      }\n    }\n  });\n  return {\n    scrollBackground: function(imageName, speed) {\n      if (speed == null) speed = Point(-1, 0);\n      I.backgroundImage = Sprite.loadByName(imageName);\n      return I.backgroundScroll = speed;\n    }\n  };\n};\n;\n\nEngine.Debug = function(I, self) {\n  var COL_HEIGHT, FONT_SIZE, ROW_HEIGHT;\n  COL_HEIGHT = 175;\n  ROW_HEIGHT = 9;\n  FONT_SIZE = 9;\n  Object.reverseMerge(I, {\n    debuggedObjects: [],\n    debugEnabled: false,\n    debugText: \'black\'\n  });\n  self.bind("update", function() {\n    if (justPressed[\'0\']) return I.debugEnabled = !I.debugEnabled;\n  });\n  self.bind("draw", function(canvas) {\n    var obj, _i, _len, _ref, _results;\n    if (I.debugEnabled) {\n      _ref = I.debuggedObjects;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        obj = _ref[_i];\n        _results.push(canvas.drawRect({\n          color: \'rgba(255, 0, 255, 0.4)\',\n          x: obj.I.x - obj.I.width / 2,\n          y: obj.I.y - obj.I.height / 2,\n          width: obj.I.width,\n          height: obj.I.height\n        }));\n      }\n      return _results;\n    }\n  });\n  self.bind("overlay", function(canvas) {\n    var key, obj, value, x, y, _i, _len, _ref, _ref2, _results;\n    if (I.debugEnabled) {\n      canvas.font("" + FONT_SIZE + "px Monaco");\n      x = 0;\n      y = ROW_HEIGHT;\n      _ref = I.debuggedObjects;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        obj = _ref[_i];\n        _ref2 = obj.I;\n        for (key in _ref2) {\n          value = _ref2[key];\n          if (Object.isObject(value)) {\n            try {\n              value = JSON.stringify(value);\n              value = value.replace(/["]/g, \'\');\n            } catch (_error) {}\n          }\n          if (parseFloat(value) && (parseFloat(value) !== parseInt(value))) {\n            value = value.toFixed(3);\n          }\n          canvas.drawText({\n            color: I.debugText,\n            x: x + 4,\n            y: y,\n            text: "" + key + ": " + value\n          });\n          y += ROW_HEIGHT;\n        }\n        x += COL_HEIGHT;\n        _results.push(y = ROW_HEIGHT);\n      }\n      return _results;\n    }\n  });\n  return {\n    addDebug: function(obj) {\n      return I.debuggedObjects.push(obj);\n    },\n    removeDebug: function(obj) {\n      return I.debuggedObjects.remove(obj);\n    }\n  };\n};\n;\n\nEngine.Score = function(I, self) {\n  Object.reverseMerge(I, {\n    score: 0\n  });\n  self.bind("overlay", function(canvas) {\n    if (engine.I.currentState.I.name === \'main\') {\n      canvas.font(\'14px Helvetica\');\n      return canvas.drawText({\n        color: \'black\',\n        x: App.width - 100,\n        y: 20,\n        text: "Score: " + I.score\n      });\n    }\n  });\n  return {};\n};\n;\nvar LevelBounds;\n\nLevelBounds = function(I, self) {\n  if (I == null) I = {};\n  self.bind("update", function() {\n    var cameraBounds;\n    cameraBounds = engine.camera().I.cameraBounds;\n    I.x = I.x.clamp(I.width / 2, cameraBounds.width - I.width / 2);\n    return I.y = I.y.clamp(I.height / 2, cameraBounds.height - I.height / 2);\n  });\n  return {};\n};\n;\n;\nvar Player;\n\nPlayer = function(I) {\n  var COOLDOWN, self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    width: 16,\n    height: 16,\n    color: \'blue\',\n    includedModules: [\'Cooldown\', \'Movable\', \'LevelBounds\'],\n    speed: 1,\n    id: 1,\n    velocity: Point(0, 0)\n  });\n  COOLDOWN = 75;\n  self = GameObject(I).extend({\n    collide: function(xOffset, yOffset, className) {\n      return engine.find(className).inject(false, function(hit, block) {\n        return hit || Collision.rectangular(self.bounds(xOffset, yOffset), block.bounds());\n      });\n    }\n  });\n  self.cooldown(\'bulletCooldown\');\n  self.bind(\'afterTransform\', function(canvas) {\n    if (engine.I.debugEnabled) {\n      if (I.velocity != null) {\n        return canvas.withTransform(Matrix.translation(I.x, I.y), function(canvas) {\n          canvas.drawRect({\n            x: 0,\n            y: -2,\n            width: I.velocity.x * 10,\n            height: 4,\n            color: \'rgba(255, 0, 0, 0.5)\'\n          });\n          return canvas.drawRect({\n            x: -2,\n            y: 0,\n            width: 4,\n            height: I.velocity.y * 10,\n            color: \'rgba(255, 0, 0, 0.5)\'\n          });\n        });\n      }\n    }\n  });\n  self.bind("destroy", function() {\n    Sound.play(\'death\');\n    return engine.delay(5, function() {\n      return nextLevel();\n    });\n  });\n  self.bind("update", function() {\n    Collision.collide(self, engine.find(\'Bullet\'), function(pl, bullet) {\n      pl.destroy();\n      bullet.destroy();\n      engine.shake();\n      if (pl.I.id === 1) {\n        return engine.I.player2Score += 1;\n      } else if (pl.I.id === 2) {\n        return engine.I.player1Score += 1;\n      }\n    });\n    if (I.id === 1) {\n      if (justPressed.d && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(-1, 0).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x + 15,\n          y: I.y,\n          velocity: Point(3, 0)\n        });\n      } else if (justPressed.a && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(1, 0).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x - 15,\n          y: I.y,\n          velocity: Point(-3, 0)\n        });\n      } else if (justPressed.s && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(0, -1).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x,\n          y: I.y + 15,\n          velocity: Point(0, 3)\n        });\n      } else if (justPressed.w && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(0, 1).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x,\n          y: I.y - 15,\n          velocity: Point(0, -3)\n        });\n      }\n    } else if (I.id === 2) {\n      if (justPressed.right && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(-1, 0).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x + 15,\n          y: I.y,\n          velocity: Point(3, 0)\n        });\n      } else if (justPressed.left && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(1, 0).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x - 15,\n          y: I.y,\n          velocity: Point(-3, 0)\n        });\n      } else if (justPressed.down && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(0, -1).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x,\n          y: I.y + 15,\n          velocity: Point(0, 3)\n        });\n      } else if (justPressed.up && I.bulletCooldown === 0) {\n        I.bulletCooldown = COOLDOWN;\n        I.velocity = Point(0, 1).scale(I.speed);\n        Sound.play("shot");\n        engine.add({\n          "class": "Bullet",\n          x: I.x,\n          y: I.y - 15,\n          velocity: Point(0, -3)\n        });\n      }\n    }\n    I.velocity.x.abs().times(function() {\n      if (!self.collide(I.velocity.x.sign(), 0, ".solid")) {\n        return I.x += I.velocity.x.sign();\n      } else {\n        return I.velocity.x = 0;\n      }\n    });\n    return I.velocity.y.abs().times(function() {\n      if (!self.collide(0, I.velocity.y.sign(), ".solid")) {\n        return I.y += I.velocity.y.sign();\n      } else {\n        return I.velocity.y = 0;\n      }\n    });\n  });\n  return self;\n};\n;\nvar Projectile;\n\nProjectile = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    color: \'black\',\n    height: 4,\n    width: 4,\n    includedModules: ["Cleanup", "Movable"],\n    velocity: Point(0, 0)\n  });\n  self = GameObject(I);\n  return self;\n};\n;\nvar GameOver, MainGame, Title, drawTitleText;\n\ndrawTitleText = function(canvas, titleText, subtitleText) {\n  canvas.fillColor(\'black\');\n  canvas.font(\'24px Helvetica\');\n  canvas.centerText({\n    y: App.height / 2 - 20,\n    text: titleText\n  });\n  canvas.font(\'14px Helvetica\');\n  return canvas.centerText({\n    y: App.height / 2,\n    text: subtitleText\n  });\n};\n\nTitle = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = GameState(I);\n  engine.scrollBackground(\'background\', Point(-1, 0));\n  self.bind(\'update\', function() {\n    if (justPressed.any) return nextLevel();\n  });\n  self.bind("overlay", function(canvas) {\n    return drawTitleText(canvas, window.title, "Press any key to start");\n  });\n  return self;\n};\n\nMainGame = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    level: \'level1\'\n  });\n  self = GameState(I);\n  self.bind("enter", function() {\n    engine.camera().fadeIn(10);\n    window.player = self.add({\n      "class": "Player",\n      x: 50,\n      y: 50\n    });\n    window.player2 = self.add({\n      "class": "Player",\n      color: \'red\',\n      x: 300,\n      y: 300,\n      id: 2\n    });\n    engine.loadMap(I.level);\n    return engine.addDebug(player);\n  });\n  return self;\n};\n\nGameOver = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = GameState(I);\n  self.bind(\'update\', function() {\n    if (justPressed.any) {\n      return engine.delay(15, function() {\n        engine.I.player1Score = 0;\n        engine.I.player2Score = 0;\n        return nextLevel();\n      });\n    }\n  });\n  self.bind("overlay", function(canvas) {\n    var titleText;\n    titleText = "player 1: " + engine.I.player1Score + " player 2: " + engine.I.player2Score;\n    return drawTitleText(canvas, titleText, "Press any key to start over");\n  });\n  return self;\n};\n;\n\nApp.entities = {\n  "block": {\n    "name": "Unnamed Entity",\n    "width": 32,\n    "height": 32,\n    "sprite": null,\n    "color": "#0000FF",\n    "uuid": "block",\n    "solid": true,\n    "spriteName": "test"\n  }\n};\n;\n;$(function(){ var level, levels, transitioning;\n\nwindow.engine = Engine({\n  backgroundColor: \'white\',\n  canvas: $("canvas").pixieCanvas(),\n  includedModules: ["AnyKey", "Background", "Debug", "Score", "Tilemap"]\n});\n\nwindow.title = App.name;\n\nengine.setFramerate(60);\n\nlevel = -1;\n\ntransitioning = false;\n\nlevels = ["level1", "level2", "level3", "level4", "level5"];\n\nengine.I.player1Score = 0;\n\nengine.I.player2Score = 0;\n\nwindow.restartLevel = function() {\n  player.destroy();\n  return window.player = engine.add({\n    "class": "Player"\n  });\n};\n\nwindow.nextLevel = function() {\n  if (!transitioning) {\n    transitioning = true;\n    engine.camera().fadeOut(10);\n    return engine.delay(5, function() {\n      transitioning = false;\n      level += 1;\n      if (level < levels.length) {\n        return engine.setState(MainGame({\n          level: levels[level]\n        }));\n      } else {\n        level = null;\n        return engine.setState(GameOver());\n      }\n    });\n  }\n};\n\nengine.bind(\'overlay\', function(canvas) {\n  canvas.font(\'13px Helvetica\');\n  canvas.drawText({\n    x: 40,\n    y: 20,\n    color: Color(\'sky blue\').darken(0.2),\n    text: "Player 1: " + engine.I.player1Score\n  });\n  return canvas.drawText({\n    x: App.width - 110,\n    y: 20,\n    color: \'red\',\n    text: "Player 2: " + engine.I.player2Score\n  });\n});\n\nengine.bind(\'update\', function() {\n  if (justPressed[\'1\']) nextLevel();\n  return Collision.collide(engine.find(\'Bullet\'), engine.find(\'.solid\'), function(bu, bl) {\n    return bu.destroy();\n  });\n});\n\nengine.setState(Title());\n\nengine.start();\n });'[39m,
    ctx: [90mundefined[39m } ]
