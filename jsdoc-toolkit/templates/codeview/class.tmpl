<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html; charset={+IO.encoding+}" />
    <meta name="generator" content="JsDoc Toolkit" />
    {! Link.base = "../"; /* all generated links will be relative to this */ !}
    <title>JsDoc Reference - {+data.alias+}</title>
    <link href="/assets/docs.css" type="text/css" rel="stylesheet" media="all" />
  </head>

  <body>
    <div class="index">
      <div class="menu">
        <!-- begin publish.classesIndex -->
        {+publish.classesIndex+}
        <!-- end publish.classesIndex -->
      </div>
    </div>

    <div class="content">
      <div class="innerContent">
        <h1 class="classTitle">
          {!
            var classType = "";

            if (data.comment.getTag("module").length) {
              classType += "Module ";
            } else {
              classType += "Class ";
            }
          !}
          <span>{+data.alias+}</span>
        </h1>

        <p class="description summary">
          <if test="data.version">
            <strong>Version {+ data.version +}.</strong><br />
          </if>

          <if test="data.augments.length"><br />Extends
            {+
              data.augments
              .sort()
              .map(
                function($) { return new Link().toSymbol($); }
              )
              .join(", ")
            +}.<br />
          </if>

          {+resolveLinks(data.classDesc)+}
        </p>

        <if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
          <div class="props">
            <table class="summaryTable" cellspacing="0" summary="A summary of the constructor documented in the class {+data.alias+}.">
              <caption>{+classType+}Summary</caption>
              <tbody>
                <tr>
                  <td class="nameDescription" {!if (data.comment.getTag("hilited").length){output += 'style="color: red"'}!}>
                    <div class="fixedFont">
                      <b>{+ new Link().toSymbol(data.alias).inner('constructor')+}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
                    </div>
                    <div class="description">{+resolveLinks(summarize(data.desc))+}</div>
                  </td>
                </tr>
                <tr>
                  <td class="instanceVariables">{!
                    if (data.comment.getTag("instanceVariables").length) {
                      output += "<b>Instance Variables (I):</b> ";
                      output += data.comment.getTag("instanceVariables")[0];
                    }
                  !}&nbsp;</td>
                </tr>
              </tbody>
            </table>
          </div>
        </if>

        <if test="data.properties.length">
          {! var ownProperties = data.properties.filter(function($){return $.memberOf == data.alias && !$.isNamespace}).sort(makeSortby("name")); !}
          <if test="ownProperties.length">
            <div class="props">
              <table class="summaryTable" cellspacing="0" summary="A summary of the fields documented in the class {+data.alias+}.">
                <caption>Field Summary</caption>

                <tbody>
                  <for each="member" in="ownProperties">
                    <tr>
                      <td class="nameDescription">
                        <div class="fixedFont">
                        <if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>
                          <span class='lighter'>
                          {!
                            if (member.isPrivate) output += "&lt;private&gt; ";
                            if (member.isInner) output += "&lt;inner&gt; ";
                            if (member.isStatic) output += "<em>static</em>";
                            if (member.isConstant) output += "&lt;constant&gt; ";
                          !}
                          </span>
                        </div>
                        <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                      </td>
                    </tr>
                  </for>
                </tbody>
              </table>
            </div>
          </if>

          <if test="data.inheritsFrom.length">
            <dl class="inheritsList">
            {!
              var borrowedMembers = data.properties.filter(function($) {return $.memberOf != data.alias});

              var contributers = [];
              borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
              for (var i = 0, l = contributers.length; i < l; i++) {
                output +=
                  "<dt>Fields borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                  +
                  "<dd>" +
                  borrowedMembers
                  .filter(
                    function($) { return $.memberOf == contributers[i] }
                  )
                  .sort(makeSortby("name"))
                  .map(
                    function($) { return new Link().toSymbol($.alias).withText($.name) }
                  )
                  .join(", ")
                  +
                  "</dd>";
              }
            !}
            </dl>
          </if>
        </if>

  <!--
  #### METHODS SUMMARY
  -->
        <if test="data.methods.length">
          {! var ownMethods = data.methods.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
          <if test="ownMethods.length">
            <div class="props">
              <table class="summaryTable" cellspacing="0" summary="A summary of the methods documented in the class {+data.alias+}.">
                <caption>Method Summary</caption>

                <tbody>
                  <for each="member" in="ownMethods">
                    <tr>
                      <td class="nameDescription">
                        <div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name.replace(/\^\d+$/, ''))+}</b>{+makeSignature(member.params)+}
                        </div>
                        <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                      </td>
                    </tr>
                  </for>
                </tbody>
              </table>
            </div>
          </if>

          <if test="data.inheritsFrom.length">
            <dl class="inheritsList">
            {!
              var borrowedMembers = data.methods.filter(function($) {return $.memberOf != data.alias});
              var contributers = [];
              borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
              for (var i = 0, l = contributers.length; i < l; i++) {
                output +=
                  "<dt>Methods borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                  +
                  "<dd>" +
                  borrowedMembers
                  .filter(
                    function($) { return $.memberOf == contributers[i] }
                  )
                  .sort(makeSortby("name"))
                  .map(
                    function($) { return new Link().toSymbol($.alias).withText($.name) }
                  )
                  .join(", ")
                  +
                  "</dd>";
              }
            !}
            </dl>
          </if>
        </if>

  <!--
  #### EVENTS SUMMARY
  -->
        <if test="data.events.length">
          {! var ownEvents = data.events.filter(function($){return $.memberOf == data.alias  && !$.isNamespace}).sort(makeSortby("name")); !}
          <if test="ownEvents.length">
          <div class="props">
            <table class="summaryTable" cellspacing="0" summary="A summary of the events documented in the class {+data.alias+}.">
              <caption>Event Summary</caption>

              <tbody>
                <for each="member" in="ownEvents">
                  <tr>
                    <td class="nameDescription">
                      <div class="fixedFont"><if test="member.isStatic && member.memberOf != '_global_'">{+member.memberOf+}.</if><b>{+new Link().toSymbol(member.alias).withText(member.name)+}</b>{+makeSignature(member.params)+}
                      </div>
                      <div class="description">{+resolveLinks(summarize(member.desc))+}</div>
                    </td>
                  </tr>
                </for>
              </tbody>
            </table>
          </div>
          </if>

          <if test="data.inheritsFrom.length">
            <dl class="inheritsList">
            {!
              var borrowedMembers = data.events.filter(function($) {return $.memberOf != data.alias});
              var contributers = [];
              borrowedMembers.map(function($) {if (contributers.indexOf($.memberOf) < 0) contributers.push($.memberOf)});
              for (var i = 0, l = contributers.length; i < l; i++) {
                output +=
                  "<dt>Events borrowed from class "+new Link().toSymbol(contributers[i])+": </dt>"
                  +
                  "<dd>" +
                  borrowedMembers
                  .filter(
                    function($) { return $.memberOf == contributers[i] }
                  )
                  .sort(makeSortby("name"))
                  .map(
                    function($) { return new Link().toSymbol($.alias).withText($.name) }
                  )
                  .join(", ")
                  +
                  "</dd>";
              }

            !}
            </dl>
          </if>
        </if>

  <!--
  #### CONSTRUCTOR DETAILS
  -->
        <if test="!data.isBuiltin() && (data.isNamespace || data.is('CONSTRUCTOR'))">
          <div class="details props">
            <div class="innerProps">
              <a name="constructor"></a>

              <div class="fixedFont">{!
                if (data.isPrivate) output += "&lt;private&gt; ";
                if (data.isInner) output += "&lt;inner&gt; ";
              !}
                <b>{+ data.alias +}</b><if test="classType != 'Namespace '">{+ makeSignature(data.params) +}</if>
              </div>

              <div class="description">
                {+resolveLinks(data.desc)+}
                <if test="data.author"><br /><i>Author: </i>{+data.author+}.</if>
              </div>

              <if test="data.example.length">
                <for each="example" in="data.example">
                  <pre class="code">{+example+}</pre>
                </for>
              </if>

              <if test="data.params.length">
                <dl class="detailList params">
                  <dt class="heading">Parameters:</dt>
                  <for each="item" in="data.params">
                    <dt>
                      <b>{+item.name+}</b>{+((item.type)?"<span class='light fixedFont'> "+(new Link().toSymbol(item.type))+"</span> " : "")+}
                      <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                    </dt>
                    <dd>{+resolveLinks(item.desc)+}</dd>
                  </for>
                </dl>
              </if>

              <if test="data.deprecated || data.since || data.exceptions.length || data.returns.length || data.requires.length || data.see.length">
                <dl class="detailList nomargin">
                  <if test="data.deprecated">
                    <dt>
                      {+resolveLinks(data.deprecated)+}
                    </dt>
                  </if>

                  <if test="data.since">
                    <dt class="heading">Since:</dt>
                    <dd>{+ data.since +}</dd>
                  </if>

                  <if test="data.exceptions.length">
                    <dt class="heading">Throws:</dt>
                    <for each="item" in="data.exceptions">
                      <dt>
                        {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                      </dt>
                        <dd>{+resolveLinks(item.desc)+}</dd>
                    </for>
                  </if>

                  <if test="data.returns.length">
                    <for each="item" in="data.returns">
                      <dt class="heading">Returns {+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}:</dt>
                      <dd>{+resolveLinks(item.desc)+}</dd>
                    </for>
                  </if>

                  <if test="data.requires.length">
                    <dt class="heading">Requires:</dt>
                    <for each="item" in="data.requires">
                      <dd>{+ resolveLinks(item) +}</dd>
                    </for>
                  </if>

                  <if test="data.see.length">
                    <dt class="heading">See:</dt>
                    <for each="item" in="data.see">
                      <dd>{+ new Link().toSymbol(item) +}</dd>
                    </for>
                  </if>
                </dl>
              </if>
            </div>
          </div>
        </if>

  <!--
  #### FIELD DETAILS
  -->
        <if test="defined(ownProperties) && ownProperties.length">
          <div class="details props">
            <div class="innerProps">
              <for each="member" in="ownProperties">
                <div class="fixedFont heading">
                  <a name="{+Link.symbolNameToLinkName(member)+}"></a>
                  <if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>

                  <if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>
                  <span class='lighter'>
                  {!
                    if (member.isPrivate) output += "&lt;private&gt; ";
                    if (member.isInner) output += "&lt;inner&gt; ";
                    if (member.isStatic) output += "<em>static</em>";
                    if (member.isConstant) output += "&lt;constant&gt; ";
                  !}
                  </span>
                </div>

                <div class="description">
                  {+resolveLinks(member.desc)+}

                  <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                </div>

                <if test="member.example.length">
                  <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                  </for>
                </if>

                <if test="member.deprecated || member.since || member.see.length || member.defaultValue">
                  <dl class="detailList nomargin">

                    <if test="member.deprecated">
                      <dt class="heading">Deprecated:</dt>
                      <dt>
                        {+ resolveLinks(member.deprecated) +}
                      </dt>
                    </if>
                    <if test="member.since">
                      <dt class="heading">Since:</dt>
                      <dd>{+ member.since +}</dd>
                    </if>
                    <if test="member.see.length">
                      <dt class="heading">See:</dt>
                      <for each="item" in="member.see">
                        <dd>{+ new Link().toSymbol(item) +}</dd>
                      </for>
                    </if>
                    <if test="member.defaultValue">
                      <dt class="heading">Default Value:</dt>
                      <dd>
                        {+resolveLinks(member.defaultValue)+}
                      </dd>
                    </if>
                  </dl>
                </if>
              </for>
            </div>
          </div>
        </if>

  <!--
  #### METHOD DETAILS
  -->
        <if test="defined(ownMethods) && ownMethods.length">
          <div class="details props">
            <div class="innerProps">
              <for each="member" in="ownMethods">
                <div class="fixedFont heading">
                  <a name="{+Link.symbolNameToLinkName(member)+}"></a>
                  <span class='lighter'>
                  {!
                    if (member.isPrivate) output += "&lt;private&gt; ";
                    if (member.isInner) output += "&lt;inner&gt; ";
                    if (member.isStatic) output += "<em>static</em>";
                  !}
                  </span>

                  <if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name.replace(/\^\d+$/, '')+}</b>{+makeSignature(member.params)+}
                </div>

                <div class="description">
                  {+resolveLinks(member.desc)+}

                  <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                </div>

                <if test="member.example.length">
                  <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                  </for>
                </if>

                <if test="member.params.length">
                  <dl class="detailList params">
                    <dt class="heading">Parameters:</dt>
                    <for each="item" in="member.params">
                      <dt>
                        <b>{+item.name+}</b>{+((item.type)?"<span class='light fixedFont'> "+(new Link().toSymbol(item.type))+"</span> " : "")+}
                        <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                      </dt>
                      <dd>{+resolveLinks(item.desc)+}</dd>
                    </for>
                  </dl>
                </if>

                <if test="member.deprecated || member.since || member.exceptions.length || member.returns.length || member.requires.length || member.see.length">
                  <dl class="detailList nomargin">

                    <if test="member.deprecated">
                      <dt class="heading">Deprecated:</dt>
                      <dt>
                        {+ resolveLinks(member.deprecated) +}
                      </dt>
                    </if>

                    <if test="member.since">
                      <dt class="heading">Since:</dt>
                      <dd>{+ member.since +}</dd>
                    </if>

                    <if test="member.exceptions.length">
                      <dt class="heading">Throws:</dt>
                      <for each="item" in="member.exceptions">
                        <dt>
                          {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                        </dt>
                        <dd>{+resolveLinks(item.desc)+}</dd>
                      </for>
                    </if>

                    <if test="member.returns.length">
                      <for each="item" in="member.returns">
                        <dt class="heading">Returns {+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}:</dt>
                        <dd>{+resolveLinks(item.desc)+}</dd>
                      </for>
                    </if>

                    <if test="member.requires.length">
                      <dt class="heading">Requires:</dt>
                      <for each="item" in="member.requires">
                        <dd>{+ resolveLinks(item) +}</dd>
                      </for>
                    </if>

                    <if test="member.see.length">
                      <dt class="heading">See:</dt>
                      <for each="item" in="member.see">
                        <dd>{+ new Link().toSymbol(item) +}</dd>
                      </for>
                    </if>

                  </dl>
                </if>
              </for>
            </div>
          </div>
        </if>

  <!--
  #### EVENT DETAILS
  -->
        <if test="defined(ownEvents) && ownEvents.length">
          <div class="details props">
            <div class="innerProps">
              <for each="member" in="ownEvents">
                <div class="fixedFont heading">
                  <a name="{+Link.symbolNameToLinkName(member)+}"> </a>
                  <span class='lighter'>
                  {!
                    if (member.isPrivate) output += "&lt;private&gt; ";
                    if (member.isInner) output += "&lt;inner&gt; ";
                    if (member.isStatic) output += "<em>static</em>";
                  !}
                  </span>

                  <if test="member.type"><span class="light">{{+new Link().toSymbol(member.type)+}}</span></if>

                  <if test="member.isStatic && member.memberOf != '_global_'"><span class="light">{+member.memberOf+}.</span></if><b>{+member.name+}</b>{+makeSignature(member.params)+}
                  <span class="lighter"><em>event</em></span>
                </div>

                <div class="description">
                  {+resolveLinks(member.desc)+}

                  <if test="member.author"><br /><i>Author: </i>{+member.author+}.</if>
                </div>

                <if test="member.example.length">
                  <for each="example" in="member.example">
                    <pre class="code">{+example+}</pre>
                  </for>
                </if>

                <if test="member.params.length">
                  <dl class="detailList params">
                    <dt class="heading">Parameters:</dt>
                    <for each="item" in="member.params">
                      <dt>
                        <b>{+item.name+}</b>{+((item.type)?"<span class='light fixedFont'> "+(new Link().toSymbol(item.type))+"</span> " : "")+}
                        <if test="item.isOptional"><i>Optional<if test="item.defaultValue">, Default: {+item.defaultValue+}</if></i></if>
                      </dt>
                      <dd>{+ resolveLinks(item.desc) +}</dd>
                    </for>
                  </dl>
                </if>

                <if test="member.deprecated || member.since || member.exceptions.length || member.returns.length || member.see.length">
                  <dl class="detailList nomargin">
                    <if test="member.deprecated">
                      <dt class="heading">Deprecated:</dt>
                      <dt>{+ resolveLinks(member.deprecated) +}</dt>
                    </if>

                    <if test="member.since">
                      <dt class="heading">Since:</dt>
                      <dd>{+ member.since +}</dd>
                    </if>

                    <if test="member.exceptions.length">
                      <dt class="heading">Throws:</dt>
                      <for each="item" in="member.exceptions">
                        <dt>
                          {+((item.type)?"<span class=\"light fixedFont\">{"+(new Link().toSymbol(item.type))+"}</span> " : "")+} <b>{+item.name+}</b>
                        </dt>
                        <dd>{+ resolveLinks(item.desc) +}</dd>
                      </for>
                    </if>

                    <if test="member.returns.length">
                      <for each="item" in="member.returns">
                        <dt class="heading">Returns {+((item.type)?"<span class=\"light fixedFont\">"+(new Link().toSymbol(item.type))+"</span> " : "")+}:</dt>
                        <dd>{+resolveLinks(item.desc)+}</dd>
                      </for>
                    </if>

                    <if test="member.requires.length">
                      <dt class="heading">Requires:</dt>
                      <for each="item" in="member.requires">
                        <dd>{+ resolveLinks(item) +}</dd>
                      </for>
                    </if>

                    <if test="member.see.length">
                      <dt class="heading">See:</dt>
                      <for each="item" in="member.see">
                        <dd>{+ new Link().toSymbol(item) +}</dd>
                      </for>
                    </if>
                  </dl>
                </if>
              </for>
            </div>
          </div>
        </if>
      </div>
    </div>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js"></script>
  <script src="/assets/docs.js"></script>
  </body>
</html>
