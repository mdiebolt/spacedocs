[{"Array":{"method_list":["average","compact","copy","clear","flatten","invoke","rand","remove","include","each","map","eachPair","eachWithObject","eachSlice","pipeline","shuffle","first","last","extremes","wrap","partition","select","without","reject","inject","sum","product","zip","pop","push","reverse","shift","sort","splice","unshift","concat","join","slice","toString","indexOf","lastIndexOf","filter","forEach","every","map","some","reduce","reduceRight"],"methods":{"average":{"summary":"<p>Calculate the average value of an array. Returns undefined if some elements<br />are not numbers.</p>","code_sample":"<pre><code>[1, 3, 5, 7].average()\n# =&gt; 4\n</code></pre>","source":"var _base,\n  __slice = Array.prototype.slice;\n\nArray.prototype.average = function() {\n  return this.sum() / this.length;\n};","params":[],"returns":"{Number} The average (arithmetic mean) of the list of numbers.","see":null},"compact":{"summary":"<p>Returns a copy of the array without null and undefined values.</p>","code_sample":"<pre><code>[null, undefined, 3, 3, undefined, 5].compact()\n# =&gt; [3, 3, 5]\n</code></pre>","source":"Array.prototype.compact = function() {\n  return this.select(function(element) {\n    return element != null;\n  });\n};","params":[],"returns":"{Array} A new array that contains only the non-null values.","see":null},"copy":{"summary":"<p>Creates and returns a copy of the array. The copy contains<br />the same objects.</p>","code_sample":"<pre><code>a = [\"a\", \"b\", \"c\"]\nb = a.copy()\n\n# their elements are equal\na[0] == b[0] &amp;&amp; a[1] == b[1] &amp;&amp; a[2] == b[2]\n# =&gt; true\n\n# but they aren't the same object in memory\na === b\n# =&gt; false\n</code></pre>","source":"Array.prototype.copy = function() {\n  return this.concat();\n};","params":[],"returns":"{Array} A new array that is a copy of the array","see":null},"clear":{"summary":"<p>Empties the array of its contents. It is modified in place.</p>","code_sample":"<pre><code>fullArray = [1, 2, 3]\nfullArray.clear()\nfullArray\n# =&gt; []\n</code></pre>","source":"Array.prototype.clear = function() {\n  this.length = 0;\n  return this;\n};","params":[],"returns":"{Array} this, now emptied.","see":null},"flatten":{"summary":"<p>Flatten out an array of arrays into a single array of elements.</p>","code_sample":"<pre><code>[[1, 2], [3, 4], 5].flatten()\n# =&gt; [1, 2, 3, 4, 5]\n\n# won't flatten twice nested arrays. call\n# flatten twice if that is what you want\n[[1, 2], [3, [4, 5]], 6].flatten()\n# =&gt; [1, 2, 3, [4, 5], 6]\n</code></pre>","source":"Array.prototype.flatten = function() {\n  return this.inject([], function(a, b) {\n    return a.concat(b);\n  });\n};","params":[],"returns":"{Array} A new array with all the sub-arrays flattened to the top.","see":null},"invoke":{"summary":"<p>Invoke the named method on each element in the array<br />and return a new array containing the results of the invocation.</p>","code_sample":"<pre><code>[1.1, 2.2, 3.3, 4.4].invoke(\"floor\")\n# =&gt; [1, 2, 3, 4]\n\n['hello', 'world', 'cool!'].invoke('substring', 0, 3)\n# =&gt; ['hel', 'wor', 'coo']\n</code></pre>","source":"Array.prototype.invoke = function() {\n  var args, method;\n  method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  return this.map(function(element) {\n    return element[method].apply(element, args);\n  });\n};","params":[{"method":{"type":"String","description":"The name of the method to invoke.","optional":false}},{"Optional":{"type":"[arg...]","description":"arguments to pass to the method being invoked.","optional":false}}],"returns":"{Array} A new array containing the results of invoking the named method on each element.","see":null},"rand":{"summary":"<p>Randomly select an element from the array.</p>","code_sample":"<pre><code>[1, 2, 3].rand()\n# =&gt; 2\n</code></pre>","source":"Array.prototype.rand = function() {\n  return this[rand(this.length)];\n};","params":[],"returns":"{Object} A random element from an array","see":null},"remove":{"summary":"<p>Triggered when the object is removed from<br />the engine. Use the remove event to handle any clean up.</p>","code_sample":"<pre><code>boss = GameObject()\n\nboss.bind 'remove', -&gt;\n  unlockDoorToLevel2()\n</code></pre>","source":"var GameObject;\n\nGameObject = function(I) {\n  var autobindEvents, defaultModules, modules, self;\n  I || (I = {});","params":[],"returns":null,"see":null},"include":{"summary":"<p>Returns true if the element is present in the array.</p>","code_sample":"<pre><code>[\"a\", \"b\", \"c\"].include(\"c\")\n# =&gt; true\n\n[40, \"a\"].include(700)\n# =&gt; false\n</code></pre>","source":"Array.prototype.include = function(element) {\n  return this.indexOf(element) !== -1;\n};","params":[{"element":{"type":"Object","description":"The element to check if present.","optional":false}}],"returns":"{Boolean} true if the element is in the array, false otherwise.","see":null},"each":{"summary":"<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument, the index of<br />the element as the second argument, and <code>this</code> array as the<br />third argument.</p>","code_sample":"<pre><code>word = \"\"\nindices = []\n[\"r\", \"a\", \"d\"].each (letter, index) -&gt;\n  word += letter\n  indices.push(index)\n\n# =&gt; [\"r\", \"a\", \"d\"]\n\nword\n# =&gt; \"rad\"\n\nindices\n# =&gt; [0, 1, 2]\n</code></pre>","source":"Array.prototype.each = function(iterator, context) {\n  var element, i, _len;\n  if (this.forEach) {\n    this.forEach(iterator, context);\n  } else {\n    for (i = 0, _len = this.length; i < _len; i++) {\n      element = this[i];\n      iterator.call(context, element, i, this);\n    }\n  }\n  return this;\n};","params":[{"iterator":{"type":"Function","description":"Function to be called once for each element in the array.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} this to enable method chaining.","see":null},"map":{"summary":"<p>Creates a new array with the results of calling a provided function on every<br />element in this array.</p>","code_sample":"<p><code><em>array</em>.map(<em>callback</em>[, <em>thisObject</em>])</code></p>","source":null,"params":[{"Function":{"type":"callbackthisObject","description":"that produces an element of the new Array","optional":false}}],"returns":null,"see":null},"eachPair":{"summary":"<p>Call the given iterator once for each pair of objects in the array.</p>","code_sample":"<pre><code>[1, 2, 3, 4].eachPair (a, b) -&gt;\n  # 1, 2\n  # 1, 3\n  # 1, 4\n  # 2, 3\n  # 2, 4\n  # 3, 4\n</code></pre>","source":"Array.prototype.eachPair = function(iterator, context) {\n  var a, b, i, j, length, _results;\n  length = this.length;\n  i = 0;\n  _results = [];\n  while (i < length) {\n    a = this[i];\n    j = i + 1;\n    i += 1;\n    _results.push((function() {\n      var _results2;\n      _results2 = [];\n      while (j < length) {\n        b = this[j];\n        j += 1;\n        _results2.push(iterator.call(context, a, b));\n      }\n      return _results2;\n    }).call(this));\n  }\n  return _results;\n};","params":[{"iterator":{"type":"Function","description":"Function to be called once for each pair of elements in the array.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":null,"see":null},"eachWithObject":{"summary":"<p>Call the given iterator once for each element in the array,<br />passing in the element as the first argument and the given object<br />as the second argument. Additional arguments are passed similar to<br /><code>each</code>.</p>","code_sample":"","source":"Array.prototype.eachWithObject = function(object, iterator, context) {\n  this.each(function(element, i, self) {\n    return iterator.call(context, element, object, i, self);\n  });\n  return object;\n};","params":[{"object":{"type":"Object","description":"The object to pass to the iterator on each visit.","optional":false}},{"iterator":{"type":"Function","description":"Function to be called once for each element in the array.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} this","see":"Array#each"},"eachSlice":{"summary":"<p>Call the given iterator once for each group of elements in the array,<br />passing in the elements in groups of n. Additional argumens are<br />passed as in each.</p>","code_sample":"<pre><code>results = []\n[1, 2, 3, 4].eachSlice 2, (slice) -&gt;\n  results.push(slice)\n# =&gt; [1, 2, 3, 4]\n\nresults\n# =&gt; [[1, 2], [3, 4]]\n</code></pre>","source":"Array.prototype.eachSlice = function(n, iterator, context) {\n  var i, len;\n  if (n > 0) {\n    len = (this.length / n).floor();\n    i = -1;\n    while (++i < len) {\n      iterator.call(context, this.slice(i * n, (i + 1) * n), i * n, this);\n    }\n  }\n  return this;\n};","params":[{"n":{"type":"Number","description":"The number of elements in each group.","optional":false}},{"iterator":{"type":"Function","description":"Function to be called once for each group of elements in the array.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} this","see":"Array#each"},"pipeline":{"summary":"<p>Pipe the input through each function in the array in turn. For example, if you have a<br />list of objects you can perform a series of selection, sorting, and other processing<br />methods and then receive the processed list. This array must contain functions that<br />accept a single input and return the processed input. The output of the first function<br />is fed to the input of the second and so on until the final processed output is returned.</p>","code_sample":"","source":"Array.prototype.pipeline = function(input) {\n  var fn, _i, _len;\n  for (_i = 0, _len = this.length; _i < _len; _i++) {\n    fn = this[_i];\n    input = fn(input);\n  }\n  return input;\n};","params":[{"input":{"type":"Object","description":"The initial input to pass to the first function in the pipeline.","optional":false}}],"returns":"{Object} The result of processing the input by each function in the array.","see":null},"shuffle":{"summary":"<p>Returns a new array with the elements all shuffled up.</p>","code_sample":"<pre><code>a = [1, 2, 3]\n\na.shuffle()\n# =&gt; [2, 3, 1]\n\na # =&gt; [1, 2, 3]\n</code></pre>","source":"Array.prototype.shuffle = function() {\n  var shuffledArray;\n  shuffledArray = [];\n  this.each(function(element) {\n    return shuffledArray.splice(rand(shuffledArray.length + 1), 0, element);\n  });\n  return shuffledArray;\n};","params":[],"returns":"{Array} A new array that is randomly shuffled.","see":null},"first":{"summary":"<p>Returns the first element of the array, undefined if the array is empty.</p>","code_sample":"<pre><code>[\"first\", \"second\", \"third\"].first()\n# =&gt; \"first\"\n</code></pre>","source":"Array.prototype.first = function() {\n  return this[0];\n};","params":[],"returns":"{Object} The first element, or undefined if the array is empty.","see":null},"last":{"summary":"<p>Returns the last element of the array, undefined if the array is empty.</p>","code_sample":"<pre><code>[\"first\", \"second\", \"third\"].last()\n# =&gt; \"third\"\n</code></pre>","source":"Array.prototype.last = function() {\n  return this[this.length - 1];\n};","params":[],"returns":"{Object} The last element, or undefined if the array is empty.","see":null},"extremes":{"summary":"<p>Returns an object containing the extremes of this array.</p>","code_sample":"<pre><code>[-1, 3, 0].extremes()\n# =&gt; {min: -1, max: 3}\n</code></pre>","source":"Array.prototype.extremes = function(fn) {\n  var max, maxResult, min, minResult;\n  fn || (fn = function(n) {\n    return n;\n  });\n  min = max = void 0;\n  minResult = maxResult = void 0;\n  this.each(function(object) {\n    var result;\n    result = fn(object);\n    if (min != null) {\n      if (result < minResult) {\n        min = object;\n        minResult = result;\n      }\n    } else {\n      min = object;\n      minResult = result;\n    }\n    if (max != null) {\n      if (result > maxResult) {\n        max = object;\n        return maxResult = result;\n      }\n    } else {\n      max = object;\n      return maxResult = result;\n    }\n  });\n  return {\n    min: min,\n    max: max\n  };\n};","params":[{"fn":{"type":"Function","description":"An optional funtion used to evaluate each element to calculate its value for determining extremes.","optional":true}}],"returns":"{Object} {min: minElement, max: maxElement}","see":null},"wrap":{"summary":"<p>Pretend the array is a circle and grab a new array containing length elements.<br />If length is not given return the element at start, again assuming the array<br />is a circle.</p>","code_sample":"<pre><code>[1, 2, 3].wrap(-1)\n# =&gt; 3\n\n[1, 2, 3].wrap(6)\n# =&gt; 1\n\n[\"l\", \"o\", \"o\", \"p\"].wrap(0, 16)\n# =&gt; [\"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\", \"l\", \"o\", \"o\", \"p\"]\n</code></pre>","source":"Array.prototype.wrap = function(start, length) {\n  var end, i, result;\n  if (length != null) {\n    end = start + length;\n    i = start;\n    result = [];\n    while (i++ < end) {\n      result.push(this[i.mod(this.length)]);\n    }\n    return result;\n  } else {\n    return this[start.mod(this.length)];\n  }\n};","params":[{"start":{"type":"Number","description":"The index to start wrapping at, or the index of the sole element to return if no length is given.","optional":false}},{"length":{"type":"Number","description":"Optional length determines how long result array should be.","optional":true}}],"returns":"{Object} or {Array} The element at start mod array.length, or an array of length elements, starting from start and wrapping.","see":null},"partition":{"summary":"<p>Partitions the elements into two groups: those for which the iterator returns<br />true, and those for which it returns false.</p>","code_sample":"<pre><code>[evens, odds] = [1, 2, 3, 4].partition (n) -&gt;\n  n.even()\n\nevens\n# =&gt; [2, 4]\n\nodds\n# =&gt; [1, 3]\n</code></pre>","source":"Array.prototype.partition = function(iterator, context) {\n  var falseCollection, trueCollection;\n  trueCollection = [];\n  falseCollection = [];\n  this.each(function(element) {\n    if (iterator.call(context, element)) {\n      return trueCollection.push(element);\n    } else {\n      return falseCollection.push(element);\n    }\n  });\n  return [trueCollection, falseCollection];\n};","params":[{"iterator":{"type":"Function","description":"","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} An array in the form of [trueCollection, falseCollection]","see":null},"select":{"summary":"<p>Return the group of elements for which the return value of the iterator is true.</p>","code_sample":"","source":"Array.prototype.select = function(iterator, context) {\n  return this.partition(iterator, context)[0];\n};","params":[{"iterator":{"type":"Function","description":"The iterator receives each element in turn as the first agument.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} An array containing the elements for which the iterator returned true.","see":null},"without":{"summary":"<p>Return the group of elements that are not in the passed in set.</p>","code_sample":"<pre><code>[1, 2, 3, 4].without ([2, 3])\n# =&gt; [1, 4]\n</code></pre>","source":"Array.prototype.without = function(values) {\n  return this.reject(function(element) {\n    return values.include(element);\n  });\n};","params":[{"values":{"type":"Array","description":"List of elements to exclude.","optional":false}}],"returns":"{Array} An array containing the elements that are not passed in.","see":null},"reject":{"summary":"<p>Return the group of elements for which the return value of the iterator is false.</p>","code_sample":"","source":"Array.prototype.reject = function(iterator, context) {\n  return this.partition(iterator, context)[1];\n};","params":[{"iterator":{"type":"Function","description":"The iterator receives each element in turn as the first agument.","optional":false}},{"context":{"type":"Object","description":"Optional context parameter to be used as `this` when calling the iterator function.","optional":true}}],"returns":"{Array} An array containing the elements for which the iterator returned false.","see":null},"inject":{"summary":"<p>Combines all elements of the array by applying a binary operation.<br />for each element in the arra the iterator is passed an accumulator<br />value (memo) and the element.</p>","code_sample":"","source":"Array.prototype.inject = function(initial, iterator) {\n  this.each(function(element) {\n    return initial = iterator(initial, element);\n  });\n  return initial;\n};","params":[],"returns":"{Object} The result of a","see":null},"sum":{"summary":"<p>Add all the elements in the array.</p>","code_sample":"<pre><code>[1, 2, 3, 4].sum()\n# =&gt; 10\n</code></pre>","source":"Array.prototype.sum = function() {\n  return this.inject(0, function(sum, n) {\n    return sum + n;\n  });\n};","params":[],"returns":"{Number} The sum of the elements in the array.","see":null},"product":{"summary":"<p>Multiply all the elements in the array.</p>","code_sample":"<pre><code>[1, 2, 3, 4].product()\n# =&gt; 24\n</code></pre>","source":"Array.prototype.product = function() {\n  return this.inject(1, function(product, n) {\n    return product * n;\n  });\n};","params":[],"returns":"{Number} The product of the elements in the array.","see":null},"zip":{"summary":"<p>Merges together the values of each of the arrays with the values at the corresponding position.</p>","code_sample":"<pre><code>['a', 'b', 'c'].zip([1, 2, 3])\n# =&gt; [['a', 1], ['b', 2], ['c', 3]]\n</code></pre>","source":"Array.prototype.zip = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.map(function(element, index) {\n    var output;\n    output = args.map(function(arr) {\n      return arr[index];\n    });\n    output.unshift(element);\n    return output;\n  });\n};\n;","params":[],"returns":"{Array} Array groupings whose values are arranged by their positions in the original input arrays.","see":null},"pop":{"summary":"<p>Removes the last element from an array and returns that element.</p>","code_sample":"<p><code><br /><i>array</i>.pop()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"push":{"summary":"<p>Mutates an array by appending the given elements and returning the new length of<br />the array.</p>","code_sample":"<p><code><em>array</em>.push(<em>element1</em>, ..., <em>elementN</em>)</code></p>","source":null,"params":[{"...,":{"type":"element1, ","description":"elementN The elements to add to the end of the array.","optional":false}}],"returns":null,"see":null},"reverse":{"summary":"<p>Reverses an array in place.  The first array element becomes the last and the<br />last becomes the first.</p>","code_sample":"<p><code>array.reverse()</code></p>","source":null,"params":[],"returns":null,"see":null},"shift":{"summary":"<p>Removes the first element from an array and returns that element. This method<br />changes the length of the array.</p>","code_sample":"<p><code><em>array</em>.shift()</code></p>","source":null,"params":[],"returns":null,"see":null},"sort":{"summary":"<p>Sorts the elements of an array in place.</p>","code_sample":"<p><code><em>array</em>.sort([<em>compareFunction</em>])</code></p>","source":null,"params":[{"Specifies":{"type":"compareFunction","description":"a function that defines the sort order. If","optional":false}}],"returns":null,"see":null},"splice":{"summary":"<p>Changes the content of an array, adding new elements while removing old<br />elements.</p>","code_sample":"<p><code><em>array</em>.splice(<em>index</em>, <em>howMany</em>[, <em>element1</em>[, ...[, <em>elementN</em>]]])</code></p>","source":null,"params":[{"Index":{"type":"index","description":"at which to start changing the array. If negative, will","optional":false}},{"An":{"type":"howMany","description":"integer indicating the number of old array elements to","optional":false}},{"...,":{"type":"element1, ","description":"elementN The elements to add to the array. If you don't","optional":false}}],"returns":null,"see":null},"unshift":{"summary":"<p>Adds one or more elements to the beginning of an array and returns the new<br />length of the array.</p>","code_sample":"<p><code><em>arrayName</em>.unshift(<em>element1</em>, ..., <em>elementN</em>) </code></p>","source":null,"params":[{"...,":{"type":"element1, ","description":"elementN The elements to add to the front of the array.","optional":false}}],"returns":null,"see":null},"concat":{"summary":"<p>Returns a new array comprised of this array joined with other array(s) and/or<br />value(s).</p>","code_sample":"<p><code><em>array</em>.concat(<em>value1</em>, <em>value2</em>, ..., <em>valueN</em>)</code></p>","source":null,"params":[{"Arrays":{"type":"valueN","description":"and/or values to concatenate to the resulting array.","optional":false}}],"returns":null,"see":null},"join":{"summary":"<p>Joins all elements of an array into a string.</p>","code_sample":"<p><code><em>array</em>.join(<em>separator</em>)</code></p>","source":null,"params":[{"Specifies":{"type":"separator","description":"a string to separate each element of the array. The","optional":false}}],"returns":null,"see":null},"slice":{"summary":"<p>Returns a one-level deep copy of a portion of an array.</p>","code_sample":"<p><code><em>array</em>.slice(<em>begin</em>[, <em>end</em>])</code></p>","source":null,"params":[{"Zero-based":{"type":"begin","description":"index at which to begin extraction.As a negative index,","optional":false}},{"Zero-based":{"type":"end","description":"index at which to end extraction. slice extracts up to","optional":false}}],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null},"indexOf":{"summary":"<p>Returns the first index at which a given element can be found in the array, or<br />-1 if it is not present.</p>","code_sample":"<p><code><em>array</em>.indexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>","source":null,"params":[{"fromIndex":{"type":"searchElement","description":"Element to locate in the array.The index at","optional":false}}],"returns":null,"see":null},"lastIndexOf":{"summary":"<p>Returns the last index at which a given element can be found in the array, or -1<br />if it is not present. The array is searched backwards, starting at fromIndex.</p>","code_sample":"<p><code><em>array</em>.lastIndexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>","source":null,"params":[{"fromIndex":{"type":"searchElement","description":"Element to locate in the array.The index at","optional":false}}],"returns":null,"see":null},"filter":{"summary":"<p>Creates a new array with all elements that pass the test implemented by the<br />provided function.</p>","code_sample":"<p><code><em>array</em>.filter(<em>callback</em>[, <em>thisObject</em>])</code></p>","source":null,"params":[{"thisObject":{"type":"callback","description":"Function to test each element of the array.Object to","optional":false}}],"returns":null,"see":null},"forEach":{"summary":"<p>Executes a provided function once per array element.</p>","code_sample":"<p><code><em>array</em>.forEach(<em>callback</em>[, <em>thisObject</em>])</code></p>","source":null,"params":[{"thisObject":{"type":"callback","description":"Function to execute for each element.Object to use","optional":false}}],"returns":null,"see":null},"every":{"summary":"<p>Tests whether all elements in the array pass the test implemented by the<br />provided function.</p>","code_sample":"<p><code><em>array</em>.every(<em>callback</em>[, <em>thisObject</em>])</code></p>","source":null,"params":[{"Function":{"type":"callbackthisObject","description":"to test for each element.Object to use as","optional":false}}],"returns":null,"see":null},"some":{"summary":"<p>Tests whether some element in the array passes the test implemented by the<br />provided function.</p>","code_sample":"<p><code><em>array</em>.some(<em>callback</em>[, <em>thisObject</em>])</code></p>","source":null,"params":[{"thisObject":{"type":"callback","description":"Function to test for each element.Object to use as","optional":false}}],"returns":null,"see":null},"reduce":{"summary":"<p>Apply a function against an accumulator and each value of the array (from<br />left-to-right) as to reduce it to a single value.</p>","code_sample":"<p><code><em>array</em>.reduce(<em>callback</em>[, <em>initialValue</em>])</code></p>","source":null,"params":[{"Function":{"type":"callbackinitialValue","description":"to execute on each value in the","optional":false}}],"returns":null,"see":null},"reduceRight":{"summary":"<p>Apply a function simultaneously against two values of the array (from<br />right-to-left) as to reduce it to a single value.</p>","code_sample":"<p><code><em>array</em>.reduceRight(<em>callback</em>[, <em>initialValue</em>])</code></p>","source":null,"params":[{"initialValue":{"type":"callback","description":"Function to execute on each value in the","optional":false}}],"returns":null,"see":null}}}},{"Function":{"method_list":["debounce","apply","bind","call","toString"],"methods":{"debounce":{"summary":"<p>Calling a debounced function will postpone its execution until after<br />wait milliseconds have elapsed since the last time the function was<br />invoked. Useful for implementing behavior that should only happen after<br />the input has stopped arriving. For example: rendering a preview of a<br />Markdown comment, recalculating a layout after the window has stopped<br />being resized...</p>","code_sample":"<pre><code>lazyLayout = calculateLayout.debounce(300)\n$(window).resize(lazyLayout)\n</code></pre>","source":"Function.prototype.debounce = function(wait) {\n  var func, timeout;\n  timeout = null;\n  func = this;\n  return function() {\n    var args, context, later;\n    context = this;\n    args = arguments;\n    later = function() {\n      timeout = null;\n      return func.apply(context, args);\n    };\n    clearTimeout(timeout);\n    return timeout = setTimeout(later, wait);\n  };\n};\n\nFunction.prototype.returning = function(x) {\n  var func;\n  func = this;\n  return function() {\n    func.apply(this, arguments);\n    return x;\n  };\n};\n\nFunction.prototype.delay = function() {\n  var args, func, wait;\n  wait = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  func = this;\n  return setTimeout(function() {\n    return func.apply(null, args);\n  }, wait);\n};\n\nFunction.prototype.defer = function() {\n  var args;\n  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n  return this.delay.apply(this, [1].concat(args));\n};\n;","params":[],"returns":"{Function} The debounced version of this function.","see":null},"apply":{"summary":"<p>Calls a function with a given this value and arguments provided as an array.</p>","code_sample":"<p><code><em>fun</em>.apply(<em>thisArg</em>[, <em>argsArray</em>])</code></p>","source":null,"params":[{"Determines":{"type":"thisArg","description":"the value of this inside fun. If thisArg is null or","optional":false}},{"An":{"type":"argsArray","description":"argument array for the object, specifying the arguments","optional":false}}],"returns":null,"see":null},"bind":{"summary":"<p>Creates a new function that, when called, itself calls this function in the<br />context of the provided this value, with a given sequence of arguments preceding<br />any provided when the new function was called.</p>","code_sample":"<p><code><em>fun</em>.bind(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>","source":null,"params":[{"arg2,":{"type":"thisValuearg1, ","description":"... The value to be passed as the this parameter to","optional":false}}],"returns":null,"see":null},"call":{"summary":"<p>Calls a function with a given this value and arguments provided individually.</p>","code_sample":"<p><code><em>fun</em>.call(<em>thisArg</em>[, <em>arg1</em>[, <em>arg2</em>[, ...]]])</code></p>","source":null,"params":[{"Determines":{"type":"thisArg","description":"the value of this inside fun. If thisArg is null or","optional":false}},{"arg2,":{"type":"arg1, ","description":"... Arguments for the object.","optional":false}}],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null}}}},{"Number":{"method_list":["abs","ceil","floor","round","circularPoint","clamp","mod","sign","even","odd","times","snap","primeFactors","toColorPart","approach","approachByRatio","approachRotation","constrainRotation","d","toExponential","toFixed","toLocaleString","toPrecision","toString","valueOf"],"methods":{"abs":{"summary":"<p>Returns the absolute value of this number.</p>","code_sample":"<pre><code>(-4).abs()\n# =&gt; 4\n</code></pre>","source":"Number.prototype.abs = function() {\n  return Math.abs(this);\n};","params":[],"returns":"{Number} The absolute value of the number.","see":null},"ceil":{"summary":"<p>Returns the mathematical ceiling of this number.</p>","code_sample":"<pre><code>4.9.ceil()\n# =&gt; 5\n\n4.2.ceil()\n# =&gt; 5\n\n(-1.2).ceil()\n# =&gt; -1\n</code></pre>","source":"Number.prototype.ceil = function() {\n  return Math.ceil(this);\n};","params":[],"returns":"{Number} The number truncated to the nearest integer of greater than or equal value.","see":null},"floor":{"summary":"<p>Returns the mathematical floor of this number.</p>","code_sample":"<pre><code>4.9.floor()\n# =&gt; 4\n\n4.2.floor()\n# =&gt; 4\n\n(-1.2).floor()\n# =&gt; -2\n</code></pre>","source":"Number.prototype.floor = function() {\n  return Math.floor(this);\n};","params":[],"returns":"{Number} The number truncated to the nearest integer of less than or equal value.","see":null},"round":{"summary":"<p>Returns this number rounded to the nearest integer.</p>","code_sample":"<pre><code>4.5.round()\n# =&gt; 5\n\n4.4.round()\n# =&gt; 4\n</code></pre>","source":"Number.prototype.round = function() {\n  return Math.round(this);\n};","params":[],"returns":"{Number} The number rounded to the nearest integer.","see":null},"circularPoint":{"summary":"<p>Get a bunch of points equally spaced around the unit circle.</p>","code_sample":"<pre><code>4.circularPoints (p) -&gt;\n\n# p gets Point(1, 0), Point(0, 1), Point(-1, 0), Point(0, -1)\n</code></pre>","source":"Number.prototype.circularPoints = function(block) {\n  var n;\n  n = this;\n  return n.times(function(i) {\n    return block(Point.fromAngle((i / n).turns), i);\n  });\n};","params":[],"returns":null,"see":null},"clamp":{"summary":"<p>Returns a number whose value is limited to the given range.</p>","code_sample":"<pre><code># limit the output of this computation to between 0 and 255\n(2 * 255).clamp(0, 255)\n# =&gt; 255\n</code></pre>","source":"Number.prototype.clamp = function(min, max) {\n  if ((min != null) && (max != null)) {\n    return Math.min(Math.max(this, min), max);\n  } else if (min != null) {\n    return Math.max(this, min);\n  } else if (max != null) {\n    return Math.min(this, max);\n  } else {\n    return this;\n  }\n};","params":[{"min":{"type":"Number","description":"The lower boundary of the output range","optional":false}},{"max":{"type":"Number","description":"The upper boundary of the output range","optional":false}}],"returns":"{Number} A number in the range [min, max]","see":null},"mod":{"summary":"<p>A mod method useful for array wrapping. The range of the function is<br />constrained to remain in bounds of array indices.</p>","code_sample":"<pre><code>(-1).mod(5)\n# =&gt; 4\n</code></pre>","source":"Number.prototype.mod = function(base) {\n  var result;\n  result = this % base;\n  if (result < 0 && base > 0) result += base;\n  return result;\n};","params":[{"base":{"type":"Number","description":"","optional":false}}],"returns":"{Number} An integer between 0 and (base - 1) if base is positive.","see":null},"sign":{"summary":"<p>Get the sign of this number as an integer (1, -1, or 0).</p>","code_sample":"<pre><code>(-5).sign()\n# =&gt; -1\n\n0.sign()\n# =&gt; 0\n\n5.sign()\n# =&gt; 1\n</code></pre>","source":"Number.prototype.sign = function() {\n  if (this > 0) {\n    return 1;\n  } else if (this < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};","params":[],"returns":"{Number} The sign of this number, 0 if the number is 0.","see":null},"even":{"summary":"<p>Returns true if this number is even (evenly divisible by 2).</p>","code_sample":"<pre><code>2.even()\n# =&gt; true\n\n3.even()\n# =&gt; false\n\n0.even()\n# =&gt; true\n</code></pre>","source":"Number.prototype.even = function() {\n  return this % 2 === 0;\n};","params":[],"returns":"{Boolean} true if this number is an even integer, false otherwise.","see":null},"odd":{"summary":"<p>Returns true if this number is odd (has remainder of 1 when divided by 2).</p>","code_sample":"<pre><code>2.odd()\n# =&gt; false\n\n3.odd()\n# =&gt; true\n\n0.odd()\n# =&gt; false\n</code></pre>","source":"Number.prototype.odd = function() {\n  if (this > 0) {\n    return this % 2 === 1;\n  } else {\n    return this % 2 === -1;\n  }\n};","params":[],"returns":"{Boolean} true if this number is an odd integer, false otherwise.","see":null},"times":{"summary":"<p>Calls iterator the specified number of times, passing in the number of the<br />current iteration as a parameter: 0 on first call, 1 on the second call, etc.</p>","code_sample":"<pre><code>output = []\n\n5.times (n) -&gt;\n  output.push(n)\n\noutput\n# =&gt; [0, 1, 2, 3, 4]\n</code></pre>","source":"Number.prototype.times = function(iterator, context) {\n  var i;\n  i = -1;\n  while (++i < this) {\n    iterator.call(context, i);\n  }\n  return i;\n};","params":[{"iterator":{"type":"Function","description":"The iterator takes a single parameter, the number of the current iteration.","optional":false}},{"context":{"type":"Object","description":"The optional context parameter specifies an object to treat as `this` in the iterator block.","optional":true}}],"returns":"{Number} The number of times the iterator was called.","see":null},"snap":{"summary":"<p>Returns the the nearest grid resolution less than or equal to the number.</p>","code_sample":"<pre><code>7.snap(8)\n# =&gt; 0\n\n4.snap(8)\n# =&gt; 0\n\n12.snap(8)\n# =&gt; 8\n</code></pre>","source":"Number.prototype.snap = function(resolution) {\n  var n;\n  n = this / resolution;\n  1 / 1;\n  return n.floor() * resolution;\n};","params":[{"resolution":{"type":"Number","description":"The grid resolution to snap to.","optional":false}}],"returns":"{Number} The nearest multiple of resolution lower than the number.","see":null},"primeFactors":{"summary":"<p>In number theory, integer factorization or prime factorization is the<br />breaking down of a composite number into smaller non-trivial divisors,<br />which when multiplied together equal the original integer.</p>","code_sample":"<p>Floors the number for purposes of factorization.</p>\n\n<pre><code>60.primeFactors()\n# =&gt; [2, 2, 3, 5]\n\n37.primeFactors()\n# =&gt; [37]\n</code></pre>","source":"Number.prototype.primeFactors = function() {\n  var factors, i, iSquared, n;\n  factors = [];\n  n = Math.floor(this);\n  if (n === 0) return;\n  if (n < 0) {\n    factors.push(-1);\n    n /= -1;\n  }\n  i = 2;\n  iSquared = i * i;\n  while (iSquared < n) {\n    while ((n % i) === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i += 1;\n    iSquared = i * i;\n  }\n  if (n !== 1) factors.push(n);\n  return factors;\n};","params":[],"returns":"{Array} An array containing the factorization of this number.","see":null},"toColorPart":{"summary":"<p>Returns the two character hexidecimal<br />representation of numbers 0 through 255.</p>","code_sample":"<pre><code>255.toColorPart()\n# =&gt; \"ff\"\n\n0.toColorPart()\n# =&gt; \"00\"\n\n200.toColorPart()\n# =&gt; \"c8\"\n</code></pre>","source":"Number.prototype.toColorPart = function() {\n  var s;\n  s = parseInt(this.clamp(0, 255), 10).toString(16);\n  if (s.length === 1) s = '0' + s;\n  return s;\n};","params":[],"returns":"{String} Hexidecimal representation of the number","see":null},"approach":{"summary":"<p>Returns a number that is maxDelta closer to target.</p>","code_sample":"<pre><code>255.approach(0, 5)\n# =&gt; 250\n\n5.approach(0, 10)\n# =&gt; 0\n</code></pre>","source":"Number.prototype.approach = function(target, maxDelta) {\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};","params":[],"returns":"{Number} A number maxDelta toward target","see":null},"approachByRatio":{"summary":"<p>Returns a number that is closer to the target by the ratio.</p>","code_sample":"<pre><code>255.approachByRatio(0, 0.1)\n# =&gt; 229.5\n</code></pre>","source":"Number.prototype.approachByRatio = function(target, ratio) {\n  return this.approach(target, this * ratio);\n};","params":[],"returns":"{Number} A number toward target by the ratio","see":null},"approachRotation":{"summary":"<p>Returns a number that is closer to the target angle by the delta.</p>","code_sample":"<pre><code>Math.PI.approachRotation(0, Math.PI/4)\n# =&gt; 2.356194490192345 # this is (3/4) * Math.PI, which is (1/4) * Math.PI closer to 0 from Math.PI\n</code></pre>","source":"Number.prototype.approachRotation = function(target, maxDelta) {\n  while (target > this + Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < this - Math.PI) {\n    target += Math.TAU;\n  }\n  return (target - this).clamp(-maxDelta, maxDelta) + this;\n};","params":[],"returns":"{Number} A number toward the target angle by maxDelta","see":null},"constrainRotation":{"summary":"<p>Constrains a rotation to between -PI and PI.</p>","code_sample":"<pre><code>(9/4 * Math.PI).constrainRotation()\n# =&gt; 0.7853981633974483 # this is (1/4) * Math.PI\n</code></pre>","source":"Number.prototype.constrainRotation = function() {\n  var target;\n  target = this;\n  while (target > Math.PI) {\n    target -= Math.TAU;\n  }\n  while (target < -Math.PI) {\n    target += Math.TAU;\n  }\n  return target;\n};","params":[],"returns":"{Number} This number constrained between -PI and PI.","see":null},"d":{"summary":"<p>The mathematical d operator. Useful for simulating dice rolls.</p>","code_sample":"<pre><code># Simulates rolling 5 6-sided dice\n5.d(6)\n\n# Simulates rolling 3 20-sided dice\n3.d(20)\n</code></pre>","source":"Number.prototype.d = function(sides) {\n  var sum;\n  sum = 0;\n  this.times(function() {\n    return sum += rand(sides) + 1;\n  });\n  return sum;\n};","params":[{"sides":{"type":"Number","description":"Number of sides on the simulated die","optional":false}}],"returns":"{Number} Sum of rolling `this` many `sides`-sided dice","see":null},"toExponential":{"summary":"<p>Returns a string representing the Number object in exponential notation</p>","code_sample":"<p><code><i>number</i>.toExponential( [<em>fractionDigits</em>] )</code></p>","source":null,"params":[{"":{"type":"fractionDigits","description":"","optional":false}}],"returns":null,"see":null},"toFixed":{"summary":"<p>Formats a number using fixed-point notation</p>","code_sample":"<p><code><i>number</i>.toFixed( [<em>digits</em>] )</code></p>","source":null,"params":[{"The":{"type":"digits","description":"number of digits to appear after the decimal point; this","optional":false}}],"returns":null,"see":null},"toLocaleString":{"summary":"<p>Converts a date to a string, using the operating system's locale's conventions.</p>","code_sample":"<p><code><br />toLocaleString()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"toPrecision":{"summary":"<p>Returns a string representing the Number object to the specified precision.</p>","code_sample":"<p><code><em>number</em>.toPrecision( [ <em>precision</em> ] )</code></p>","source":null,"params":[{"An":{"type":"precision","description":"integer specifying the number of significant digits.","optional":false}}],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null},"valueOf":{"summary":"<p>Returns the primitive value of a String object.</p>","code_sample":"<p><code><em>string</em>.valueOf()</code></p>","source":null,"params":[],"returns":null,"see":null}}}},{"Object":{"method_list":[null,null,null,null,null,"hasOwnProperty"],"methods":{"":{"summary":"<p>Modify the object's properties over time.</p>","code_sample":"<pre><code>    player = GameObject()\n\n    player.tween 30,\n      x: 50\n      y: 50\n      easing: \"quadratic\"\n    &lt;/pre&gt;&lt;/code&gt;\n\n    &lt;code&gt;&lt;pre&gt;\n    player = GameObject()\n\n    player.tween 30,\n      x: 150\n      y: 150\n      complete: -&gt;\n        player.dance()\n\n@name tween\n@methodOf Tween#\n@param {Number} duration How long (in frames) until the object's properties reach their final values.\n@param {Object} properties Which properties to tween. Set the `easing` property to specify the easing function.\n</code></pre>","source":"tween: function(duration, properties) {\n      var complete, easing, property, target, _results;\n      properties = Object.extend({}, properties);\n      easing = properties.easing || \"linear\";\n      complete = properties.complete;\n      delete properties.easing;\n      delete properties.complete;\n      _results = [];\n      for (property in properties) {\n        target = properties[property];\n        _results.push(I.activeTweens[property] = {\n          complete: complete,\n          end: target,\n          start: I[property],\n          easing: easing,\n          duration: duration,\n          startTime: I.age,\n          endTime: I.age + duration\n        });\n      }\n      return _results;\n    }\n  };\n};\n;\n;","params":[],"returns":null,"see":null},"hasOwnProperty":{"summary":"<p>Returns a boolean indicating whether the object has the specified property.</p>","code_sample":"<p><code><em>obj</em>.hasOwnProperty(<em>prop</em>)</code></p>","source":null,"params":[{"The":{"type":"prop","description":"name of the property to test.","optional":false}}],"returns":null,"see":null}}}},{"String":{"method_list":["blank","camelize","capitalize","constantize","humanize","isString","parse","startsWith","titleize","underscore","withoutExtension","charAt","charCodeAt","concat","indexOf","lastIndexOf","localeCompare","match","replace","search","slice","split","substr","substring","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toString","toUpperCase","trim","valueOf"],"methods":{"blank":{"summary":"<p>Returns true if this string only contains whitespace characters.</p>","code_sample":"<pre><code>\"\".blank()\n# =&gt; true\n\n\"hello\".blank()\n# =&gt; false\n\n\"   \".blank()\n# =&gt; true\n</code></pre>","source":"String.prototype.blank = function() {\n  return /^\\s*$/.test(this);\n};","params":[],"returns":"{Boolean} Whether or not this string is blank.","see":null},"camelize":{"summary":"<p>Returns a new string that is a camelCase version.</p>","code_sample":"<pre><code>\"camel_case\".camelize()\n\"camel-case\".camelize()\n\"camel case\".camelize()\n\n# =&gt; \"camelCase\"\n</code></pre>","source":"String.prototype.camelize = function() {\n  return this.trim().replace(/(\\-|_|\\s)+(.)?/g, function(match, separator, chr) {\n    if (chr) {\n      return chr.toUpperCase();\n    } else {\n      return '';\n    }\n  });\n};","params":[],"returns":"{String} A new string. camelCase version of `this`.","see":null},"capitalize":{"summary":"<p>Returns a new string with the first letter capitalized and the rest lower cased.</p>","code_sample":"<pre><code>\"capital\".capitalize()\n\"cAPITAL\".capitalize()\n\"cApItAl\".capitalize()\n\"CAPITAL\".capitalize()\n\n# =&gt; \"Capital\"\n</code></pre>","source":"String.prototype.capitalize = function() {\n  return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();\n};","params":[],"returns":"{String} A new string. Capitalized version of `this`","see":null},"constantize":{"summary":"<p>Return the class or constant named in this string.</p>","code_sample":"<pre><code>\"Constant\".constantize()\n# =&gt; Constant\n# notice this isn't a string. Useful for calling methods on class with the same name as `this`.\n</code></pre>","source":"String.prototype.constantize = function() {\n  if (this.match(/[A-Z][A-Za-z0-9]*/)) {\n    eval(\"var that = \" + this);\n    return that;\n  } else {\n    throw \"String#constantize: '\" + this + \"' is not a valid constant name.\";\n  }\n};","params":[],"returns":"{Object} The class or constant named in this string.","see":null},"humanize":{"summary":"<p>Returns a new string that is a more human readable version.</p>","code_sample":"<pre><code>\"player_id\".humanize()\n# =&gt; \"Player\"\n\n\"player_ammo\".humanize()\n# =&gt; \"Player ammo\"\n</code></pre>","source":"String.prototype.humanize = function() {\n  return this.replace(/_id$/, \"\").replace(/_/g, \" \").capitalize();\n};","params":[],"returns":"{String} A new string. Replaces _id and _ with \"\" and capitalizes the word.","see":null},"isString":{"summary":"<p>Returns true.</p>","code_sample":"","source":"String.prototype.isString = function() {\n  return true;\n};","params":[],"returns":"{Boolean} true","see":null},"parse":{"summary":"<p>Parse this string as though it is JSON and return the object it represents. If it<br />is not valid JSON returns the string itself.</p>","code_sample":"<pre><code># this is valid json, so an object is returned\n'{\"a\": 3}'.parse()\n# =&gt; {a: 3}\n\n# double quoting instead isn't valid JSON so a string is returned\n\"{'a': 3}\".parse()\n# =&gt; \"{'a': 3}\"\n</code></pre>","source":"String.prototype.parse = function() {\n  try {\n    return JSON.parse(this.toString());\n  } catch (e) {\n    return this.toString();\n  }\n};","params":[],"returns":"{Object} Returns an object from the JSON this string contains. If it is not valid JSON returns the string itself.","see":null},"startsWith":{"summary":"<p>Returns true if this string starts with the given string.</p>","code_sample":"","source":"String.prototype.startsWith = function(str) {\n  return this.lastIndexOf(str, 0) === 0;\n};","params":[{"str":{"type":"String","description":"The string to check.","optional":false}}],"returns":"{Boolean} True if this string starts with the given string, false otherwise.","see":null},"titleize":{"summary":"<p>Returns a new string in Title Case.</p>","code_sample":"<pre><code>\"title-case\".titleize()\n# =&gt; \"Title Case\"\n\n\"title case\".titleize()\n# =&gt; \"Title Case\"\n</code></pre>","source":"String.prototype.titleize = function() {\n  return this.split(/[- ]/).map(function(word) {\n    return word.capitalize();\n  }).join(' ');\n};","params":[],"returns":"{String} A new string. Title Cased.","see":null},"underscore":{"summary":"<p>Underscore a word, changing camelCased with under_scored.</p>","code_sample":"<pre><code>\"UNDERScore\".underscore()\n# =&gt; \"under_score\"\n\n\"UNDER-SCORE\".underscore()\n# =&gt; \"under_score\"\n\n\"UnDEr-SCorE\".underscore()\n# =&gt; \"un_d_er_s_cor_e\"\n</code></pre>","source":"String.prototype.underscore = function() {\n  return this.replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/-/g, '_').toLowerCase();\n};","params":[],"returns":"{String} A new string. Separated by _.","see":null},"withoutExtension":{"summary":"<p>Assumes the string is something like a file name and returns the<br />contents of the string without the extension.</p>","code_sample":"<pre><code>\"neat.png\".witouthExtension()\n# =&gt; \"neat\"\n</code></pre>","source":"String.prototype.withoutExtension = function() {\n  return this.replace(/\\.[^\\.]*$/, '');\n};\n\nString.prototype.parseHex = function() {\n  var alpha, hexString, i, rgb;\n  hexString = this.replace(/#/, '');\n  switch (hexString.length) {\n    case 3:\n    case 4:\n      if (hexString.length === 4) {\n        alpha = (parseInt(hexString.substr(3, 1), 16) * 0x11) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(i, 1), 16) * 0x11);\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n    case 6:\n    case 8:\n      if (hexString.length === 8) {\n        alpha = parseInt(hexString.substr(6, 2), 16) / 255;\n      } else {\n        alpha = 1;\n      }\n      rgb = (function() {\n        var _results;\n        _results = [];\n        for (i = 0; i <= 2; i++) {\n          _results.push(parseInt(hexString.substr(2 * i, 2), 16));\n        }\n        return _results;\n      })();\n      rgb.push(alpha);\n      return rgb;\n  }\n};\n;","params":[],"returns":"{String} A new string without the extension name.","see":null},"charAt":{"summary":"<p>Returns the specified character from a string.</p>","code_sample":"<p><code><em>string</em>.charAt(<em>index</em>)</code></p>","source":null,"params":[{"An":{"type":"index","description":"integer between 0 and 1 less than the length of the string.","optional":false}}],"returns":null,"see":null},"charCodeAt":{"summary":"<p>Returns the numeric Unicode value of the character at the given index (except<br />for unicode codepoints > 0x10000).</p>","code_sample":"","source":null,"params":[{"An":{"type":"index","description":"integer greater than 0 and less than the length of the string;","optional":false}}],"returns":null,"see":null},"concat":{"summary":"<p>Returns a new array comprised of this array joined with other array(s) and/or<br />value(s).</p>","code_sample":"<p><code><em>array</em>.concat(<em>value1</em>, <em>value2</em>, ..., <em>valueN</em>)</code></p>","source":null,"params":[{"Arrays":{"type":"valueN","description":"and/or values to concatenate to the resulting array.","optional":false}}],"returns":null,"see":null},"indexOf":{"summary":"<p>Returns the first index at which a given element can be found in the array, or<br />-1 if it is not present.</p>","code_sample":"<p><code><em>array</em>.indexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>","source":null,"params":[{"fromIndex":{"type":"searchElement","description":"Element to locate in the array.The index at","optional":false}}],"returns":null,"see":null},"lastIndexOf":{"summary":"<p>Returns the last index at which a given element can be found in the array, or -1<br />if it is not present. The array is searched backwards, starting at fromIndex.</p>","code_sample":"<p><code><em>array</em>.lastIndexOf(<em>searchElement</em>[, <em>fromIndex</em>])</code></p>","source":null,"params":[{"fromIndex":{"type":"searchElement","description":"Element to locate in the array.The index at","optional":false}}],"returns":null,"see":null},"localeCompare":{"summary":"<p>Returns a number indicating whether a reference string comes before or after or<br />is the same as the given string in sort order.</p>","code_sample":"<p><code> localeCompare(compareString) </code></p>","source":null,"params":[],"returns":null,"see":null},"match":{"summary":"<p>Used to retrieve the matches when matching a string against a regular<br />expression.</p>","code_sample":"<p><code><em>string</em>.match(<em>regexp</em>)</code></p>","source":null,"params":[{"A":{"type":"regexp","description":"regular expression object. If a non-RegExp object obj is passed,","optional":false}}],"returns":null,"see":null},"replace":{"summary":"<p>Returns a new string with some or all matches of a pattern replaced by a<br />replacement.  The pattern can be a string or a RegExp, and the replacement can<br />be a string or a function to be called for each match.</p>","code_sample":"<p><code><em>str</em>.replace(<em>regexp|substr</em>, <em>newSubStr|function[</em>, </code><code><em>flags]</em>);</code></p>","source":null,"params":[{"A":{"type":"regexp","description":"RegExp object. The match is replaced by the return value of","optional":false}},{"A":{"type":"substr","description":"String that is to be replaced by newSubStr.","optional":false}},{"The":{"type":"newSubStr","description":"String that replaces the substring received from parameter","optional":false}},{"A":{"type":"function","description":"function to be invoked to create the new substring (to put in","optional":false}},{"gimy":{"type":"flags","description":"","optional":false}}],"returns":null,"see":null},"search":{"summary":"<p>Executes the search for a match between a regular expression and this String<br />object.</p>","code_sample":"<p><code><em>string</em>.search(<em>regexp</em>)</code></p>","source":null,"params":[{"A":{"type":"regexp","description":"regular expression object. If a non-RegExp object obj is","optional":false}}],"returns":null,"see":null},"slice":{"summary":"<p>Returns a one-level deep copy of a portion of an array.</p>","code_sample":"<p><code><em>array</em>.slice(<em>begin</em>[, <em>end</em>])</code></p>","source":null,"params":[{"Zero-based":{"type":"begin","description":"index at which to begin extraction.As a negative index,","optional":false}},{"Zero-based":{"type":"end","description":"index at which to end extraction. slice extracts up to","optional":false}}],"returns":null,"see":null},"split":{"summary":"<p>Splits a String object into an array of strings by separating the string into<br />substrings.</p>","code_sample":"<p><code><em>string</em>.split([<em>separator</em>][, <em>limit</em>])</code></p>","source":null,"params":[{"Specifies":{"type":"separator","description":"the character to use for separating the string. The","optional":false}},{"Integer":{"type":"limit","description":"specifying a limit on the number of splits to be found.","optional":false}}],"returns":null,"see":null},"substr":{"summary":"<p>Returns the characters in a string beginning at the specified location through<br />the specified number of characters.</p>","code_sample":"<p><code><em>string</em>.substr(<em>start</em>[, <em>length</em>])</code></p>","source":null,"params":[{"Location":{"type":"start","description":"at which to begin extracting characters.","optional":false}},{"The":{"type":"length","description":"number of characters to extract.","optional":false}}],"returns":null,"see":null},"substring":{"summary":"<p>Returns a subset of a string between one index and another, or through the end<br />of the string.</p>","code_sample":"<p><code><em>string</em>.substring(<em>indexA</em>[, <em>indexB</em>])</code></p>","source":null,"params":[{"An":{"type":"indexA","description":"integer between 0 and one less than the length of the string.","optional":false}},{"(optional)":{"type":"indexB","description":"An integer between 0 and the length of the string.","optional":false}}],"returns":null,"see":null},"toLocaleLowerCase":{"summary":"<p>Returns the calling string value converted to lower case, according to any<br />locale-specific case mappings.</p>","code_sample":"<p><code> toLocaleLowerCase() </code></p>","source":null,"params":[],"returns":null,"see":null},"toLocaleUpperCase":{"summary":"<p>Returns the calling string value converted to upper case, according to any<br />locale-specific case mappings.</p>","code_sample":"<p><code> toLocaleUpperCase() </code></p>","source":null,"params":[],"returns":null,"see":null},"toLowerCase":{"summary":"<p>Returns the calling string value converted to lowercase.</p>","code_sample":"<p><code><em>string</em>.toLowerCase()</code></p>","source":null,"params":[],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null},"toUpperCase":{"summary":"<p>Returns the calling string value converted to uppercase.</p>","code_sample":"<p><code><em>string</em>.toUpperCase()</code></p>","source":null,"params":[],"returns":null,"see":null},"trim":{"summary":"<p>Removes whitespace from both ends of the string.</p>","code_sample":"<p><code><em>string</em>.trim()</code></p>","source":null,"params":[],"returns":null,"see":null},"valueOf":{"summary":"<p>Returns the primitive value of a String object.</p>","code_sample":"<p><code><em>string</em>.valueOf()</code></p>","source":null,"params":[],"returns":null,"see":null}}}},{"Boolean":{"method_list":["toString","valueOf"],"methods":{"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null},"valueOf":{"summary":"<p>Returns the primitive value of a String object.</p>","code_sample":"<p><code><em>string</em>.valueOf()</code></p>","source":null,"params":[],"returns":null,"see":null}}}},{"RegExp":{"method_list":["exec","test","toString"],"methods":{"exec":{"summary":"<p>Executes a search for a match in a specified string. Returns a result array, or<br />null.</p>","code_sample":"","source":null,"params":[{"The":{"type":"regexp","description":"name of the regular expression. It can be a variable name or","optional":false}},{"The":{"type":"str","description":"string against which to match the regular expression.","optional":false}}],"returns":null,"see":null},"test":{"summary":"<p>Executes the search for a match between a regular expression and a specified<br />string. Returns true or false.</p>","code_sample":"<p><code> <em>regexp</em>.test([<em>str</em>]) </code></p>","source":null,"params":[{"The":{"type":"regexp","description":"name of the regular expression. It can be a variable name or","optional":false}},{"The":{"type":"str","description":"string against which to match the regular expression.","optional":false}}],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null}}}},{"Date":{"method_list":["constructor","getDate","getDay","getFullYear","getHours","getMilliseconds","getMinutes","getMonth","getSeconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCFullYear","getUTCHours","getUTCMilliseconds","getUTCMinutes","getUTCMonth","getUTCSeconds","setDate","setFullYear","setHours","setMilliseconds","setMinutes","setMonth","setSeconds","setTime","setUTCDate","setUTCFullYear","setUTCHours","setUTCMilliseconds","setUTCMinutes","setUTCMonth","setUTCSeconds","toDateString","toJSON","toLocaleDateString","toLocaleString","toLocaleTimeString","toString","toTimeString","toUTCString"],"methods":{"constructor":{"summary":"<p>Returns a reference to the Date function that created the instance's prototype.<br />Note that the value of this property is a reference to the function itself, not<br />a string containing the function's name.</p>","code_sample":"","source":null,"params":[],"returns":null,"see":null},"getDate":{"summary":"<p>Returns the day of the month for the specified date according to local time.</p>","code_sample":"<p><code><br />getDate()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getDay":{"summary":"<p>Returns the day of the week for the specified date according to local time.</p>","code_sample":"<p><code><br />getDay()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getFullYear":{"summary":"<p>Returns the year of the specified date according to local time.</p>","code_sample":"<p><code><br />getFullYear()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getHours":{"summary":"<p>Returns the hour for the specified date according to local time.</p>","code_sample":"<p><code><br />getHours()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getMilliseconds":{"summary":"<p>Returns the milliseconds in the specified date according to local time.</p>","code_sample":"<p><code><br />getMilliseconds()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getMinutes":{"summary":"<p>Returns the minutes in the specified date according to local time.</p>","code_sample":"<p><code><br />getMinutes()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getMonth":{"summary":"<p>Returns the month in the specified date according to local time.</p>","code_sample":"<p><code><br />getMonth()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getSeconds":{"summary":"<p>Returns the seconds in the specified date according to local time.</p>","code_sample":"<p><code><br />getSeconds()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getTime":{"summary":"<p>Returns the numeric value corresponding to the time for the specified date<br />according to universal time.</p>","code_sample":"<p><code> getTime() </code></p>","source":null,"params":[],"returns":null,"see":null},"getTimezoneOffset":{"summary":"<p>Returns the time-zone offset from UTC, in minutes, for the current locale.</p>","code_sample":"<p><code> getTimezoneOffset() </code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCDate":{"summary":"<p>Returns the day (date) of the month in the specified date according to universal<br />time.</p>","code_sample":"<p><code><br />getUTCDate()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCDay":{"summary":"<p>Returns the day of the week in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCDay()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCFullYear":{"summary":"<p>Returns the year in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCFullYear()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCHours":{"summary":"<p>Returns the hours in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCHours<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCMilliseconds":{"summary":"<p>Returns the milliseconds in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCMilliseconds()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCMinutes":{"summary":"<p>Returns the minutes in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCMinutes()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCMonth":{"summary":"<p>Returns the month of the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCMonth()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"getUTCSeconds":{"summary":"<p>Returns the seconds in the specified date according to universal time.</p>","code_sample":"<p><code><br />getUTCSeconds()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"setDate":{"summary":"<p>Sets the day of the month for a specified date according to local time.</p>","code_sample":"<p><code> setDate(<em>dayValue</em>) </code></p>","source":null,"params":[{"An":{"type":"dayValue","description":"integer from 1 to 31, representing the day of the month.","optional":false}}],"returns":null,"see":null},"setFullYear":{"summary":"<p>Sets the full year for a specified date according to local time.</p>","code_sample":"<p><code><br />setFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>","source":null,"params":[{"An":{"type":"yearValue","description":"integer specifying the numeric value of the year, for","optional":false}},{"An":{"type":"monthValue","description":"integer between 0 and 11 representing the months January","optional":false}},{"An":{"type":"dayValue","description":"integer between 1 and 31 representing the day of the","optional":false}}],"returns":null,"see":null},"setHours":{"summary":"<p>Sets the hours for a specified date according to local time.</p>","code_sample":"<p><code><br />setHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>","source":null,"params":[{"An":{"type":"hoursValue","description":"integer between 0 and 23, representing the hour.","optional":false}},{"An":{"type":"minutesValue","description":"integer between 0 and 59, representing the minutes.","optional":false}},{"An":{"type":"secondsValue","description":"integer between 0 and 59, representing the seconds. If","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds. If","optional":false}}],"returns":null,"see":null},"setMilliseconds":{"summary":"<p>Sets the milliseconds for a specified date according to local time.</p>","code_sample":"<p><code><br />setMilliseconds(<i>millisecondsValue</i>)<br /></code></p>","source":null,"params":[{"A":{"type":"millisecondsValue","description":"number between 0 and 999, representing the","optional":false}}],"returns":null,"see":null},"setMinutes":{"summary":"<p>Sets the minutes for a specified date according to local time.</p>","code_sample":"<p><code><br />setMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>","source":null,"params":[{"An":{"type":"minutesValue","description":"integer between 0 and 59, representing the minutes.","optional":false}},{"An":{"type":"secondsValue","description":"integer between 0 and 59, representing the seconds. If","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds. If","optional":false}}],"returns":null,"see":null},"setMonth":{"summary":"<p>Set the month for a specified date according to local time.</p>","code_sample":"<p><code><br />setMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>","source":null,"params":[{"An":{"type":"monthValue","description":"integer between 0 and 11 (representing the months","optional":false}},{"An":{"type":"dayValue","description":"integer from 1 to 31, representing the day of the month.","optional":false}}],"returns":null,"see":null},"setSeconds":{"summary":"<p>Sets the seconds for a specified date according to local time.</p>","code_sample":"<p><code><br />setSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>","source":null,"params":[{"An":{"type":"secondsValue","description":"integer between 0 and 59.","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds.","optional":false}}],"returns":null,"see":null},"setTime":{"summary":"<p>Sets the Date object to the time represented by a number of milliseconds since<br />January 1, 1970, 00:00:00 UTC.</p>","code_sample":"<p><code><br />setTime(<i>timeValue</i>)<br /></code></p>","source":null,"params":[{"An":{"type":"timeValue","description":"integer representing the number of milliseconds since 1","optional":false}}],"returns":null,"see":null},"setUTCDate":{"summary":"<p>Sets the day of the month for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCDate(<i>dayValue</i>)<br /></code></p>","source":null,"params":[{"An":{"type":"dayValue","description":"integer from 1 to 31, representing the day of the month.","optional":false}}],"returns":null,"see":null},"setUTCFullYear":{"summary":"<p>Sets the full year for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCFullYear(<i>yearValue</i>[, <i>monthValue</i>[, <em>dayValue</em>]])<br /></code></p>","source":null,"params":[{"An":{"type":"yearValue","description":"integer specifying the numeric value of the year, for","optional":false}},{"An":{"type":"monthValue","description":"integer between 0 and 11 representing the months January","optional":false}},{"An":{"type":"dayValue","description":"integer between 1 and 31 representing the day of the","optional":false}}],"returns":null,"see":null},"setUTCHours":{"summary":"<p>Sets the hour for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCHours(<i>hoursValue</i>[, <i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]]])<br /></code></p>","source":null,"params":[{"An":{"type":"hoursValue","description":"integer between 0 and 23, representing the hour.","optional":false}},{"An":{"type":"minutesValue","description":"integer between 0 and 59, representing the minutes.","optional":false}},{"An":{"type":"secondsValue","description":"integer between 0 and 59, representing the seconds. If","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds. If","optional":false}}],"returns":null,"see":null},"setUTCMilliseconds":{"summary":"<p>Sets the milliseconds for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCMilliseconds(<i>millisecondsValue</i>)<br /></code></p>","source":null,"params":[{"A":{"type":"millisecondsValue","description":"number between 0 and 999, representing the","optional":false}}],"returns":null,"see":null},"setUTCMinutes":{"summary":"<p>Sets the minutes for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCMinutes(<i>minutesValue</i>[, <i>secondsValue</i>[, <em>msValue</em>]])<br /></code></p>","source":null,"params":[{"An":{"type":"minutesValue","description":"integer between 0 and 59, representing the minutes.","optional":false}},{"An":{"type":"secondsValue","description":"integer between 0 and 59, representing the seconds. If","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds. If","optional":false}}],"returns":null,"see":null},"setUTCMonth":{"summary":"<p>Sets the month for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCMonth(<i>monthValue</i>[, <em>dayValue</em>])<br /></code></p>","source":null,"params":[{"An":{"type":"monthValue","description":"integer between 0 and 11, representing the months","optional":false}},{"An":{"type":"dayValue","description":"integer from 1 to 31, representing the day of the month.","optional":false}}],"returns":null,"see":null},"setUTCSeconds":{"summary":"<p>Sets the seconds for a specified date according to universal time.</p>","code_sample":"<p><code><br />setUTCSeconds(<i>secondsValue</i>[, <em>msValue</em>])<br /></code></p>","source":null,"params":[{"An":{"type":"secondsValue","description":"integer between 0 and 59.","optional":false}},{"A":{"type":"msValue","description":"number between 0 and 999, representing the milliseconds.","optional":false}}],"returns":null,"see":null},"toDateString":{"summary":"<p>Returns the date portion of a Date object in human readable form in American<br />English.</p>","code_sample":"<p><code><em>date</em>.toDateString()</code></p>","source":null,"params":[],"returns":null,"see":null},"toJSON":{"summary":"<p>Returns a JSON representation of the Date object.</p>","code_sample":"<p><code><em>date</em>.prototype.toJSON()</code></p>","source":null,"params":[],"returns":null,"see":null},"toLocaleDateString":{"summary":"<p>Converts a date to a string, returning the \"date\" portion using the operating<br />system's locale's conventions.</p>","code_sample":"<p><code><br />toLocaleDateString()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"toLocaleString":{"summary":"<p>Converts a date to a string, using the operating system's locale's conventions.</p>","code_sample":"<p><code><br />toLocaleString()<br /></code></p>","source":null,"params":[],"returns":null,"see":null},"toLocaleTimeString":{"summary":"<p>Converts a date to a string, returning the \"time\" portion using the current<br />locale's conventions.</p>","code_sample":"<p><code> toLocaleTimeString() </code></p>","source":null,"params":[],"returns":null,"see":null},"toString":{"summary":"<p>Returns a string representing the specified Date object.</p>","code_sample":"<p><code> toString() </code></p>","source":null,"params":[],"returns":null,"see":null},"toTimeString":{"summary":"<p>Returns the time portion of a Date object in human readable form in American<br />English.</p>","code_sample":"<p><code><em>date</em>.toTimeString()</code></p>","source":null,"params":[],"returns":null,"see":null},"toUTCString":{"summary":"<p>Converts a date to a string, using the universal time convention.</p>","code_sample":"<p><code> toUTCString() </code></p>","source":";","params":[],"returns":null,"see":null}}}},{"Math":{"method_list":[null],"methods":{"":{"summary":"<p>Modify the object's properties over time.</p>","code_sample":"<pre><code>    player = GameObject()\n\n    player.tween 30,\n      x: 50\n      y: 50\n      easing: \"quadratic\"\n    &lt;/pre&gt;&lt;/code&gt;\n\n    &lt;code&gt;&lt;pre&gt;\n    player = GameObject()\n\n    player.tween 30,\n      x: 150\n      y: 150\n      complete: -&gt;\n        player.dance()\n\n@name tween\n@methodOf Tween#\n@param {Number} duration How long (in frames) until the object's properties reach their final values.\n@param {Object} properties Which properties to tween. Set the `easing` property to specify the easing function.\n</code></pre>","source":"tween: function(duration, properties) {\n      var complete, easing, property, target, _results;\n      properties = Object.extend({}, properties);\n      easing = properties.easing || \"linear\";\n      complete = properties.complete;\n      delete properties.easing;\n      delete properties.complete;\n      _results = [];\n      for (property in properties) {\n        target = properties[property];\n        _results.push(I.activeTweens[property] = {\n          complete: complete,\n          end: target,\n          start: I[property],\n          easing: easing,\n          duration: duration,\n          startTime: I.age,\n          endTime: I.age + duration\n        });\n      }\n      return _results;\n    }\n  };\n};\n;\n;","params":[],"returns":null,"see":null}}}},{"Drawable":{"method_list":["draw","beforeTransform","afterTransform"],"methods":{"draw":{"summary":"<p>Draws the <code>textShadow</code> text and the <code>text</code> text.</p>","code_sample":"","source":"var TextEffect;\n\nTextEffect = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    color: Color('green'),\n    duration: 40,\n    font: '20px Helvetica',\n    text: '100',\n    textShadow: Color('black'),\n    alpha: 1,\n    rotation: 0,\n    rotationalVelocity: 0,\n    velocity: Point(0, -1)\n  });\n  self = GameObject(I);\n  self.bind(\"update\", function() {\n    I.rotation += I.rotationalVelocity;\n    I.x += I.velocity.x;\n    I.y += I.velocity.y;\n    return I.alpha = 1 - (I.age / I.duration);\n  });\n  self.unbind(\"draw\");\n  self.bind(\"draw\", function(canvas) {\n    if (!I.color.channels) I.color = Color(I.color);\n    if (!I.textShadow.channels) I.textShadow = Color(I.textShadow);\n    I.color.a = I.alpha;\n    I.textShadow.a = I.alpha;\n    canvas.font(I.font);\n    canvas.drawText({\n      color: I.textShadow,\n      x: 1,\n      y: 1,\n      text: I.text\n    });\n    return canvas.drawText({\n      color: I.color,\n      x: 0,\n      y: 0,\n      text: I.text\n    });\n  });\n  return self;\n};\n;","params":[{"canvas":{"type":"PixieCanvas","description":"","optional":false}}],"returns":null,"see":null},"beforeTransform":{"summary":"<p>Triggered before the object should be drawn. A canvas is passed as<br />the first argument. This does not apply the current transform.</p>","code_sample":"","source":null,"params":[{"canvas":{"type":"PowerCanvas","description":"A reference to the canvas to draw on.","optional":false}}],"returns":null,"see":null},"afterTransform":{"summary":"<p>Triggered after the object should be drawn. A canvas is passed as<br />the first argument. This applies the current transform.</p>","code_sample":"","source":"var Drawable;\n\nDrawable = function(I, self) {\n  var setSizeCallback, _ref;\n  I || (I = {});\n  Object.reverseMerge(I, {\n    alpha: 1,\n    color: \"#196\",\n    hflip: false,\n    vflip: false,\n    spriteName: null,\n    zIndex: 0\n  });\n  setSizeCallback = function(sprite) {\n    I.width = sprite.width;\n    return I.height = sprite.height;\n  };\n  if ((_ref = I.sprite) != null ? typeof _ref.isString === \"function\" ? _ref.isString() : void 0 : void 0) {\n    if (I.sprite.indexOf(\"data:\") === 0) {\n      I.sprite = Sprite.fromURL(I.sprite, setSizeCallback);\n    } else {\n      I.sprite = Sprite.loadByName(I.sprite, setSizeCallback);\n    }\n  } else if (I.spriteName) {\n    I.sprite = Sprite.loadByName(I.spriteName, setSizeCallback);\n  }\n  self.bind('draw', function(canvas) {\n    var previousAlpha, sprite;\n    if ((I.alpha != null) && I.alpha !== 1) {\n      previousAlpha = canvas.context().globalAlpha;\n      canvas.context().globalAlpha = I.alpha;\n    }\n    if (sprite = I.sprite) {\n      if (sprite.draw != null) {\n        sprite.draw(canvas, -sprite.width / 2, -sprite.height / 2);\n      } else {\n        if (typeof warn === \"function\") warn(\"Sprite has no draw method!\");\n      }\n    } else {\n      if (I.radius != null) {\n        canvas.drawCircle({\n          x: 0,\n          y: 0,\n          radius: I.radius,\n          color: I.color\n        });\n      } else {\n        canvas.drawRect({\n          x: -I.width / 2,\n          y: -I.height / 2,\n          width: I.width,\n          height: I.height,\n          color: I.color\n        });\n      }\n    }\n    if ((I.alpha != null) && I.alpha !== 1) {\n      return canvas.context().globalAlpha = previousAlpha;\n    }\n  });\n  return {","params":[{"canvas":{"type":"PowerCanvas","description":"A reference to the canvas to draw on.","optional":false}}],"returns":null,"see":null}}}},{"GameObject":{"method_list":["create","destroy","step","update","remove"],"methods":{"create":{"summary":"<p>Triggered when the object is created.</p>","code_sample":"<pre><code>enemyCount = 0\n\nenemy = engine.add\n  class: \"Enemy\"\n\nenemy.bind 'create', -&gt;\n  enemyCount++\n</code></pre>","source":null,"params":[],"returns":null,"see":null},"destroy":{"summary":"<p>Triggered when object is destroyed. Use<br />the destroy event to add particle effects, play sounds, etc.</p>","code_sample":"<pre><code>bomb = GameObject()\n\nbomb.bind 'destroy', -&gt;\n  bomb.explode()\n  Sound.play \"Kaboom\"\n</code></pre>","source":null,"params":[],"returns":null,"see":null},"step":{"summary":"<p>Triggered during every update step.</p>","code_sample":"<p>player = GameObject()</p>\n\n<pre><code>player.bind 'step', -&gt;\n  # check to see if keys are being pressed and\n  # change the player's velocity\n  if keydown.left\n    player.velocity(Point(-1, 0))\n  else if keydown.right\n    player.velocity(Point(1, 0))\n  else\n    player.velocity(Point(0, 0))\n</code></pre>","source":null,"params":[],"returns":null,"see":null},"update":{"summary":"<p>Goes to the next level on any user input.</p>","code_sample":"","source":null,"params":[],"returns":null,"see":null},"remove":{"summary":"<p>Triggered when the object is removed from<br />the engine. Use the remove event to handle any clean up.</p>","code_sample":"<pre><code>boss = GameObject()\n\nboss.bind 'remove', -&gt;\n  unlockDoorToLevel2()\n</code></pre>","source":"var GameObject;\n\nGameObject = function(I) {\n  var autobindEvents, defaultModules, modules, self;\n  I || (I = {});","params":[],"returns":null,"see":null}}}},{"GameOver":{"method_list":["update","overlay"],"methods":{"update":{"summary":"<p>Goes to the next level on any user input.</p>","code_sample":"","source":null,"params":[],"returns":null,"see":null},"overlay":{"summary":"<p>Overlays the title text in the middle of the screen. Uses <code>App.name</code></p>","code_sample":"","source":"var TitleScreen;\n\nTitleScreen = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = TextScreen(I);\n  self.bind('update', function() {\n    if (justPressed.any) return engine.nextLevel();\n  });\n  self.bind(\"overlay\", function(canvas) {\n    self.centerText(canvas, App.name);\n    return self.centerText(canvas, \"Press any key to start\", {\n      size: 12,\n      y: App.height / 2 + 30\n    });\n  });\n  return self;\n};\n;","params":[{"canvas":{"type":"PixieCanvas","description":"","optional":false}}],"returns":null,"see":null}}}},{"LevelState":{"method_list":["enter"],"methods":{"enter":{"summary":"<p>Fades in the current level and loads the map.</p>","code_sample":"","source":"var LevelState;\n\nLevelState = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    duration: 10,\n    level: 'level1'\n  });\n  self = GameState(I);\n  self.bind(\"enter\", function() {\n    engine.fadeIn({\n      duration: I.duration\n    });\n    return engine.loadMap(I.level, function() {\n      return engine.I.transitioning = false;\n    });\n  });\n  return self;\n};\n;","params":[],"returns":null,"see":null}}}},{"TextEffect":{"method_list":["update","draw"],"methods":{"update":{"summary":"<p>Goes to the next level on any user input.</p>","code_sample":"","source":null,"params":[],"returns":null,"see":null},"draw":{"summary":"<p>Draws the <code>textShadow</code> text and the <code>text</code> text.</p>","code_sample":"","source":"var TextEffect;\n\nTextEffect = function(I) {\n  var self;\n  if (I == null) I = {};\n  Object.reverseMerge(I, {\n    color: Color('green'),\n    duration: 40,\n    font: '20px Helvetica',\n    text: '100',\n    textShadow: Color('black'),\n    alpha: 1,\n    rotation: 0,\n    rotationalVelocity: 0,\n    velocity: Point(0, -1)\n  });\n  self = GameObject(I);\n  self.bind(\"update\", function() {\n    I.rotation += I.rotationalVelocity;\n    I.x += I.velocity.x;\n    I.y += I.velocity.y;\n    return I.alpha = 1 - (I.age / I.duration);\n  });\n  self.unbind(\"draw\");\n  self.bind(\"draw\", function(canvas) {\n    if (!I.color.channels) I.color = Color(I.color);\n    if (!I.textShadow.channels) I.textShadow = Color(I.textShadow);\n    I.color.a = I.alpha;\n    I.textShadow.a = I.alpha;\n    canvas.font(I.font);\n    canvas.drawText({\n      color: I.textShadow,\n      x: 1,\n      y: 1,\n      text: I.text\n    });\n    return canvas.drawText({\n      color: I.color,\n      x: 0,\n      y: 0,\n      text: I.text\n    });\n  });\n  return self;\n};\n;","params":[{"canvas":{"type":"PixieCanvas","description":"","optional":false}}],"returns":null,"see":null}}}},{"TitleScreen":{"method_list":["update","overlay"],"methods":{"update":{"summary":"<p>Goes to the next level on any user input.</p>","code_sample":"","source":null,"params":[],"returns":null,"see":null},"overlay":{"summary":"<p>Overlays the title text in the middle of the screen. Uses <code>App.name</code></p>","code_sample":"","source":"var TitleScreen;\n\nTitleScreen = function(I) {\n  var self;\n  if (I == null) I = {};\n  self = TextScreen(I);\n  self.bind('update', function() {\n    if (justPressed.any) return engine.nextLevel();\n  });\n  self.bind(\"overlay\", function(canvas) {\n    self.centerText(canvas, App.name);\n    return self.centerText(canvas, \"Press any key to start\", {\n      size: 12,\n      y: App.height / 2 + 30\n    });\n  });\n  return self;\n};\n;","params":[{"canvas":{"type":"PixieCanvas","description":"","optional":false}}],"returns":null,"see":null}}}},{"Bindable":{"method_list":[],"methods":{}}},{"Core":{"method_list":[],"methods":{}}},{"Bounded":{"method_list":[],"methods":{}}},{"Clampable":{"method_list":[],"methods":{}}},{"Collision":{"method_list":[],"methods":{}}},{"Controllable":{"method_list":[],"methods":{}}},{"Cooldown":{"method_list":[],"methods":{}}},{"Debuggable":{"method_list":[],"methods":{}}},{"Durable":{"method_list":[],"methods":{}}},{"Fadeable":{"method_list":[],"methods":{}}},{"Flickerable":{"method_list":[],"methods":{}}},{"Follow":{"method_list":[],"methods":{}}},{"Framerate":{"method_list":[],"methods":{}}},{"Metered":{"method_list":[],"methods":{}}},{"Movable":{"method_list":[],"methods":{}}},{"Oscillator":{"method_list":[],"methods":{}}},{"Rotatable":{"method_list":[],"methods":{}}},{"Sprite":{"method_list":[],"methods":{}}},{"TextScreen":{"method_list":[],"methods":{}}},{"TimedEvents":{"method_list":[],"methods":{}}},{"Tween":{"method_list":[],"methods":{}}}]